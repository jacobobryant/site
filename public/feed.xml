<?xml version="1.0" encoding="UTF-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Jacob O'Bryant</title><updated>2020-01-20T00:00:00.000-07:00</updated><id>https://cdn.jsdelivr.net/gh/jacobobryant/site/public/feed.xml</id><link href="https://cdn.jsdelivr.net/gh/jacobobryant/site/public/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jacobobryant.com" /><author><name>Jacob O'Bryant</name><uri>https://jacobobryant.com</uri></author><entry><title>Startup Validation for Hackers</title><id>https://jacobobryant.com/post/2020/validation/</id><link href="https://jacobobryant.com/post/2020/validation/" /><updated>2020-01-20T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I mentioned &lt;a href=&quot;https://jacobobryant.com/blog/2020-01-13/&quot;&gt;last week&lt;/a&gt; that I had an epiphany about my being-a-startup-founder strategy. I can sort-of capture the essence of it in one sentence: I&apos;ve started using &amp;quot;personal newsletter subscribers&amp;quot; as my primary metric. (If you got here by clicking a link in an email, thanks for helping out).&lt;/p&gt;
&lt;p&gt;This will be my main metric until I get my startup from the figuring-it-out stage to the growth stage. I&apos;ve set a goal to grow the newsletter by 7% each week. My plan is to spend Monday mornings writing about the work I did or thoughts I had the previous week. So ideally I&apos;m not shifting too much time away from working on the startup; I&apos;m just taking advantage of that work to provide good content and grow my subscribers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It comes down to startup validation. I first heard about the concept while reading &lt;a href=&quot;https://www.goodreads.com/book/show/12236649-nail-it-then-scale-it&quot;&gt;Nail It Then Scale It&lt;/a&gt; 2.5 years ago, just before my last semester of college. Instead of going to town on your startup idea, first go talk to people. Make sure it&apos;s something people actually want before you spend a bunch of time on it. It seemed like good advice, and I wanted to be a diligent founder.&lt;/p&gt;
&lt;p&gt;However... I discovered that my efforts at validating my idea were half-hearted. I wanted to create a music player with better algorithms. I had done undergrad research on music recommendation for a couple years, and I was confident I knew how to do a better job algorithmically than the competition. And especially, I deeply wanted this to exist for myself. But I had trouble finding other people who were as excited about my startup idea as I was. I remember trying to explain the idea on one occasion only to be told &amp;quot;This already exists; it&apos;s called Pandora.&amp;quot; (Face palm).&lt;/p&gt;
&lt;p&gt;So what do you do when you fail at validating your startup idea, but you still believe in it yourself?&lt;/p&gt;
&lt;p&gt;As with all my hard startup questions, I asked myself: WWPGD? (&amp;quot;What would Paul Graham do?&amp;quot;). In short, I haven&apos;t seen PG write much about idea validation. I have seen him say, over and over, make something you want yourself. So I decided that my personal belief in the idea was more important than trying to get external validation.&lt;/p&gt;
&lt;p&gt;I even came up with an explanation for why some people harp on idea validation so much (and criticize you if you ignore it—I call them the &amp;quot;Lean Police,&amp;quot; cousins of the Agile/Scrum Police). It&apos;s because there are different kinds of startups. There are plenty of founders for whom &lt;em&gt;idea validation is their form of hacking.&lt;/em&gt; For them, the whole point of doing a startup is to find an inefficiency in the market and fix it. That&apos;s a great thing. It&apos;s just a different thing from working on something because you want it badly for yourself, and it would be a mistake to say that either method is the One True Way to start a startup.&lt;/p&gt;
&lt;p&gt;To expand on that, the whole point of idea validation is to reduce risk. But that&apos;s not always a good thing—it means you may overlook good ideas that seem bad. So putting effort into validation simply has a different risk/reward profile vs. scratching your own itch (not to mention effects on motivation). I think idea validation is good advice; it just doesn&apos;t apply to everyone in every situation.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;Morale is a fragile thing. The joy of working on something you love can be sometimes crowded out by fears of having to get a job if it doesn&apos;t work. Or even worse; the fear of spending years going down a dead end when you could&apos;ve instead failed fast and switched to something good sooner. How do I work on things I love while being smart about the risk?&lt;/p&gt;
&lt;p&gt;I&apos;ve adopted this strategy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pick an idea I love.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decide how far I would need to go in order to satiate my desire to work on it. In other words, which features do I need to scratch my own itch? (You might call this the MVP, but the goal isn&apos;t necessarily to have something that other people will pay for).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code code code. Get there as fast as possible, ideally within a few months. Don&apos;t focus too much on trying to get users. Also don&apos;t worry about how to charge for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the mean time, write every week. Write about my work, write about anything; just try to build a personal following. While I&apos;m not trying to get people to use the product per se, I am preparing to do idea validation later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once I&apos;m at a state of closure—where the project is completed enough that I would feel OK moving on to something else if needed—launch it. Ideally the newsletter is decently large at this point, but there are also channels like Show HN and Product Hunt etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that I&apos;ve given birth, step away from coding so much and focus on
promotion. The goal is to rationally decide if the baby will continue as a
business or as a side project. This decision doesn&apos;t have to happen right
away. I could fork off a background process to do promotion while I work on
another project, do some consulting, or even write full-time. But I should
be past the point of thinking &amp;quot;once I add feature X, &lt;em&gt;then&lt;/em&gt; it&apos;ll be good
enough to get users.&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the project does end up as a business, I&apos;ll be stoked. If it&apos;s a side
project, then at least I&apos;ve been building a &lt;em&gt;personal&lt;/em&gt; newsletter, not a
newsletter for the startup. I can move on to the next thing and keep the same
subscriber base. In fact, the more I&apos;ve been thinking about it, the more I wish
I had started a newsletter 10 years ago. No matter what I do with my
career—startups, consulting, or even getting a job—I can take the
subscribers with me.&lt;/p&gt;
&lt;p&gt;I worked on my music recommendation idea from last June until November, at
which point I decided to pivot. (&lt;a href=&quot;https://jacobobryant.com/post/2020/lagukan-update/&quot;&gt;Details here&lt;/a&gt; if
you&apos;re interested). Had I used this strategy, I think I would have more to show
for it with less time spent.&lt;/p&gt;
</content><category term="startups"></category><category term="introspection"></category></entry><entry><title>Lagukan Update</title><id>https://jacobobryant.com/post/2020/lagukan-update/</id><link href="https://jacobobryant.com/post/2020/lagukan-update/" /><updated>2020-01-14T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;&lt;em&gt;This is a copy of an email I sent to the Lagukan mailing list.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hey everyone. It&apos;s been a while since I sent out an update about Lagukan. I&apos;ve made a lot of strategy changes which I&apos;ll describe below, but the short version is that I haven&apos;t been doing feature development on Lagukan since November; instead, I&apos;ve been working on a new product (a general-purpose recommender system, which can still be used to discover music but won&apos;t integrate directly with a music player). After I launch it—hopefully within a week or two—I&apos;m planning to come back and polish off Lagukan. That&apos;ll include bug fixes, better offline support in Android, algorithm improvements, possibly a Spotify Connect web client (so you can use Lagukan + Spotify from a web browser without installing anything), perhaps some enhancements to the desktop app, and &lt;em&gt;maybe&lt;/em&gt; still an iPhone app. I have to be realistic about doing an iPhone app though, since I don&apos;t know if I&apos;ll for sure be able to justify the time it would take.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Findka, the new product&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After I sent out the last email update in November, I started thinking more seriously about business strategy/how to make money. I also had a small existential crisis—the synopsis being that I thought maybe Spotify&apos;s recommendation algorithm actually was just fine, I just hadn&apos;t been using it correctly. (If true, that would&apos;ve removed most of Lagukan&apos;s value proposition). My fears turned out to be unfounded. I tried using Spotify quite a lot over the past couple months, but it never got any smarter even with all the data I was giving it. In contrast, I&apos;ve been enjoying Lagukan immensely :).&lt;/p&gt;
&lt;p&gt;However, that experience did help me think sincerely about what the alternatives were. In August, I realized there was a good opportunity to build a general-purpose recommender system (which I&apos;ve called &amp;quot;Findka&amp;quot;). Users could import their usage data from all the apps they use (currently, the prototype supports Spotify, Goodreads, RSS and YouTube) and then we can correlate all the data and make recommendations across content types. E.g. we could recommend movies based on what books you like.&lt;/p&gt;
&lt;p&gt;This also has the advantage of being much, much easier to bootstrap than Lagukan, since it doesn&apos;t require getting rights to play music. In addition, domain-specific recommender systems like Lagukan can be added on as complementary products. If you connect your Lagukan account to Findka, then they could share data etc. Plus, if I build a user base with Findka first, I can use that to help promote (especially to artists) a new, independent streaming service for Lagukan.&lt;/p&gt;
&lt;p&gt;I had been thinking since August that I wanted to get Lagukan going and then start work on Findka. But in November, I decided that it made a lot more sense to switch that around and do Findka first. So that&apos;s what I&apos;ve been working on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback and Updates&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For weekly-ish updates about my work on Findka, you can &lt;a href=&quot;https://tinyletter.com/jacobobryant&quot;&gt;subscribe to my personal newsletter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For feedback, you can &lt;a href=&quot;https://twitter.com/obryant666&quot;&gt;send me a tweet&lt;/a&gt; or reply to this email.&lt;/li&gt;
&lt;li&gt;I&apos;ll continue to send relatively infrequent updates about Lagukan and Findka to this mailing list.&lt;/li&gt;
&lt;li&gt;To read this email again, press 3 (and then read it again).&lt;/li&gt;
&lt;/ul&gt;
</content><category term="startups"></category></entry><entry><title>Life updates, 2020-01-13</title><id>https://jacobobryant.com/blog/2020-01-13/</id><link href="https://jacobobryant.com/blog/2020-01-13/" /><updated>2020-01-13T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I&apos;ve decided to start writing weekly updates about my work, life, etc.
Typically I&apos;ve only written in-depth articles on specific topics; but that
leaves out a lot of content in my head. So these blog updates will be
lower-friction and more frequent. Plus, I can always take excerpts and turn
them into separate articles later.&lt;/p&gt;
&lt;h3&gt;Findka&lt;/h3&gt;
&lt;h4&gt;Bye-bye Airtable&lt;/h4&gt;
&lt;p&gt;I released a new version of &lt;a href=&quot;https://findka.com&quot;&gt;Findka&lt;/a&gt; last week. Previously,
I had been using Airtable as a CMS for users. After you created a Findka
account, you would copy a template base into your Airtale account, and you&apos;d
enter the API key and base ID into Findka. When Findka imported your data from
other accounts, the data would be stored in Airtable. The contents of Airtable
were used to then generate your Findka profile/website. There was even a
key-value base in the template which I used as an easy way to add configuration
options.&lt;/p&gt;
&lt;p&gt;This saved me from the horrors of adding a bunch of CRUD to Findka; however, it
simply wasn&apos;t a great user experience. &lt;a href=&quot;https://community.airtable.com/t/could-airtable-power-my-ios-app/684&quot;&gt;Airtable wasn&apos;t meant to be used this
way&lt;/a&gt;, and
although I really liked the setup, it was confusing for others who tried
using Findka. So I finally decided to do the sane thing and just store user
data in my own database.&lt;/p&gt;
&lt;p&gt;I hope that at some point, easy-to-use &lt;a href=&quot;https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech&quot;&gt;data
stores&lt;/a&gt;
become available. Basically, the idea is that users would each have their own
(managed or self-hosted) database which includes auth flows so you can give
access to other apps. You&apos;d also have an Airtable-like interface so users could
manipulate their data directly. Then instead of handling all the CRUD myself, I
would specify a schema for data that my app needs, and users would go
through an OAuth flow that sets everything up with their personal data store.
(And if they didn&apos;t already have one, it&apos;d be easy to sign up within the flow.)
Or even better; signing up for Findka would automatically create a free-tier
data store, which would be moved into the user&apos;s existing account if they
choose.&lt;/p&gt;
&lt;p&gt;The best benefits of this IMO would be ease of development for me and
hackability (in the good sense) for users. To expand on the latter, imagine if
all your project management data was stored in a database that you had direct
access to (instead of in *shudder* JIRA). And now imagine that there was a
vibrant plugin ecosystem. If you wanted a better UI than JIRA provides for a
particular workflow, you could install a plugin for just that use-case while
continuing to use JIRA for everything else.&lt;/p&gt;
&lt;p&gt;Anyway, that&apos;s one of the things I&apos;d like to build at some point. I think the
time isn&apos;t quite right for it yet though.&lt;/p&gt;
&lt;h4&gt;Also, bye-bye Fulcro&lt;/h4&gt;
&lt;p&gt;When I started working on Findka about six weeks ago, I decided to try using
Fulcro, which I had never learned before. But ultimately I decided that it&apos;s
not for me. I spent Friday and Saturday ripping it out and replacing it with
Rum and some custom code for managing state + backend/DB communications. I&apos;m
really happy with the result.&lt;/p&gt;
&lt;p&gt;The whole point of Fulcro is to manage the complexity of large apps, not to
make small apps simple/easy. So there&apos;s a threshold of app size/complexity
below which it doesn&apos;t make sense to use Fulcro. At the very least, I simply
misjudged where that threshold is. Findka is higher than weekend-project level,
but it&apos;s still at the solo-developer level. Maybe Fulcro is better for larger
projects that involve more people.&lt;/p&gt;
&lt;p&gt;The biggest issue I had with Fulcro is that there&apos;s a lot of added complexity
involved with maintaining the client-side database. One of Fulcro&apos;s main
features is automatic normalization: you define your data model as a tree
structure, inline with your UI, and then Fulcro converts that into a normalized
graph structure for you. However, in order to make the automatic normalization
work, you have to do a fair amount of work whenever you read or write data.&lt;/p&gt;
&lt;p&gt;Also, everything has to be done through a myriad of functions; Fulcro&apos;s API is
not very data-driven. It was hard to build a mental model for how everything
worked; instead it was more like &amp;quot;use this function for this situation, that
function for that situation,&amp;quot; etc. I often found myself in situations that the
documentation didn&apos;t quite cover, which meant I had to go read through the
source code (some times I was successful, other times ended in work-arounds).&lt;/p&gt;
&lt;p&gt;The result is that I ended up being slowed down significantly by Fulcro, and
eventually I hit the breaking point. I am glad I had the experience of using it
though. It was educational, and I could see myself going back to the docs to
get ideas for how to handle various things in my new bespoke framework.&lt;/p&gt;
&lt;h4&gt;The new architecture&lt;/h4&gt;
&lt;p&gt;For one thing, I liked the way Fulcro structured the client DB. As an example,
a slice of your DB might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;{:item {1 {:title &amp;quot;foo&amp;quot;
           :description &amp;quot;bar&amp;quot;}
        2 {:title &amp;quot;spam&amp;quot;
           :description &amp;quot;eggs&amp;quot;
           :item-ref [:item 1]}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you have two entities, and they have idents of &lt;code&gt;[:item 1]&lt;/code&gt; and &lt;code&gt;[:item 2]&lt;/code&gt;
respectively. I&apos;m keeping roughly the same structure, and I&apos;m using lots of
&lt;a href=&quot;https://github.com/tonsky/rum#cursors&quot;&gt;cursors&lt;/a&gt; and
&lt;a href=&quot;https://github.com/martinklepsch/derivatives&quot;&gt;derivatives&lt;/a&gt; to access individual parts.
I would love to use &lt;a href=&quot;https://github.com/arachne-framework/factui&quot;&gt;FactUI&lt;/a&gt;,
but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn&apos;t have pull expressions.&lt;/li&gt;
&lt;li&gt;It seems experimental, and I want to stay slightly more on the
tried-and-true path for this project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For server communications, I set up a single REST endpoint which takes re-frame
style events. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;; Server
(defmethod handle :some-event
  [{:keys [opts] :as req}]
  (assert (= opts {:event-data &amp;quot;foo&amp;quot;}))
  &amp;quot;hello&amp;quot;)

; Client
(go (println (&amp;lt;! (events/hit [:some-event {:event-data &amp;quot;foo&amp;quot;}]))))
=&amp;gt; &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For handling CRUD (well, CUD) operations, I&apos;ve made a &lt;code&gt;:save&lt;/code&gt; event handler
which takes a custom transaction data structure, authorizes it using spec and
the user&apos;s authenticated ID, and then converts it to a Datomic transaction.
My new transaction format looks like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(events/hit
  [:save
   {; Each key is an ident.
    [:item &amp;quot;https://item-url.example.com&amp;quot;] {:item/title &amp;quot;new title&amp;quot;
                                            ; Set a nil value to retract.
                                            :item/description nil}
    ; You can retract entire entities too.
    [:item &amp;quot;https://another-url.example.com&amp;quot;] nil
    ; Singleton entities have an ident with only one element.
    [:user] {:user.profile/id &amp;quot;jobryant&amp;quot;
             ; Component entities can be included as nested maps.
             :user/site-config {:site-config/display-name &amp;quot;Jacob&amp;quot;
                                :site-config/color &amp;quot;#343a40&amp;quot;}}}])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For authorization, you define some rules:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def rules
  ; Each key is a &amp;quot;table,&amp;quot; i.e. the first element in an ident.
  {:item {; Each entity in the transaction must match the spec for its table.
          ; only-keys doesn&apos;t allow any keys outside req and opt.
          ; s/nilable means the user can retract entities from this table.
          :spec (s/nilable (only-keys :req [:item/url-0] :opt schema/item-keys))
          ; Given some context (`env`) and an entity&apos;s (client-side) ident, return
          ; a Datomic lookup ref.
          :id (fn [env [_ url]]
                [:item/key-1 [url (:user-eid env)]])
          ; If specified, the user&apos;s authenticated ID will be added to this key
          ; on the entity.
          :user-key :item/user-0}

   :user {:spec (only-keys :opt [:user.profile/id :user/site-config])
          :id (fn [env _]
                (:user-eid env))}

   :integrations {:spec (only-keys :opt [:user.integration/goodreads-id
                                         :user.integration/feed-url
                                         :user.integration/spotify-oauth])
                  :id (fn [env _]
                        (:user-eid env))}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, entity values will be checked against any specs that have been
registered for their keys. Component entities must have specs defined for their
keys, e.g. &lt;code&gt;(s/def :user/site-config (only-keys :opt schema/site-config-keys))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&apos;d like to publish this transaction-handling code as a library after it&apos;s more
fleshed-out and battle-tested, but in the mean time you can take a look at
the &lt;a href=&quot;https://github.com/jacobobryant/trident/blob/3c05dd401b8dcdcecd81005adc35fe3b5bb8c453/src/trident/datomic_cloud.clj#L76&quot;&gt;post-authorization conversion code&lt;/a&gt;
if you&apos;re interested.&lt;/p&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;I&apos;ve reached the point now where my development environment involved opening
about nine different terminal tabs whenever I get started, so I decided to
figure out how to automate that. I&apos;ve started using tmux (and tmuxp for session
management) and it&apos;s amazing. I can&apos;t believe I had gone all these years without
it. I&apos;ve set my terminal-opening keyboard shortcut to &lt;code&gt;gnome-terminal -- tmux&lt;/code&gt;,
so I&apos;ve moved completely from the builtin tabs to tmux. My &lt;code&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set -g status-bg black
set -g status-fg white
set -g mouse on
set -g focus-events on
bind -n C-S-Pagedown swap-window -t +1\; select-window -t +1
bind -n C-S-Pageup swap-window -t -1\; select-window -t -1
bind -n C-Pagedown next-window
bind -n C-Pageup previous-window
bind -n C-t new-window -c &amp;quot;#{pane_current_path}&amp;quot;
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R
bind C-b select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other than figuring that out, I just had to learn how to copy-paste (hold shift
while you select/middle-mouse click) and scroll (ctrl-b PageUp to enter scroll
mode (well, &amp;quot;copy mode&amp;quot;), ctrl-c to exit).&lt;/p&gt;
&lt;p&gt;I also finally got fed up with Vim adding extra indentation to e.g. custom
macros, like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(some-macro [a b c]
            &amp;quot;uggggh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And so I discovered and added the following gem to my &lt;code&gt;nvim/init.vim&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let g:clojure_fuzzy_indent_patterns = [&apos;.*&apos;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This implements &lt;a href=&quot;https://tonsky.me/blog/clojurefmt/&quot;&gt;Tonsky&apos;s suggestion&lt;/a&gt; of
&amp;quot;Multi-line lists that start with a symbol are always indented with two spaces&amp;quot;.
Like tmux, I can&apos;t believe I&apos;d gone so long without it.&lt;/p&gt;
&lt;h3&gt;This week&lt;/h3&gt;
&lt;p&gt;I&apos;ll add more integrations to Findka and start working on the recommender system
portion. I&apos;m hoping to have it at an MVP level (at least for the free tier)
within a couple weeks.&lt;/p&gt;
&lt;p&gt;Yesterday I also did a lot of thinking about my general approach to being a
startup founder, and I might make some major modifications. I&apos;ve had enough
writing for now though; maybe I&apos;ll talk about it next week. But it might result
in me going back to do more work on &lt;a href=&quot;https://lagukan.com&quot;&gt;Lagukan&lt;/a&gt;!&lt;/p&gt;
</content></entry><entry><title>AWS Battles, Episode 1</title><id>https://jacobobryant.com/post/2019/aws-battles-ep-1/</id><link href="https://jacobobryant.com/post/2019/aws-battles-ep-1/" /><updated>2019-12-27T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I&apos;m starting a new series. Whenever I start thinking about how much work it
might take to ditch AWS and Datomic Ions and set up Datomic On-Prem on
DigitalOcean instead, I&apos;m going to write a blog post about what happened.&lt;/p&gt;
&lt;p&gt;I made the mistake of trying to deploy code to my Datomic system today. As
usual, the deploy failed shortly after initiating it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ iondeploy  # My deploy script. It prints the status every 3 seconds.
...
{:deploy-status &amp;quot;RUNNING&amp;quot;, :code-deploy-status &amp;quot;RUNNING&amp;quot;}
{:deploy-status &amp;quot;RUNNING&amp;quot;, :code-deploy-status &amp;quot;RUNNING&amp;quot;}
{:deploy-status &amp;quot;RUNNING&amp;quot;, :code-deploy-status &amp;quot;RUNNING&amp;quot;}
{:deploy-status &amp;quot;RUNNING&amp;quot;, :code-deploy-status &amp;quot;RUNNING&amp;quot;}
{:deploy-status &amp;quot;RUNNING&amp;quot;, :code-deploy-status &amp;quot;RUNNING&amp;quot;}
{:deploy-status &amp;quot;FAILED&amp;quot;, :code-deploy-status &amp;quot;FAILED&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A successful deploy usually has about 15 status lines. If it fails after four
or five lines, that means the deploy had an out-of-memory error. (If there are
30+ status lines before failure, that means it&apos;s the dreaded
arggh-&lt;code&gt;ValidateService&lt;/code&gt;-failed-again error).&lt;/p&gt;
&lt;p&gt;Usually, at this point I would log into the EC2 console, terminate the compute
instance, wait for the auto scaling group to bring another instance up, and
then deploy (and sigh wistfully... &amp;quot;if only the solo topology didn&apos;t use
a weenie &lt;code&gt;t3.small&lt;/code&gt; instance&amp;quot;). But since this is a near-daily occurrence for me,
I decided to figure out how to terminate the instance using the AWS CLI instead.&lt;/p&gt;
&lt;p&gt;Here&apos;s the result (thanks &lt;a href=&quot;https://github.com/borkdude/babashka&quot;&gt;Borkdude&lt;/a&gt;!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;#!/bin/bash
# vim: ft=clojure
id=$(aws ec2 describe-instances | bb -i &apos;
(-&amp;gt;&amp;gt; *input*
     (str/join &amp;quot;&amp;quot;)
     (#(json/parse-string % true))
     :Reservations
     (mapcat :Instances)
     (filter (fn [{:keys [Tags]}]
               (-&amp;gt;&amp;gt; Tags
                    (filter #(= &amp;quot;Name&amp;quot; (:Key %)))
                    first
                    :Value
                    (= &amp;quot;bud&amp;quot;))))
     first
     :InstanceId
     println)&apos;)

aws ec2 terminate-instances --instance-ids $id
watch aws ec2 describe-instance-status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&amp;quot;bud&amp;quot; is my Datomic application name, chosen because the first app I made on
this system was a budgeting app. It may not have any meaning now, but at least
it&apos;s short and easy to remember, like all good variable names.)&lt;/p&gt;
&lt;p&gt;Something went wrong though. Maybe there&apos;s some kind of difference between
terminating an instance from the command line or from the EC2 console,
although my guess is it was just a coincidence. Fate is punishing me for my
existence. Anyway, the instances kept dying whenever the auto scaling group
tried to bring another one up:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2019/aws-battles-ep-1/ec2-console.jpg&quot; alt=&quot;ec2 console&quot;&gt;&lt;/p&gt;
&lt;p&gt;It was stuck in a loop of trying to boot instances only to have them come
dead-on-arrival. Actually that wouldn&apos;t normally be a problem: I noticed
recently that often, the first one or two new instances would die, followed by a
successfully booted instance. But this time they just kept dying, as if it
was some kind of zombie apocalypse.&lt;/p&gt;
&lt;p&gt;Today I learned that you can easily view the system logs for an instance
from the EC2 console (under Actions -&amp;gt; Instance Settings -&amp;gt; Get System Log),
after which I found the culprit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;login: /dev/fd/11: line 1: /sbin/plymouthd: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&apos;t know what the deal with that is, but I searched for the error, and
someone on StackExchange said it was because something was wrong with something
else, so I decided to try deleting and re-creating the CloudFormation stack. I
wasn&apos;t sure if that was an OK thing to do or not (I&apos;m not exactly an AWS
expert, in case you haven&apos;t already guessed), but I checked the &lt;a href=&quot;https://docs.datomic.com/cloud/operation/deleting.html#deleting-stacks&quot;&gt;Datomic docs&lt;/a&gt;,
and huzzah, it is an OK thing to do.&lt;/p&gt;
&lt;p&gt;One stack deletion later, I find that my compute stack is stuck in a &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;
state. Boo. I did a search for force-deleting a stack and found
&lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?threadID=148754&amp;amp;start=0&amp;amp;tstart=0&quot;&gt;this thread&lt;/a&gt;
on the AWS forums. It contained the sad tale of Eric, an AWS customer trying to
do something that wasn&apos;t working. Halfway down the page, and after several usages of
the word &amp;quot;unacceptable,&amp;quot; I felt like I was right there with Eric. &amp;quot;Yeah, I hate
AWS too!&amp;quot; (Maybe 2020 will be the year of Datomic-Cloud-Ions-on-the-Firebase).&lt;/p&gt;
&lt;p&gt;Fortunately, the very last post in that thread (from just last October, five years after Eric&apos;s original
post—hopefully his stack has finished deleting by now) contained a link to
&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-lambda-resource-delete/&quot;&gt;a document&lt;/a&gt;
for troubleshooting this very issue. Hallelujah.&lt;/p&gt;
&lt;p&gt;It had two sections, one for fixing &lt;code&gt;DELETE_FAILED&lt;/code&gt; and one for fixing
&lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;. I went to the latter section. Everything was going great until about
halfway through step 1. I had downloaded Datomic&apos;s CloudFormation template, I
did a search for &lt;code&gt;ServiceToken&lt;/code&gt;... and got five or seven results, with no idea
how to &lt;code&gt;identify the name of the Lambda function where your custom resource is sending requests&lt;/code&gt;. Maybe I should just pick one? There were a couple that had &amp;quot;Delete&amp;quot;
in the name, that sounds promising....&lt;/p&gt;
&lt;p&gt;I was saved by the bell. I switched back to the CloudFormation console and
found that my stack had switched from &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt; to &lt;code&gt;DELETE_FAILED&lt;/code&gt;. That
meant I could try the other set of instructions! My heart soared. (Well, it at least
picked up a little). The instructions for fixing &lt;code&gt;DELETE_FAILED&lt;/code&gt; were much simpler.
I was confronted with a dialog and two checkboxes and a charge to
&lt;code&gt;choose the custom resource that&apos;s stuck in the DELETE_FAILED status&lt;/code&gt;. Unsure
of which one to pick, I selected both of them (I think... or maybe I left both
of them unselected. I think I selected them though). After that, the stack
finally deleted. The worst was over.&lt;/p&gt;
&lt;p&gt;Then it was just a little cleanup. I &lt;a href=&quot;https://docs.datomic.com/cloud/getting-started/configuring-access.html#authorize-gateway&quot;&gt;re-enabled SSH access to the
bastion&lt;/a&gt;,
re-deployed my Datomic application (successfully!), and then fiddled with API
Gateway until it forwarded requests to the newly created Lambdas. That involved
deleting-and-recreating the Lambda proxy resource for each API while muttering the
correct incantations so as not to offend the CORS gods.&lt;/p&gt;
&lt;p&gt;At last, after only two-ish hours of down-time, the three apps I&apos;m hosting on
Datomic are up and running again. Well, not including &lt;a href=&quot;https://notjust.us&quot;&gt;one of
them&lt;/a&gt;— I&apos;m still waiting on a bugfix before that one
will work again. :)&lt;/p&gt;
</content></entry><entry><title>What I've Learned Since Quitting My Job</title><id>https://jacobobryant.com/post/2019/reflections/</id><link href="https://jacobobryant.com/post/2019/reflections/" /><updated>2019-11-15T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I got my bachelor&apos;s degree in 2017 and then worked for a year as a software
engineer. Last January I quit and began working on a startup full-time with a
friend I met while in school. I realized after a few months that we weren&apos;t a
good fit as cofounders, so I bailed. I then spent some time trying to
figure out what to do with my life. In June I decided to go all-in on my
current startup, &lt;a href=&quot;https://lagukan.com&quot;&gt;Lagukan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Several days ago, I discovered a potentially critical flaw in my startup idea. I
might need to take a major change of direction (though I&apos;m thinking of moving to
an idea that will still solve some of the same problems). This kind of thing has
happened to me quite a lot in the past year, so I thought I&apos;d take this
opportunity to do some introspection before I go head-down coding again.&lt;/p&gt;
&lt;p&gt;So, here are a few of the things I&apos;ve been thinking about.&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;&lt;strong&gt;Spotify is actually pretty good&lt;/strong&gt;&lt;/strike&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: after testing out Spotify for longer than one day, I no longer believe this.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve been in love with music since I was about 12. I started using Pandora while
in high school. I discovered a lot of new music that way, but it was far from
perfect. It was never able to fully adapt to my preferences (e.g. I love melodic
hard rock and hate metal, a distinction that was utterly beyond Pandora), and it
tended to play the same things over and over.&lt;/p&gt;
&lt;p&gt;I started doing music recommendation research while in college, culminating in a
prototype that played from Spotify and my MP3 collection but used my own custom
algorithm. It was nice, although it left a lot to be desired. I later tried using
vanilla Spotify for a while and wasn&apos;t super impressed.&lt;/p&gt;
&lt;p&gt;Hence, I eventually decided to pursue my recommender system project as a startup
(Lagukan). It seemed like a natural choice. I was encouraged by the response on
Hacker News to my first prototype. &lt;a href=&quot;https://news.ycombinator.com/item?id=20585143&quot;&gt;Here&apos;s a
snippet&lt;/a&gt; from one of my favorite
comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh man... I haven&apos;t been able to find any recommendation algorithms that
recommended songs I liked even 1% of. Spotify&apos;s is a trash fire. Last.fm&apos;s
wasn&apos;t great. Pandora is okay.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pulling off a successful music company has been historically pretty difficult,
but I was alright with that since I was working on something that was deeply
meaningful to me.&lt;/p&gt;
&lt;p&gt;One of the most important issues in music recommendation (and more generally, in
reinforcement learning) is balancing exploration (trying out new songs) with
exploitation (playing songs you&apos;ve listened to before). Lagukan has two
separate algorithms for these tasks plus a parent algorithm that decides which
sub-algorithm to use at any given moment. It&apos;s a delicate balance.
Back when I was a Pandora user, they only really addressed exploration. Spotify
seemed to have the opposite problem of doing too much exploitation.&lt;/p&gt;
&lt;p&gt;However, I&apos;ve slowly realized that I was likely just using Spotify wrong.
I&apos;ve always had the assumption that a music player should be totally automatic:
just hit play, skip what you don&apos;t want to hear right now, then the algorithm
should do everything else. That&apos;s how I&apos;ve built Lagukan, and that&apos;s how I tried
to use Spotify—I almost exclusively listened to Daily Mix.&lt;/p&gt;
&lt;p&gt;This is a long-winded way of saying &amp;quot;I should&apos;ve been using Discover Weekly.&amp;quot;&lt;/p&gt;
&lt;p&gt;I had read several comments on HN saying that Spotify performed much better if
you listen to Discover Weekly consistently. It makes sense—that&apos;s their
solution for those who want automated exploration, and Daily Mix is for
exploitation. Sure, it&apos;s not all wrapped up into a single totally automatic
algorithm, but the overhead is pretty low.&lt;/p&gt;
&lt;p&gt;I&apos;ve been using Spotify directly for the past few days, and it&apos;s been
disturbingly effective. It&apos;s been seeded by Lagukan&apos;s exploration from the past
month or so, but I&apos;m going to try using just Spotify for several weeks and see
how well it does. I&apos;m open to the possibility of not needing Lagukan personally.&lt;/p&gt;
&lt;p&gt;Even if Spotify turns out to work well for me, there likely are other
people for whom a better recommendation algorithm would still be valuable. But
if I&apos;m not one of those people, then I don&apos;t think I&apos;ll be able
to generate the insights needed to help them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You should be comfortable with cutting your losses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It sucks to put five months into a startup built on a false hypothesis, but it&apos;s
better than sticking with it and running out of savings. I&apos;d say it&apos;s also
better than never taking the leap at all, because the losses often aren&apos;t.&lt;/p&gt;
&lt;p&gt;For one, my skills have grown far faster than they ever did while I was a
student or an employee. I&apos;ve been able to learn everything I wanted to in
college but (ironically) never had the time for due to coursework, and I&apos;ve
discovered plenty of things that I&apos;d like to dive into more. It&apos;s the most
freeing educational experience I&apos;ve had since I was a homeschooled teenager.
I&apos;ve also learned quite a bit about the industries I&apos;ve been trying to enter,
not to mention the emotional dynamics of not having any external validation from
being an employee or a student.&lt;/p&gt;
&lt;p&gt;Despite failing over and over in the past year, I don&apos;t see any of it as a
waste. It feels more like do-it-yourself grad school (minus the degree at the
end). I don&apos;t think any other path would have been as good of an investment in
myself.&lt;/p&gt;
&lt;p&gt;About three months ago, I started to get another idea
for a recommender system startup that I actually think is more promising than
what I&apos;ve been doing. I stuck with Lagukan because I didn&apos;t want to get
whipsawed, constantly switching ideas before getting traction. Even if I do
ultimately decide to relegate Lagukan to side project status, maybe my work will
turn out to have been optimal: I wouldn&apos;t have had this second idea if I hadn&apos;t
dug into music recommendation.&lt;/p&gt;
&lt;p&gt;What about giving up too easily? You certainly shouldn&apos;t do that, but if you,
in your heart, no longer believe in the idea, I think that&apos;s a pretty good
indication that it&apos;s time to switch. I&apos;ve been through many discouraging
experiences with Lagukan, but this is the first time I&apos;ve seriously doubted
the validity of my core value proposition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It helps to articulate what you want to get out of your career&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m a huge fan of Paul Graham. I stumbled on his essays while in high school; it
was the first time I ever heard about startups (and Lisp!). I like to think I&apos;m
still as ambitious as 15-year-old me reading his essays for the first time, but
actually trying to start my own business without giving up requires that I
understand why it&apos;s worth my time.&lt;/p&gt;
&lt;p&gt;First of all, I have to be a startup founder because right now there are certain
things about the world that I&apos;d like to fix, and it would kill me to spend my
hours at a day job instead. But what else is important to me?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Working on my own projects. Even if I don&apos;t do it as a startup, I have to at
least have lots of time for side projects. I love exploring and I&apos;m a very
self-motivated learner. I can&apos;t give up my freedom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working in Clojure. I was more agnostic when I graduated, but after
a year each of doing Clojure and non-Clojure full-time, this is
important to me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Playing clarinet. I&apos;d like to join an orchestra again, though I&apos;ve put it on
hold while I try to build a business. At some point I need to
have at least an hour a day for practicing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teaching. This is another thing I love doing, and it&apos;s high-impact. At a
minimum, I need time to write guides and tutorials regularly. (On the other
extreme, some kind of education startup is my backup-backup-plan for
Lagukan).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all these demands, you can probably see another reason why doing a
startup is so appealing to me: it&apos;d be great to just make a lot of money all at
once so I have freedom to work on whatever I want, regardless of if it&apos;s
profitable or not.&lt;/p&gt;
&lt;p&gt;But if I get through all my startup ideas and fail each time, what&apos;s next? If
Stripe offered me a 30-hour-per-week position writing Clojure, I&apos;d probably take
it. Barring that, I think consulting is the most likely way to hit all
the bullet points. I would be fine alternating between my own projects and
clients&apos; projects. (I&apos;ve also thought seriously about grad school... but I&apos;ve
decided against it because I&apos;m interested in &lt;a href=&quot;http://www.paulgraham.com/desres.html&quot;&gt;design, not
research&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The result of all this pondering is that my decision to continue being a startup
founder is based on careful reason, not emotion alone (I&apos;m not a fan of
burn-the-ships). I&apos;m confident that if I come to a point where the rational
thing is to no longer be a startup founder, then I&apos;ll do something else and
still be happy. That understanding helps me to not get so depressed when bad
things happen, which is important since startups run on morale. Knowing that
there are other good career alternatives also helps with cutting losses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coming up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve also developed my own opinions about cofounders, networking, idea
validation, bootstrapping vs. VC... so let me know if you&apos;d like to read a &amp;quot;part
2&amp;quot; of this article. Meanwhile I&apos;ll be building a prototype for my next idea.
Fortunately, I should be able to release this one within a week or two. And if
it works, Lagukan will likely make a good complementary product down the rode.
I&apos;ll keep my fingers crossed.&lt;/p&gt;
</content></entry><entry><title>Learn Clojure with Web Dev</title><id>https://jacobobryant.com/post/2019/learn-clojure/</id><link href="https://jacobobryant.com/post/2019/learn-clojure/" /><updated>2019-10-23T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;I&apos;ve created this document so that I have a single link I can give people for
learning Clojure. It is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a work in progress&lt;/li&gt;
&lt;li&gt;not meant to be comprehensive&lt;/li&gt;
&lt;li&gt;opinionated/a reflection of how I do web development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&apos;m trying to help people get started without being overwhelmed by all the
different options. I&apos;ll link to existing resources when possible, adding my
own as needed.&lt;/p&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic terminal experience&lt;/li&gt;
&lt;li&gt;comfortable with HTML and CSS&lt;/li&gt;
&lt;li&gt;know a different programming language already&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hello world&lt;/h3&gt;
&lt;p&gt;First, &lt;a href=&quot;https://clojure.org/guides/getting_started&quot;&gt;install Clojure&lt;/a&gt;. Then type
&lt;code&gt;clj&lt;/code&gt; to get an interactive prompt (&amp;quot;repl,&amp;quot; short for read-eval-print-loop). In
the repl, type &lt;code&gt;(println &amp;quot;hello world&amp;quot;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clj
Clojure 1.10.0
user=&amp;gt; (println &amp;quot;hello world&amp;quot;)
hello world
nil
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using the default repl, you can get an enhanced repl like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clojure -Sdeps &amp;quot;{:deps {com.bhauman/rebel-readline {:mvn/version \&amp;quot;0.1.4\&amp;quot;}}}&amp;quot; -m rebel-readline.main
[Rebel readline] Type :repl/help for online help info
user=&amp;gt; (println &amp;quot;hello world&amp;quot;)
hello world
nil
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I recommend saving this as an alias, e.g. put the following in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alias repl=&apos;clojure -Sdeps &amp;quot;{:deps {com.bhauman/rebel-readline {:mvn/version \&amp;quot;0.1.4\&amp;quot;}}}&amp;quot; -m rebel-readline.main&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Run from a file&lt;/h4&gt;
&lt;p&gt;I recommend starting out with the &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; text editor.[1] After you
install it, create a new project folder. Within that folder, edit a new file
&lt;code&gt;src/web/core.clj&lt;/code&gt; with Atom. So your project folder should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ tree myproject/
myproject/
└── src
    └── web
        └── core.clj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put the following inside &lt;code&gt;core.clj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(ns web.core)

(defn hello []
  (println &amp;quot;hello world&amp;quot;))

(defn -main []
  (hello))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the terminal, you can run the file like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd myproject
$ clj -m web.core
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Start learning Clojure&lt;/h3&gt;
&lt;p&gt;For actually learning the language, I recommend
&lt;a href=&quot;https://www.braveclojure.com/clojure-for-the-brave-and-true/&quot;&gt;Clojure for the Brave and True&lt;/a&gt;. (It&apos;s
available online for free at that link, though I liked having a hard copy).&lt;/p&gt;
&lt;p&gt;You can skip chapters 1 and 2. Work through chapter 3 before going on to the
next section in this document. Fairly soon, make sure you also understand
everything in chapters 4 and 5. These three chapters contain the fundamentals of
the language.&lt;/p&gt;
&lt;p&gt;All of the remaining chapters are useful too. Make sure you understand them
eventually. But for now, you can just skim them a bit and refer back as needed.&lt;/p&gt;
&lt;h3&gt;Start doing web dev&lt;/h3&gt;
&lt;p&gt;I&apos;ll now show you the first fundamental of web development: how to generate
HTML and CSS. We&apos;ll create a static landing page. This is a great first project
because it&apos;s pretty simple, and generating HTML + CSS is much nicer in Clojure
than in any other language. You could even extend this project into a personal
blog/website if you like (this website is written with Clojure).&lt;/p&gt;
&lt;p&gt;We need to add a library to your project. Create a file &lt;code&gt;myproject/deps.edn&lt;/code&gt;
with the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;{:deps
 {trident/staticweb {:mvn/version &amp;quot;0.1.18&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change the contents of &lt;code&gt;core.clj&lt;/code&gt; to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(ns web.core
  (:require [trident.staticweb :as tsweb]))

(def landing-page
  [:p &amp;quot;hello world&amp;quot;])

(defn -main []
  (println (tsweb/html landing-page)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;tsweb/html&lt;/code&gt; function[2] takes a data structure that represents HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clj -m web.core
&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can add inline css like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def landing-page
  [:p {:style {:color &amp;quot;red&amp;quot;}} &amp;quot;hello world&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clj -m web.core
&amp;lt;p style=&amp;quot;color:red&amp;quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we&apos;re using plain data structures for both HTML and CSS, we can use
functional abstraction and other standard programming techniques instead of
dealing with templating languages or preprocessors. (Hallelujah).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn p [color text]
  [:p {:style {:color color}} text])

(def landing-page
  [:div
   (p &amp;quot;red&amp;quot; &amp;quot;hello world&amp;quot;)
   (p &amp;quot;blue&amp;quot; &amp;quot;goodnight moon&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clj -m web.core
&amp;lt;div&amp;gt;
  &amp;lt;p style=&amp;quot;color:red&amp;quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
  &amp;lt;p style=&amp;quot;color:blue&amp;quot;&amp;gt;goodnight moon&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Indentation added).&lt;/p&gt;
&lt;p&gt;Let&apos;s make this a little more complete, and let&apos;s have it write the HTML to a file
for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def landing-page
  [:html
   [:head
    [:meta {:charset &amp;quot;utf-8&amp;quot;}]]
   [:body
    [:div
     (p &amp;quot;red&amp;quot; &amp;quot;hello world&amp;quot;)
     (p &amp;quot;blue&amp;quot; &amp;quot;goodnight moon&amp;quot;)]]])

(defn -main []
  (spit &amp;quot;public/index.html&amp;quot; (tsweb/html landing-page)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before running this, you&apos;ll need to create the &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mkdir public
$ clj -m web.core
$ cat public/index.html
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;p style=&amp;quot;color:red&amp;quot;&amp;gt;hello world&amp;lt;/p&amp;gt;
      &amp;lt;p style=&amp;quot;color:blue&amp;quot;&amp;gt;goodnight moon&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can open &lt;code&gt;index.html&lt;/code&gt; in a web browser now.&lt;/p&gt;
&lt;p&gt;For interactivity, we&apos;ll add some plain Javascript. We could use Clojurescript,
but it&apos;s overkill for simple things (in addition to increasing your payload
size, using Clojurescript can be quite complex). You can switch to Clojurescript
later when the time is right.&lt;/p&gt;
&lt;p&gt;Add a button to the div element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;[:div
 (p &amp;quot;red&amp;quot; &amp;quot;hello world&amp;quot;)
 (p &amp;quot;blue&amp;quot; &amp;quot;goodnight moon&amp;quot;)
 [:button {:onclick &amp;quot;alert(\&amp;quot;spam eggs\&amp;quot;)&amp;quot;} &amp;quot;click me&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regenerate the HTML and test out the button before we move on.&lt;/p&gt;
&lt;p&gt;Let&apos;s separate the Javascript into a separate file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def landing-page
  [:html
   [:head
    [:meta {:charset &amp;quot;utf-8&amp;quot;}]
    [:script {:src &amp;quot;index.js&amp;quot;}]]
   [:body
    [:div
     (p &amp;quot;red&amp;quot; &amp;quot;hello world&amp;quot;)
     (p &amp;quot;blue&amp;quot; &amp;quot;goodnight moon&amp;quot;)
     [:button {:onclick &amp;quot;doSomething()&amp;quot;} &amp;quot;click me&amp;quot;]]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file &lt;code&gt;myproject/public/index.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function doSomething() {
  alert(&amp;quot;spam eggs&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regenerate and test it out.&lt;/p&gt;
&lt;p&gt;Next, let&apos;s add some &lt;a href=&quot;https://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt; to make CSS easier.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def bootstrap-4
  [:link {:rel &amp;quot;stylesheet&amp;quot;
          :href &amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&amp;quot;
          :integrity &amp;quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&amp;quot;
          :crossorigin &amp;quot;anonymous&amp;quot;}])

(def landing-page
  [:html
   [:head
    [:meta {:charset &amp;quot;utf-8&amp;quot;}]
    [:script {:src &amp;quot;index.js&amp;quot;}]
    bootstrap-4]
   [:body
    [:div.container
     (p &amp;quot;red&amp;quot; &amp;quot;hello world&amp;quot;)
     (p &amp;quot;blue&amp;quot; &amp;quot;goodnight moon&amp;quot;)
     [:button.btn.btn-primary {:onclick &amp;quot;doSomething()&amp;quot;} &amp;quot;click me&amp;quot;]]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom. Now you&apos;re all set to make a sweet landing page for your new
product/consulting business/dog. I&apos;ll let you finish that on your own, but you
can take a look at the code for &lt;a href=&quot;https://github.com/jacobobryant/clj-landing-page-example&quot;&gt;my startup&apos;s landing
page&lt;/a&gt; for inspiration
(yes, this whole document is just an advertisement). You can put
the &lt;code&gt;public&lt;/code&gt; directory on any static website host. I use Firebase, but Github
Pages and Netlify are other popular options.&lt;/p&gt;
&lt;p&gt;You can also see &lt;a href=&quot;https://github.com/jacobobryant/site&quot;&gt;the source for this website&lt;/a&gt;
for an example of creating a blog with Clojure.&lt;/p&gt;
&lt;h3&gt;The road ahead&lt;/h3&gt;
&lt;p&gt;I&apos;ll write more in the future, but next you should learn about Clojurescript and
Reagent. (Re-frame is also common, but don&apos;t worry about that for now). Reagent
is a wrapper over React that lets you use the same syntax for HTML and CSS that
we&apos;ve used here.&lt;/p&gt;
&lt;p&gt;After that, it&apos;ll be time to get into backend development. I&apos;ll write about
simple ways to get started with that, and I&apos;ll cover getting started with
&lt;a href=&quot;https://www.datomic.com&quot;&gt;Datomic&lt;/a&gt; as well, a database that embraces functional
programming concepts (made by the creators of Clojure).&lt;/p&gt;
&lt;p&gt;I&apos;ll also give some tips for using the available Clojure tooling. For one thing,
you should install the parinfer plugin for Atom (&lt;code&gt;apm install parinfer&lt;/code&gt;). With
parinfer, you don&apos;t need to type any closing parentheses. Just indent your code
properly, and parinfer will infer the parentheses for you.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] I don&apos;t actually use Atom myself, but I recommend it here because it&apos;s a
mouse-friendly editor that has working autoindent for Clojure out of the box.&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://github.com/jacobobryant/trident&quot;&gt;trident/staticweb&lt;/a&gt;
is a simple library I&apos;ve made that wraps
&lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt; and
&lt;a href=&quot;https://github.com/noprompt/garden&quot;&gt;Garden&lt;/a&gt;, allowing you to write inline CSS à la
&lt;a href=&quot;https://reagent-project.github.io/&quot;&gt;Reagent&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>The Rationality of Faith</title><id>https://jacobobryant.com/post/2019/faith/</id><link href="https://jacobobryant.com/post/2019/faith/" /><updated>2019-08-24T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;Before we decide if something is true or not (e.g. &amp;quot;is there a God?&amp;quot;), we need
to have some kind of process for deciding. So what is that process? I&apos;ll quote
Steven Pinker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, science... looks more like Bayesian reasoning.... A theory is
granted a prior degree of credence, based on its consistency with everything
else we know. That level of credence is then incremented or decremented
according to how likely an empirical observation would be if the theory is
true, compared with how likely it would be if the theory is false.[1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You could visualize Bayesian reasoning by imagining a set of balance scales. As
an example, say the left side represents the theory &amp;quot;it rained recently&amp;quot; while
the right side represents &amp;quot;it didn&apos;t rain recently.&amp;quot; The scale&apos;s initial
weighting represents our prior degree of credence: if we&apos;re in Utah, then the
right side of the scale would be weighted quite heavily, but it would be
weighted less heavily if we&apos;re in Malaysia.&lt;/p&gt;
&lt;p&gt;Now suppose we make an observation: the sidewalk is wet. If it rained recently,
than this would be an incredibly likely observation to make. The observation
would be less likely if it didn&apos;t rain recently. So, we&apos;ll add some weight to
the left side of the scale.&lt;/p&gt;
&lt;p&gt;But how much weight do we add? It depends on two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How plausible are other explanations for the sidewalk being wet?&lt;/li&gt;
&lt;li&gt;Based on our prior knowledge, how rare or common do we think rain is?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Utah, sprinklers are a great explanation for wet sidewalks. In addition,
rain is pretty rare. So I would put only a little extra weight on the left side
of the scale—the right side would still be weighted more heavily, because even
given that the sidewalk is wet, I still think it&apos;s more likely that it didn&apos;t
rain recently.&lt;/p&gt;
&lt;p&gt;Things would be different in Malaysia. I never saw a sprinkler while I lived
there, and it rains pretty much every day. I would put a lot of weight on the
left side of the scale, definitely enough that it would outweigh the right side.&lt;/p&gt;
&lt;p&gt;This is the same way I think about the existence of God. My prior knowledge
consists of all the secular evidence for or against the existence of God (or at
least, the portion of that evidence that I&apos;ve come across). By &amp;quot;secular
evidence,&amp;quot; I mean roughly anything that might be permissible in an academic
journal. This includes historical information, analyses of the textual content
of scriptures, evidence about evolution, etc.&lt;/p&gt;
&lt;p&gt;Besides secular evidence, I have the evidence of personal experiences. Although
these experiences are hard to replicate and thus can&apos;t be published in a journal,
they&apos;re still empirical and thus should be considered. There are many
written accounts of what these experiences sometimes feel like. Luke 24:32:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... Did not our heart burn within us, while he talked with us by the way, and
while he opened to us the scriptures?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Joseph Smith—History 1:11-12:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11. ... I was one day reading the Epistle of James, first chapter and fifth verse....&lt;/p&gt;
&lt;p&gt;12. Never did any passage of scripture come with more power to the heart of
man than this did at this time to mine. It seemed to enter with great
force into every feeling of my heart. I reflected on it again and again....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Russell M. Nelson, describing an experience performing surgery:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In preparing for that fateful day, I prayed over and over again, but still
did not know what to do for his leaking tricuspid valve. Even as the
operation commenced, my assistant asked, &amp;quot;What are you going to do for that?&amp;quot;&lt;/p&gt;
&lt;p&gt;I said, &amp;quot;I do not know.&amp;quot;&lt;/p&gt;
&lt;p&gt;We began the operation. ... We found [the valve] to be intact but so badly
dilated that it could no longer function as it should. While examining this
valve, a message was distinctly impressed upon my mind: Reduce the
circumference of the ring. ...&lt;/p&gt;
&lt;p&gt;But how? ... Then a picture came vividly to my mind, showing how stitches
could be placed... to accomplish the desired objective. I still remember that
mental image—complete with dotted lines where sutures should be placed. The
repair was completed as diagrammed in my mind. We tested the valve and found
the leak to be reduced remarkably. [2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Doctrine and Covenants 6:22-23:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;22. ... cast your mind upon the night that you cried unto me in your heart, that
you might know concerning the truth of these things.&lt;/p&gt;
&lt;p&gt;23. Did I not speak peace to your mind concerning the matter? What greater
witness can you have than from God?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are both natural and supernatural explanations for these observations.
They could be direct communication from God, or they could be the result of
ordinary biological processes (i.e. &amp;quot;it&apos;s all in your head&amp;quot;). Each person who
has such an experience has to estimate what the likelihood of that experience
occurring would be if God exists and what the likelihood would be if God
doesn&apos;t exist.&lt;/p&gt;
&lt;p&gt;So, let&apos;s say Alice has had one or more of these personal experiences, and
she&apos;s convinced that they would be very likely to happen if God exists and very
unlikely to happen if God didn&apos;t exist. So does that mean, if she uses Bayesian
reasoning, that she believes God exists? &lt;em&gt;Not necessarily.&lt;/em&gt; It depends on her
prior knowledge.&lt;/p&gt;
&lt;p&gt;Let me illustrate with another example from Bayesian statistics. This example is
so commonly used that I&apos;ll just quote it from the first source that came up on
Google:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose that you are worried that you might have a rare disease. You decide to
get tested, and suppose that the testing methods for this disease are correct
99 percent of the time (in other words, if you have the disease, it shows that
you do with 99 percent probability, and if you don&apos;t have the disease, it shows
that you do not with 99 percent probability). Suppose this disease is actually
quite rare, occurring randomly in the general population in only one of every
10,000 people.&lt;/p&gt;
&lt;p&gt;If your test results come back positive, what are your chances that you
actually have the disease?&lt;/p&gt;
&lt;p&gt;Do you think it is approximately: (a) .99, (b) .90, (c) .10, or (d) .01?&lt;/p&gt;
&lt;p&gt;Surprisingly, the answer is (d), less than 1 percent chance that you have the
disease!&lt;/p&gt;
&lt;p&gt;... The basic reason we get such a surprising result is because the disease
is so rare that the number of false positives greatly outnumbers the people
who truly have the disease. [3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this example, our prior knowledge is that only 1 in 10,000 people has the
disease. The observation at hand is that our test came up positive. In other
words, our current observation says that there&apos;s a 99% chance we have the
disease, but our prior knowledge says there&apos;s a &lt;em&gt;99.99% chance&lt;/em&gt; we &lt;em&gt;don&apos;t&lt;/em&gt; have
the disease. The test results are overpowered by the strength of our prior
knowledge. On the other hand, if 50% of the general population had this
disease, then a positive test result would be strong evidence that we have the
disease.&lt;/p&gt;
&lt;p&gt;Back to Alice. Her personal experiences are like the medical test. They may be
quite strong, but they could still be overpowered by her prior knowledge. If
she finds the secular evidence to be quite in favor of God not existing, her
personal experiences may not be enough to sway her mind—and this is perfectly
rational.&lt;/p&gt;
&lt;p&gt;So, if you&apos;re like Alice and you&apos;re trying to decide if you still believe in
God or not, trying to seek stronger personal evidence may be a dead end.
Instead, you may be better off investigating the secular evidence more deeply.
You might find that it&apos;s less biased than you first assumed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Faith&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The previous section covers &lt;em&gt;methodology&lt;/em&gt;. What I&apos;ve tried to explain is that
even in the context of spiritual matters, I attempt to use standard Bayesian
reasoning—a rational methodology. So what is faith, and where does it come
in?&lt;/p&gt;
&lt;p&gt;First, we should be clear that faith is a complex subject, and the scriptures
use the term in multiple ways.[4] But in the context of deciding whether or not
we believe in God at all, I think of faith as &lt;em&gt;rational thinking in the face of
uncertainty,&lt;/em&gt; or in other words, a willingness to accept risk.&lt;/p&gt;
&lt;p&gt;Humans are often risk-averse and afraid of uncertainty. However, if you make
only choices that seem low-risk, you&apos;re likely to end up with a suboptimal
outcome in the long-run. For many, choosing to marry someone is a decision that
comes inseparably bundled with a high amount of uncertainty and risk—but that
doesn&apos;t imply the right choice is to simply not get married. You have to learn
to act rationally despite the uncertainty.&lt;/p&gt;
&lt;p&gt;It&apos;s the same with faith. Let&apos;s consider Bob, the inverse of Alice. His prior
knowledge is such that he&apos;s willing to consider the existence of God, although
alone it probably isn&apos;t enough to make him confident that God does in fact
exist. Since he hasn&apos;t had any personal/spiritual experiences yet, his best bet
would be to try validating some claims about how to have these experiences. For
example, Moroni 10:4:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And when ye shall receive these things, I would exhort you that ye would ask
God, the Eternal Father, in the name of Christ, if these things are not true;
and if ye shall ask with a sincere heart, with real intent, having faith in
Christ, he will manifest the truth of it unto you, by the power of the Holy
Ghost.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And John 7:17:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If any man will do his will, he shall know of the doctrine, whether it be
of God, or whether I speak of myself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both these claims state that spiritual experiences have prerequisites; they
don&apos;t just happen. The claims can&apos;t be tested without fulfilling the
prerequisites, and often those prerequisites can&apos;t be fulfilled without
significant personal sacrifice. If Bob has an irrational fear of
uncertainty—or in other words, a lack of faith—he would probably be unwilling
to try testing the claims at all. Even if God does exist, Bob might never know
it.&lt;/p&gt;
&lt;p&gt;Let&apos;s say Bob does test the claims, and he has some spiritual experiences. The
evidence may be strong enough that, rationally, Bob should presume God exists
and thus live his life accordingly. But even with these spiritual experiences,
Bob probably won&apos;t be 100% confident. If Bob lacks faith, being less than 100%
confident might make him too uncomfortable. He might then irrationally decide
to ignore the evidence and continue with the assumption that God doesn&apos;t exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Faith and reason&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many people believe that faith and reason are separate. Interestingly, both
believers and nonbelievers hold this position. Of course, they have different
implications. The nonbelievers who hold this position think that because faith
and reason are separate, you should throw faith out. The believers who hold
this position think you should instead compartmentalize faith and
reason—reason should be used in science, and faith should be used in religion.&lt;/p&gt;
&lt;p&gt;I think both these positions are off, though. Faith and reason, in their purest
forms, are the same thing. The same method of epistemology can, and should, be
used in both science and religion. We don&apos;t have to disagree about methodology.&lt;/p&gt;
&lt;p&gt;Importantly, Alice and Bob could end up with different conclusions, even if
they both use the same methodology. They&apos;ve been exposed to different subsets
of the available secular evidence, and of course they&apos;ve had different
personal experiences. But let&apos;s recognize that &lt;em&gt;that&apos;s&lt;/em&gt; why they
disagree—different sets of evidence and different interpretations of it, not
irrationality or faithlessness.&lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;em&gt;Enlightenment Now&lt;/em&gt; by Steven Pinker&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://www.churchofjesuschrist.org/study/general-conference/2003/04/sweet-power-of-prayer&quot;&gt;https://www.churchofjesuschrist.org/study/general-conference/2003/04/sweet-power-of-prayer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Su, Francis E., et al. &amp;quot;Medical Tests and Bayes&apos; Theorem.&amp;quot; Math Fun Facts. &lt;a href=&quot;http://www.math.hmc.edu/funfacts&quot;&gt;http://www.math.hmc.edu/funfacts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&quot;https://rsc.byu.edu/es/archived/volume-13-number-2-2012/faith-holy-embrace&quot;&gt;https://rsc.byu.edu/es/archived/volume-13-number-2-2012/faith-holy-embrace&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Growing a Framework, or, Clojure Made Easy</title><id>https://jacobobryant.com/post/2019/grow/</id><link href="https://jacobobryant.com/post/2019/grow/" /><updated>2019-06-11T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&lt;em&gt;Note: I wrote this with a Clojure audience in mind, but I think it applies
more generally. It uses the terms &amp;quot;simple&amp;quot; and &amp;quot;easy&amp;quot;
&lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy/#presentationNotes&quot;&gt;as defined by Rich Hickey&lt;/a&gt;
(see &amp;quot;Key Takeaways&amp;quot; in that link). Also, &amp;quot;complect&amp;quot; means &amp;quot;make more complex&amp;quot;
or &amp;quot;intertwine,&amp;quot; i.e. to combine multiple things that should be separate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We all know that the Clojure community prefers libraries over frameworks.[1] The
difference between a library and a framework isn&apos;t well-defined, but I think of
it this way: a framework is just a library with a much larger scope than the
average library. This has several implications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Frameworks have an inversion-of-control feeling: instead of plugging a bunch
of libraries into your code, you plug your code into the framework. (Some
people give this as the defining quality of a framework, but I think it&apos;s
just a side effect).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Frameworks are more likely to need modification to handle your particular
use case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter point is why we don&apos;t like frameworks. The effort required to patch a
framework to accommodate the functionality you want is often higher than the
effort to put all the libraries together yourself. The downside is that now you
have to put all the libraries together yourself, which can be tedious.&lt;/p&gt;
&lt;p&gt;What&apos;s really going on here is that frameworks are more likely to be complected.
You could think of a library as a single, decomplected building block (&amp;quot;do one
thing and do it well&amp;quot;). Frameworks attempt to do the work of putting the
building blocks together in a reusable way, which is a good thing! We need that
if we&apos;re going to keep building higher-level abstractions. But in the process,
frameworks often complect the building blocks, making it unnecessarily difficult
to build on top of them.&lt;/p&gt;
&lt;p&gt;There can be a danger of dismissing efforts to assemble building blocks
altogether because &amp;quot;that feels like a framework, and frameworks are bad.&amp;quot; But
frameworks aren&apos;t inherently bad. For emphasis, let me restate this another
way. Simplifying is the process of breaking complex things into building blocks
which can then be put together in many different ways. &amp;quot;Easifying&amp;quot; is just the
next step: once you have the right building blocks, you make bigger building
blocks out of them. Libraries are simple, frameworks are easy. Frameworks can
be good if they&apos;re both simple and easy.[2]&lt;/p&gt;
&lt;p&gt;So how do you make big building blocks that stay simple? For a general treatment
of this question, I&apos;d highly recommend the classic &lt;a href=&quot;https://www.cs.virginia.edu/~evans/cs655/readings/steele.pdf&quot;&gt;Growing a
Language&lt;/a&gt; which I
just reread.[3] In this particular situation, my answer is &amp;quot;I&apos;m not sure, but I
have a few ideas currently and I&apos;m going to keep thinking about it as I go.&amp;quot; My
&amp;quot;few ideas currently&amp;quot; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Library-driven development.&amp;quot; I think it&apos;s good to have a library where you
can conveniently move code to as you&apos;re working on applications. That&apos;s what
&lt;a href=&quot;https://github.com/jacobobryant/trident&quot;&gt;Trident&lt;/a&gt; is for me. I try to move
as much non-application-specific code as I can into Trident. Even if some of
the code never gets used outside the application I originally wrote it for, 1)
it&apos;s hard to know which code will and won&apos;t be useful later, 2) it makes
my applications much more layered, with the top layers—the ones that are
actually in the application&apos;s project—much easier to hold in your head.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of little libraries. I keep Trident&apos;s code not just in one git repo but
also in a single &lt;code&gt;src&lt;/code&gt; directory. I then define in a config file how the code
should be split up into artifacts. The result is that it&apos;s extremely
convenient for me to split the code up into little libraries/artifacts that
can be used independently. The libraries are mostly divided based on their
external dependencies, so you should hopefully be able to use whatever slice
of Trident you want without taking in a bunch of irrelevant dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve real problems, not hypothetical ones. I&apos;m not going out of my way to
try to solve a bunch of problems for other people in advance. I&apos;m just trying
to make sure that the solutions I create for problems I have can be reused. No
one should have to solve a problem that I&apos;ve already solved. Part of that
includes writing good documentation, which I&apos;ve attempted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&apos;s a fourth point which needs more explaining first. Think of an artifact
as a DAG of its dependencies. And I mean &amp;quot;artifact&amp;quot; in an abstract sense; not
only jars but also individual functions. Imagine an artifact A that has
dependencies on B, C, D and E:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  A
 / \
B   C
 \ / \
  D   E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now suppose you want only a slice of A&apos;s functionality. If everything you want
is contained in C, D and E, the problem is easy: just use C.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  C
 / \
D   E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if you do want A, but you just want to tweak some of the functionality
in a lower artifact, like D or E? The author of A needs to somehow write their
code in a way so that the lower layers can be modified. It&apos;s a hard problem
since you often have a lot of dependencies and it&apos;s hard to know ahead of time
in what ways they&apos;ll need to be modified.&lt;/p&gt;
&lt;p&gt;Armin Ronacher wrote a great article related to this problem called &lt;a href=&quot;http://lucumr.pocoo.org/2013/2/13/moar-classes/&quot;&gt;&amp;quot;Start
Writing More Classes&amp;quot;&lt;/a&gt;. Of
particular importance is this footnote at the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Something else I want to mention: what&apos;s written above will most likely result
in some sort of warmed up discussion in regards to object oriented programming
versus something else. Or inheritance versus strategies. Or virtual methods
versus method passing. Or whatever else hackernews finds worthy of a discussion
this time around.&lt;/p&gt;
&lt;p&gt;All of that is entirely irrelevant to the point I&apos;m making which is that
monolithic pieces of code are a bad idea. And our solution to monolithic code in
Python are classes. If your hammer of choice is Haskell then use whatever the
equivalent in Haskell looks like. Just don&apos;t force me to fork your library
because you decided a layered API is not something you want to expose to your
user.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So this is my fourth point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figure out the best ways to use Clojure&apos;s language constructs to provide
layered APIs. For example, although I know &lt;em&gt;how&lt;/em&gt; to use types and protocols,
I don&apos;t yet grok &lt;em&gt;when&lt;/em&gt; to introduce my own. I&apos;m planning to keep thinking
about things like this as I go.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that&apos;s my philosophy. Hope you liked it!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=20164657&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/Clojure/comments/bzrkay/growing_a_framework_or_clojure_made_easy/&quot;&gt;Reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Here&apos;s an explanation of why from &lt;a href=&quot;http://lucumr.pocoo.org/2010/6/14/opening-the-flask/#why-create-your-own-framework&quot;&gt;outside
Clojureland&lt;/a&gt;,
and there&apos;s also &lt;a href=&quot;https://clojureverse.org/t/clojure-libs-frameworks-tooling-for-rapid-web-development/4017/5&quot;&gt;this
message&lt;/a&gt;
by Sean Corfield. I want to be clear that I agree with these arguments; I&apos;m just
attempting to bring the discussion a little deeper.&lt;/p&gt;
&lt;p&gt;[2] Although we probably wouldn&apos;t call them &amp;quot;frameworks&amp;quot; then, in the same way
that AI stops being called AI once it actually works.&lt;/p&gt;
&lt;p&gt;Also, I&apos;m reminded of &lt;a href=&quot;https://blog.appcanary.com/2017/hard-isnt-simple-ruby-clojure.html&quot;&gt;this blog
post&lt;/a&gt;. I
think the author hit on some good points, although I don&apos;t agree with all his
conclusions, like this one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In practice, ‘Simple Made Easy’ is an elaborate excuse for making software
that is hard to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You have to make things simple before you make things easy, and a lot of work
in Clojure has gone towards making things simple. If less work has gone into
making things easy, I think a more likely explanation is that people don&apos;t have
infinite time, and they&apos;ve tried to spend the time they do have on the most
important things.&lt;/p&gt;
&lt;p&gt;However, we can&apos;t forget that making things easy is an important next step,
which is the point I&apos;m trying to make.&lt;/p&gt;
&lt;p&gt;[3] I&apos;m fascinated that this problem seems to repeat itself.&lt;/p&gt;
</content></entry><entry><title>Building a CRUD app with Datomic Cloud Ions</title><id>https://jacobobryant.com/post/2019/ion/</id><link href="https://jacobobryant.com/post/2019/ion/" /><updated>2019-05-09T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&lt;em&gt;Update: published &lt;a href=&quot;https://github.com/jacobobryant/flexbudget&quot;&gt;source code&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I just released &lt;a href=&quot;https://notjust.us&quot;&gt;FlexBudget&lt;/a&gt;, the website version of a
script I wrote several months ago to handle our budgeting needs.[1]
I built it using &lt;a href=&quot;https://docs.datomic.com/cloud/ions/ions.html&quot;&gt;Datomic Cloud
ions&lt;/a&gt;. I started using Datomic
On-Prem sometime last year, but this was my first time using Datomic Cloud (let
alone ions).[2]&lt;/p&gt;
&lt;p&gt;I think Clojure + Datomic opens the doors for some great innovations in web
application architecture (e.g. the ideas discussed in &lt;a href=&quot;https://tonsky.me/blog/the-web-after-tomorrow/&quot;&gt;this
classic&lt;/a&gt;), not to mention that
Datomic alone has spoiled me and I don&apos;t know if I could ever go back to SQL
now. But even with ions, I think there&apos;s still a lot of work left to be done on
Clojure&apos;s web dev story. What follows is a description of my experience in
setting up FlexBudget.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This post assumes you are already familiar with Clojure and Datomic.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I ended up using a mono-Lambda that forwarded all
requests to the same ion, then that ion used Compojure to route the request to
the appropriate handler. For local development, I just ran a local web server
with that handler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def handler&apos;
  (-&amp;gt; routes
      ; various middleware
      wrap-catchall))

(def handler (ionize handler&apos;))

(defn start-immutant []
  (imm/run handler&apos; {:port 8080}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I started out using Aleph, but I was getting a weird bug where it wasn&apos;t
passing requests to my handler. I&apos;m not sure what was going on there, but
things started working again when I used Immutant. I also tried Jetty, but it
had dependency conflicts with Datomic Cloud.)&lt;/p&gt;
&lt;p&gt;This worked great for my little project, though maybe in the future I&apos;ll need
to stop using a mono-Lambda.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;transaction-functions&quot;&gt;&lt;strong&gt;Transaction Functions&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This was more complicated. To use a custom transaction function, it has to be
deployed. You can&apos;t tell the transactor (which runs in the cloud) to somehow
use a local transaction function that&apos;s only defined on your laptop. The
&lt;a href=&quot;https://docs.datomic.com/cloud/operation/planning.html#transaction-functions&quot;&gt;official
advice&lt;/a&gt;
is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Transaction functions are pure functions, so you do not need to deploy them
anywhere for testing. You can simply invoke them as ordinary code in your REPL
or test suite.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think that leaves a little to be desired, though. I also want to actually use
my website while I&apos;m developing it. I need my site, running on localhost, to be
able to send requests to my ions, also running on localhost, and then have those ions
run transaction functions that are only defined on my laptop (i.e. haven&apos;t been
deployed yet).&lt;/p&gt;
&lt;p&gt;So, I wrote a function &lt;code&gt;eval-tx-fns&lt;/code&gt; which takes a transaction function and
applies it locally. Then the &amp;quot;plain&amp;quot; transaction can be sent to the transactor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def transact (if (:local-tx-fns? config)
                (let [lock (Object.)]
                  (fn [conn arg-map]
                    (locking lock
                      (-&amp;gt;&amp;gt; #(u/eval-tx-fns (d/with-db conn) %)
                           (update arg-map :tx-data)
                           (d/transact conn)))))
                d/transact))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Out of laziness, I created this &lt;code&gt;transact&lt;/code&gt; function and used that whenever I
needed to transact something. I also had to write a similar replacement function
for &lt;code&gt;with&lt;/code&gt;. It would probably be cleaner to create my own implementation of the
Datomic client protocol as is done
&lt;a href=&quot;https://github.com/ComputeSoftware/datomic-client-memdb/blob/master/src/compute/datomic_client_memdb/core.clj#L90&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;locking&lt;/code&gt; call is used to make sure that transactions stay serialized. This
works only because during dev, all transactions to the dev database I&apos;m using go
through a single machine (my laptop). And being a single developer using the
Solo topology, that&apos;s fine. However, it could be an issue for a
production system with &lt;a href=&quot;https://docs.datomic.com/cloud/operation/planning.html#stages&quot;&gt;query groups for different stages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The staging query group can only use transaction functions that have been deployed
to the primary group. If we update a transaction function and want staging to
run the updated version before it gets deployed to the primary group, we&apos;ll have
to apply the transaction locally in the manner I just described. If the staging
query group is limited to one instance, then we can keep the transactions
serialized by using &lt;code&gt;locking&lt;/code&gt; as we did before. Otherwise, we&apos;d have to add some
kind of external lock to ensure that only one instance is executing transaction
functions at a time.&lt;/p&gt;
&lt;p&gt;This strategy may lower transaction throughput, but that&apos;s probably acceptable
for dev stages. An alternate solution would be running a separate production
topology for each stage, but I&apos;m guessing that would be more expensive.[3]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wrote &lt;a href=&quot;https://gist.github.com/jacobobryant/9c13f4cd692ff69d8f87b0d872aeb64e&quot;&gt;this Planck
script&lt;/a&gt;
in order to automate the steps of &amp;quot;push, deploy, run the deploy status command
until it succeeds or fails&amp;quot;.&lt;/p&gt;
&lt;p&gt;I had some troubles with my deploys failing, even after I resolved dependency
conflicts and tested locally. The problem was always that I had some piece of
initialization code that started running as soon as the code was loaded. This caused
the deploy to hang and timeout. (Specifically, the &lt;code&gt;ValidateService&lt;/code&gt; step would
hang, like in &lt;a href=&quot;https://forum.datomic.com/t/ion-deployment-failure/683&quot;&gt;this
question&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For example, you shouldn&apos;t load configuration with &lt;code&gt;datomic.ion/get-params&lt;/code&gt;
until a request comes in. You can memoize the retrieval like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def get-params
  (memoize
    (fn [env]
      (-&amp;gt; {:path (str &amp;quot;/datomic-shared/&amp;quot; env &amp;quot;/bud/&amp;quot;)}
          ion/get-params keywordize-keys))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then &lt;em&gt;don&apos;t call it until you have to&lt;/em&gt;. I used Firebase for authentication,
and it requires some initialization code that fetched a secret from
&lt;code&gt;get-params&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(let [options ...] ; includes a call to get-params
  (FirebaseApp/initializeApp options))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of my deployment failures was happening because I had the Firebase init code
running immediately. Deployment worked again after I wrapped it in an
&lt;code&gt;init-firebase!&lt;/code&gt; function which I then called only when verifying tokens:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn verify-token [token]
  (when (= 0 (count (FirebaseApp/getApps)))
    (init-firebase!))
  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also wrapped my calls to &lt;code&gt;d/client&lt;/code&gt; and &lt;code&gt;d/conn&lt;/code&gt; in memoized functions like in the
&lt;a href=&quot;https://github.com/Datomic/ion-starter/blob/master/src/datomic/ion/starter.clj#L13&quot;&gt;ion starter
project&lt;/a&gt;,
but I found that they didn&apos;t get redefined when I ran
&lt;code&gt;clojure.tools.namespace.repl/refresh&lt;/code&gt;. So I instead defined them as mount
states:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(mount.core/defstate client :start
  (d/client (:client-cfg config)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then I added some ring middleware to start mount on the first request:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn wrap-start-mount [handler]
  (fn [req]
    (when (contains? #{mount.core.NotStartedState
                       mount.core.DerefableState}
                     (type client))
      (mount.core/start))
    (handler req)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Interlude&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Throw in some logs with &lt;code&gt;datomic.ion.cast&lt;/code&gt; and that about covers my experiences
directly with Datomic Cloud ions. It took a while to figure things out, but I&apos;m
happy with it now, even though the transaction function thing seems a little hacky
(I&apos;m not sure what else to do about that).&lt;/p&gt;
&lt;p&gt;The rest of this post is about the way I set up the frontend/backend
interaction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DataScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently wrote a &lt;a href=&quot;https://github.com/jacobobryant/clue&quot;&gt;Clue web app&lt;/a&gt; that
used a single atom for storing frontend state (with Datomic on the backend).
Board games tend to have complicated data models, and I definitely felt the
impedance mismatch pains of having to project my Datomic data onto a
hierarchical atom. So with this project (even though the data model here is much
simpler right now), I definitely wanted to use DataScript.&lt;/p&gt;
&lt;p&gt;After the user logs in, the frontend hits an &lt;code&gt;/init&lt;/code&gt; endpoint which returns
their datoms:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn datoms-for [db uid]
  (let [user-eid (:db/id (d/pull db [:db/id] [:user/uid uid]))]
    (-&amp;gt;&amp;gt;
      (conj
        (vec (d/q &apos;[:find ?e ?attr ?v :in $ ?user :where
                    [?ent :auth/owner ?user]
                    (or
                      [(identity ?ent) ?e]
                      [?ent :entry/asset ?e])
                    [?e ?a ?v]
                    [?a :db/ident ?attr]]
                  db user-eid))
        [user-eid :user/uid uid])
      (u/stringify-eids ds-schema))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically, &lt;code&gt;datoms-for&lt;/code&gt; looks for values of &lt;code&gt;:auth/owner&lt;/code&gt; that correspond to the
current user. I&apos;m not using any DB filters, but a better approach might be to do
that and then allow the frontend to send an arbitrary query.&lt;/p&gt;
&lt;p&gt;The datoms also go through a &lt;code&gt;stringify-eids&lt;/code&gt; function that I
wrote. This function takes e.g. &lt;code&gt;[[1 :foo 2] [3 :some/ref 1]]&lt;/code&gt; and turns
it into &lt;code&gt;[[&amp;quot;1&amp;quot; :foo 2] [&amp;quot;3&amp;quot; :some/ref &amp;quot;1&amp;quot;]]&lt;/code&gt;. That way, DataScript will treat
the entity IDs as temporary, and new IDs will be assigned. This is important
because Datomic entity IDs can be larger than JavaScript&apos;s
&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;. So instead of using Datomic&apos;s entity IDs on the
frontend, I let DataScript assign its own IDs and then maintain a mapping
between DataScript&apos;s IDs and Datomic&apos;s IDs (which are stored on the frontend as
strings).&lt;/p&gt;
&lt;p&gt;To be exact, they&apos;re actually stored as tagged literals, e.g. &lt;code&gt;#eid &amp;quot;123456789&amp;quot;&lt;/code&gt;. I&apos;ll get to this later, but this allows the frontend to send a
transaction like &lt;code&gt;[[#eid &amp;quot;12345789&amp;quot; :bar &amp;quot;hello&amp;quot;]]&lt;/code&gt; to the backend, and then I
simply include an entry for &lt;code&gt;eid&lt;/code&gt; in my &lt;code&gt;data_readers.clj&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I&apos;m also passing a &lt;code&gt;ds-schema&lt;/code&gt; (&amp;quot;DataScript schema&amp;quot;) argument to
&lt;code&gt;stringify-eids&lt;/code&gt;. This comes from a library that I share between the frontend
and backend:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def schema
  {:user/uid [:db.type/string :db.unique/identity]
   :user/email [:db.type/string :db.unique/identity]
   :auth/owner [:db.type/ref]
   :entry/date [:db.type/instant]
   :entry/draft [:db.type/boolean]
   ; etc
   ]})

(def datomic-schema (u/datomic-schema schema))
(def ds-schema (u/datascript-schema schema))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Materialized views&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve never actually used re-frame much. Although I&apos;m using DataScript instead of
a normal atom for storing frontend state, there is
&lt;a href=&quot;https://github.com/denistakeda/re-posh&quot;&gt;re-posh&lt;/a&gt; which combines re-frame with
&lt;a href=&quot;https://github.com/mpdairy/posh&quot;&gt;Posh&lt;/a&gt;, a library that lets you define reactive
DataScript queries. I&apos;ve used Posh a little bit, but&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It breaks on some &lt;a href=&quot;https://github.com/mpdairy/posh/issues/26&quot;&gt;edge cases&lt;/a&gt;,
including a case that I ran into myself.&lt;/li&gt;
&lt;li&gt;You can&apos;t use &lt;code&gt;pull&lt;/code&gt; inside of queries.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So instead I wrote a macro &lt;code&gt;defq&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defq entries
  (-&amp;gt;&amp;gt; @conn
       (d/q &apos;[:find [(pull ?e [*]) ...] :where
              (or [?e :entry/draft]
                  [?e :entry/date])])))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;defq&lt;/code&gt; takes some arbitrary code and stores it in a function. It creates a
reactive atom (&lt;code&gt;entries&lt;/code&gt; in this case) and populates it with the results of the
function. Whenever I run a transaction, the function is ran again (and the atom
is repopulated with the results).&lt;/p&gt;
&lt;p&gt;Obviously this won&apos;t be fast when you have lots of queries, but it&apos;s good enough
for now. I&apos;ll revisit it later.&lt;/p&gt;
&lt;p&gt;Besides &lt;code&gt;defq&lt;/code&gt;, I&apos;ve found that using plain old &lt;code&gt;reagent.ratom/reaction&lt;/code&gt; is nice
and succinct:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def entry (reaction (last @entries)))
(def draft? (reaction (:entry/draft @entry)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I store all of these in a single namespace, so I can reference them
from my Reagent views with e.g. &lt;code&gt;@db/entries&lt;/code&gt; or &lt;code&gt;@db/draft?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;ve been mainly using &lt;a href=&quot;https://re-com.day8.com.au/#/introduction&quot;&gt;re-com&lt;/a&gt; and
it&apos;s really nice. I had two minor annoyances though. First, all of the parameters
are defined with map destructuring. This means that when you use container
elements, you have to write &lt;code&gt;[rc/h-box :children [foo bar baz]]&lt;/code&gt; instead of
just &lt;code&gt;[rc/h-box foo bar baz]&lt;/code&gt;. Containers are used pretty often and having all
these &lt;code&gt;:children&lt;/code&gt; can add up.&lt;/p&gt;
&lt;p&gt;That&apos;s not too bad though, I simply defined my own &lt;code&gt;h-box&lt;/code&gt; and &lt;code&gt;v-box&lt;/code&gt;
components that didn&apos;t use map destructuring.&lt;/p&gt;
&lt;p&gt;The other thing I ran into was when I used the &lt;code&gt;horizontal-tabs&lt;/code&gt; component and I
wasn&apos;t able to change the colors using inline styles; I had to include a
separate css file to override the Bootstrap styles.&lt;/p&gt;
&lt;p&gt;Going forward it&apos;d be nice to have everything be fully customizable with inline
styles, so I&apos;ll need to decide if I want to keep using re-com and/or Bootstrap
and make some modifications or if I should roll my own. I&apos;ll admit that I&apos;m not
much of a UI person, but it would be nice to figure out a system that works for
me (and makes it easy for me to make websites that look nice. I guess there are
people who care about that).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transactions on the frontend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On the frontend I also defined a custom &lt;code&gt;transact!&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn transact! [persist-fn conn tx &amp;amp; queries]
  (let [tx-result (d/transact! conn tx)]
    (apply invalidate! queries)
    (go (let [tx (u/translate-eids (:schema @conn) (::eids @conn) tx)
              eids (&amp;lt;! (persist-fn tx))
              tempids (reverse-tempids tx-result eids)]
          (swap! conn update ::eids merge tempids)))
    tx-result))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does several things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It applies the transaction to the frontend database immediately. Currently I
don&apos;t have anything in place to rollback if the transaction fails on the
backend; that&apos;s part of my future work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;invalidate!&lt;/code&gt; is what updates the queries that I defined earlier with &lt;code&gt;defq&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;translate-eids&lt;/code&gt; traverses the transaction, replacing DataScript&apos;s entity IDs
with the tagged-literal Datomic IDs like I mentioned before. For example,
given a transaction of &lt;code&gt;[[:db/add 1 :foo &amp;quot;bar&amp;quot;]]&lt;/code&gt; and an entity ID mapping of &lt;code&gt;{1 #eid &amp;quot;12345&amp;quot;}&lt;/code&gt;, the return value would be &lt;code&gt;[[:db/add #eid &amp;quot;12345&amp;quot; :foo &amp;quot;bar&amp;quot;]]&lt;/code&gt;
(surprise). Unfortunately we can&apos;t do something simple with
&lt;code&gt;clojure.walk/postwalk&lt;/code&gt; like &amp;quot;if an element is a key in the entity ID map,
replace it with the value&amp;quot; because we don&apos;t know if the number is actually an
entity ID or just a number. The only way to know is to traverse the
transaction according to the
&lt;a href=&quot;https://docs.datomic.com/cloud/transactions/transaction-data-reference.html#orgb749e75&quot;&gt;grammar&lt;/a&gt;
and replace entity IDs along the way. It was a little tedious to write but
not super complicated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;persist-fn&lt;/code&gt; takes the transaction and sends it to the backend. The backend
returns the entity IDs of any newly created entities. For example, if you
transacted &lt;code&gt;[[:db/add &amp;quot;tmp-id&amp;quot; :foo &amp;quot;bar&amp;quot;]]&lt;/code&gt; and the new entity ID assigned by
Datomic was 12345, the backend (and thus &lt;code&gt;persist-fn&lt;/code&gt;)
would return &lt;code&gt;{&amp;quot;tmp-id&amp;quot; #eid &amp;quot;12345&amp;quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reverse-tempids&lt;/code&gt; will use that return value to map the entity IDs assigned
by DataScript to the ones assigned by Datomic. Continuing the
previous example, if DataScript assigned an entity ID of 4, then the return
value of &lt;code&gt;reverse-tempids&lt;/code&gt; would be &lt;code&gt;{4 #eid &amp;quot;12345&amp;quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Transactions on the backend&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is one of the nicest parts of the architecture in my opinion. I&apos;ve set
things up so that the frontend can send arbitrary transactions and the backend
will analyze them to find out if the current user is authorized to make them.
That way I didn&apos;t have to code up a new endpoint for each kind of edit the user
can make.&lt;/p&gt;
&lt;p&gt;I set up a single endpoint, &lt;code&gt;/tx&lt;/code&gt;, to receive transactions. Upon receipt, it
first makes sure the transaction doesn&apos;t include any transaction functions that
haven&apos;t been whitelisted. Then we run the transaction through a transaction
function called &lt;code&gt;authorize&lt;/code&gt;. This function speculatively runs the transaction
using &lt;code&gt;d/with&lt;/code&gt;. Then it analyzes the result to find out which entities were
affected.&lt;/p&gt;
&lt;p&gt;Each entity that was changed must pass an app-specific authorizer function.
Here&apos;s an example of an authorizer function; it will allow a user to create a
message entity as long as they are listed as the sender of that message:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(s/def ::message (u/ent-spec :req [:message/text :message/sender]))

(def authorizers
  {[nil ::message]
  (fn [{:keys [uid eid datoms db-before db-after before after]}]
    (not-empty
      (d/q &apos;[:find ?e :in $ ?e ?user :where
             [?e :message/sender ?user]]
        db-after eid [:user/uid uid])))})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&apos;ll dissect this now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ent-spec&lt;/code&gt; is basically a custom version of &lt;code&gt;s/keys&lt;/code&gt; that works with Datomic
entities. Also, keys are only allowed if they are listed in either &lt;code&gt;:req&lt;/code&gt; or
&lt;code&gt;:opt&lt;/code&gt;. the frontend can&apos;t attach an attribute to an entity unless we give
them explicit permission to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The keys in &lt;code&gt;authorizers&lt;/code&gt; are a pair of specs. The first spec defines what
type the entity had before running the transaction, and the second spec
defines what type it had after. I call this the entity&apos;s &amp;quot;signature.&amp;quot; &lt;code&gt;nil&lt;/code&gt;
means that the entity didn&apos;t exist. So in this case, we&apos;re saying that this
function only applies to newly created &lt;code&gt;::message&lt;/code&gt; entities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each entity in the transaction, &lt;code&gt;authorize&lt;/code&gt; will look for an authorizer
function that has a matching signature. If it finds one, it&apos;ll pass the
entity along with some other information to the function. If the function
returns truthy, then the change is authorized. If there aren&apos;t any matching
authorizer functions that return truthy, then the change is unauthorized and
&lt;code&gt;authorize&lt;/code&gt; will throw an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The authorizer function receives an argument that includes the following keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;uid&lt;/code&gt;: the ID of the authenticated user. In my case, this is an ID assigned
by Firebase Authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eid&lt;/code&gt;: an entity ID from the result of the current transaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;datoms&lt;/code&gt;: the subset of datoms added or retracted by the current transaction
that apply to &lt;code&gt;eid&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;db-before&lt;/code&gt; and &lt;code&gt;db-after&lt;/code&gt;: these are taken from the transaction result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;: these are the result of &lt;code&gt;(d/pull db &apos;[*] eid)&lt;/code&gt; with
&lt;code&gt;db-before&lt;/code&gt; and &lt;code&gt;db-after&lt;/code&gt;, respectively (or &lt;code&gt;nil&lt;/code&gt; if the entity didn&apos;t
exist).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if you provide the specs and the authorizer functions, then &lt;code&gt;authorize&lt;/code&gt; can
take care of the rest. It separates the logic of what changes are allowed from
how those changes are delivered to the backend; so for the latter we can say
&amp;quot;send them all to the same place, and send them in whatever form you want.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the key takeaways here is that the vast majority of my time was not spent
focusing on just the application logic.
Eric Normand has described the need for a &lt;a href=&quot;https://lispcast.com/clojure-needs-grow-boring-web-framework-boring-data-science/&quot;&gt;&amp;quot;boring web
framework.&amp;quot;&lt;/a&gt;
I think it&apos;s a good analysis. As far as I can tell, Clojure has had solid
adoption among &lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_adoption_life_cycle&quot;&gt;innovators and early
adopters&lt;/a&gt;. You
can do some cool things if you take the time to set it up yourself, and
this is more-or-less fine for people who already know Clojure. But if we automate this
process,
Clojure will have a much better chance at &lt;a href=&quot;https://en.wikipedia.org/wiki/Crossing_the_Chasm&quot;&gt;crossing the
chasm&lt;/a&gt; into the early
majority.[4]&lt;/p&gt;
&lt;p&gt;As I&apos;ve built FlexBudget, I&apos;ve tried to keep as many things separated into
libraries as possible. My plan is to continue this process and try to create a
web framework that allows even Clojure beginners to get up and running with a
Clojure + Datomic stack that has all these architectural components I&apos;ve
described. I&apos;m also going to add more components like realtime communications.
Especially if/when &lt;a href=&quot;https://www.reddit.com/r/Clojure/comments/b46vl1/reactive_datalog_for_datomic/&quot;&gt;reactive Datalog becomes
available&lt;/a&gt;,
I think this framework could be a great boon for web app development.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://vectorified.com/ru-ion&quot;&gt;Russian translation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] I think most approaches to budgeting, e.g. zero-sum budgeting, force you to
go into too much detail. When I&apos;m monitoring resource usage, I don&apos;t care
exactly how the resource is being used—I just want a high level &amp;quot;is it OK or
is it not OK.&amp;quot; If there&apos;s a problem, then I&apos;ll use a profiler/disk usage
analyzer/etc to dig deeper. I use FlexBudget to give me the high-level &amp;quot;is it
OK,&amp;quot; but it&apos;s not meant as a profiler.&lt;/p&gt;
&lt;p&gt;[2] Before I actually read the documentation for ions, I thought they were just
some kind of hack to let you define transaction functions in Cloud. For anyone
who doesn&apos;t already know, they&apos;re actually much more than that. They allow you
to reuse the Datomic Cloud infrastructure for deploying your application, so
you don&apos;t have to deal with setting up your own infrastructure. It&apos;s a big step
towards the Holy Grail of only having to think about your application logic.&lt;/p&gt;
&lt;p&gt;Given that, I&apos;m much more ok with the &amp;gt;= $30/month price tag of Datomic
Cloud. I used to think it was too much just for a side project that isn&apos;t
making any money, but now I&apos;m fine with it because of the time it saves me. Or
rather, the time it will save me now that I know how to use it.&lt;/p&gt;
&lt;p&gt;[3] I was about to talk about the possibility of Cognitect making it so each
query group could have its own transactor, but then I realized that would simply
reduce to running separate production topologies. So I&apos;m doubtful if there are
any possible solutions that are better than what I&apos;ve described.&lt;/p&gt;
&lt;p&gt;[4] In respect to the &amp;quot;libraries vs. frameworks&amp;quot; debate: the problem with
frameworks isn&apos;t that they do a lot for you, it&apos;s that they&apos;re hard to change
if you want something different. With enough care, we could make a
library/framework that sets up a lot of defaults for you but still allows you
to customize it however you need.&lt;/p&gt;
</content></entry><entry><title>What I'm Doing With My Life</title><id>https://jacobobryant.com/post/2019/life/</id><link href="https://jacobobryant.com/post/2019/life/" /><updated>2019-05-03T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;The subject of this post has been changing very frequently, so I thought I&apos;d
write down my thoughts in order to solidify them again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem, generally&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exponential growth is the heart of capitalism. Capital grows exponentially, but
labor (i.e. trading your time for money) gives you only linear returns. So the
way to wealth is through accumulating capital, not by laboring. Labor is just a
means to get capital.&lt;/p&gt;
&lt;p&gt;Historically, &amp;quot;capital&amp;quot; (aka the means of production) is physical, like a
factory. Money counts as physical capital because the two can be
traded easily. However, there are other kinds of capital, like intellectual
capital, also known as knowledge. You can think of relationships as social
capital. Unfortunately, money alone can&apos;t be traded for knowledge or
relationships.&lt;/p&gt;
&lt;p&gt;In an economy dominated by physical goods, money is the most important kind of
capital. But intangible goods like software and media are continually becoming
a larger fraction of the economy. The means of production for intangible goods
are knowledge and relationships—money, while still needed, is much less
important.[1]&lt;/p&gt;
&lt;p&gt;So to maximize economic output, we need to prioritize accumulating knowledge
and relationships over money. Unfortunately, society is still optimized for
accumulating physical capital. The standard path of &amp;quot;go to college, get a job&amp;quot;
is the path of a laborer. This contributes to your employer&apos;s accumulation of
capital, so they&apos;re the ones getting exponential growth. But in the long run, it
will be better for everyone if individuals start to experience the exponential
growth instead.&lt;/p&gt;
&lt;p&gt;To the extent that you are able to become a producer of intangible goods, you
should instead maximize your accumulation of knowledge and relationships. Formal
education should help with this, but it&apos;s not great because it&apos;s been optimized
for our old economy of physical goods. If you&apos;re sufficiently self-motivated,
the never-ending stream of projects, homework and exams (i.e. training for being
a laborer) just gets in the way. You could learn a lot more by just reading
books and working on your own projects—and you can develop great relationships
by being part of a community of people who do that.&lt;/p&gt;
&lt;p&gt;Also, becoming a self-motivated learner in the first place is really hard. I
think that&apos;s society&apos;s fault though. Starting at a young age, formal education
trains you to be extrinsically motivated: goals are decided for you, everything
is graded, everything has a deadline. Kids who have opportunities to do lots of
self-motivated learning will be much better off later in life as far as I can tell.&lt;/p&gt;
&lt;p&gt;In summary: to maximize your output in our increasingly intangible economy, you
need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;become self-motivated, and&lt;/li&gt;
&lt;li&gt;use your self-motivation to develop your knowledge and relationships.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The problem is that our society makes it harder instead of easier to do these things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem, specifically&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was fortunate to be introduced to programming early on. In addition, I was
homeschooled and had lots of freedom to work on things that interested me. I
think this is why I was so frustrated with college. Having a job was a lot
better—at least I got paid—but fundamentally it had the same problems.
In fact, I don&apos;t think our current society has a good place for me:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grad school:&lt;/strong&gt; you have more autonomy than undergrads, but I&apos;d still be giving
up freedom. At the very least, I&apos;d have to spend my time doing things that
qualify as &amp;quot;research,&amp;quot; which I&apos;m not interested in.&lt;/p&gt;
&lt;p&gt;Another downside of grad school is that you have to get a bachelor&apos;s degree
first. This is ok for me since I already have one, but it&apos;s a problem for those
who don&apos;t.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Startups:&lt;/strong&gt; I&apos;ve wanted to create a successful startup since I started reading
Paul Graham&apos;s essays in high school, and I do think this will be a great place
for me—but not yet. To maximize exponential growth, you need to put all your
resources into growth first and then cash out after you hit a certain point.
Think Settlers of Catan: you build cities first, then you cash out with
development cards.&lt;/p&gt;
&lt;p&gt;After you&apos;ve accumulated enough knowledge and relationships,[2] creating a
startup is a great way to cash out. But I need more development time, especially
for relationships. I do have some ideas that I think would make good startups,
but I think it&apos;s better to work on them as side projects instead of jumping into
the fast-growth/startup mindset. I think a lot of startups fail simply because
they didn&apos;t have the chance to grow organically at the beginning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open-source:&lt;/strong&gt; This actually is probably the best cultural fit for me. The
whole point of open-source is that it&apos;s self-motivated. I am planning to become
part of this community more. But long-term, I still have to make money. You
can&apos;t &lt;em&gt;just&lt;/em&gt; do open-source. And as a society, we don&apos;t have good institutions
for fostering the open-source community. It&apos;s a hard economic problem, and you
have to be careful not to undermine the intrinsic motivation that drives
open-source.&lt;/p&gt;
&lt;p&gt;Besides the money problem, it&apos;s also not like you can just go join your local
open-source institution and suddenly have all the peers and mentors you need.
It&apos;s a splintered, distributed community, and everyone else in it has to pay the
bills too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The solution, specifically&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m actually in a pretty good position now. I quit my job in January, and it&apos;ll
be a while before I have to make money again. So I have plenty of time (all day,
every day) to learn things on my own, which will hopefully lead to a nice
cash-out down the road.&lt;/p&gt;
&lt;p&gt;I am hurting for relationships, though. Even Einstein (who also liked to work
alone) had a few confidants who he met with regularly to chat about science. I&apos;m
working on cool things,[3] but I have few peers and mentors to bounce ideas off and
solicit advice from. Ultimately I also need relationships with people who could turn
into cofounders.&lt;/p&gt;
&lt;p&gt;But that being said, I do know some people, and I&apos;m working to expand my circle.
I&apos;ll probably be just fine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The solution, generally&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is what I&apos;m really interested in. The problems I&apos;ve just discussed are some
of the largest problems that I&apos;ve experienced in my life, and I think there
would be enormous benefit for society if I could solve them for others.&lt;/p&gt;
&lt;p&gt;My current plan has three steps. I call it &amp;quot;Jacob&apos;s 3-step plan:&amp;quot;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Continue maximizing my own knowledge and relationships.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Turn that startup into an organization that will help others maximize their
knowledge and relationships.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In step 1, I continue winging it until I have a project that&apos;s ready for
fast growth and I have a good cofounder(s). In the mean time, I&apos;ll also try to
make money, but not at the expense of developing knowledge and relationships. A
few possibilities are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;See if I can turn one or more of my current projects into
small-but-profitable products.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do consulting work. I mean this in the literal sense of the word: offering my
expertise for money, not simply laboring as a contractor. As I&apos;m continuing
to learn on my own, I may develop sufficient knowledge that I can actually
make money from it without laboring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could also do consulting in the slightly-less-literal sense. I wouldn&apos;t be
opposed to actually creating software for other people (instead of just
giving them advice) if 1) I know I can do it quickly, 2) I can charge a high,
fixed rate (because of my expertise).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all three of these areas, I&apos;m not quite there, but I could see myself being
there in the not-too-distant future. The nice thing is that those three
strategies are mutually reinforcing: after I make my own products, I can market
the products and myself at the same time, thus bringing in consulting clients,
etc.&lt;/p&gt;
&lt;p&gt;Honestly, I could probably be happy just doing that for the rest of my life.
However, for the sake of ambition and helping other people, I am hoping to move
to the next steps.&lt;/p&gt;
&lt;p&gt;In step 2, I&apos;ll create a startup as mentioned. But I&apos;ll create it in a way that
will prepare it for step 3. Specifically, I&apos;m planning to give programmers a
radical amount of autonomy by treating them more like independant contractors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any programmers we &amp;quot;hire&amp;quot; wouldn&apos;t be immediately assigned to a team or a
project, but instead they&apos;d be put in a pool of programmers who are available
for work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The company would post information about available work, e.g. &amp;quot;here&apos;s a
feature we want built,&amp;quot; &amp;quot;here&apos;s a problem we want solved,&amp;quot; &amp;quot;here&apos;s a list of
bugs we want fixed,&amp;quot; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmers would self-organize into teams and negotiate for available work.
Thus pay would be decided on a per-project basis, and the teams would
decide how to compensate their individual members. Programmers wouldn&apos;t
receive salaries from the company.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, employment contracts would be lenient. There would be no non-recruit
clauses, so this would be a great place to find a cofounder. Employees would
be free to take outside paid work in between projects. And there would
certainly be no clauses about the company owning any intellectual property
that the employees develop on their own time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is that programmers will be able to choose what they work on, who
they work with, how they work (norms will be established within the teams) and
how much they work (you can take however much or little time off you want in
between projects). This should attract programmers who want a high level of
autonomy.&lt;/p&gt;
&lt;p&gt;And that&apos;s the crux of the strategy: giving programmers so much autonomy might
seem to be at odds with the interests of the company; however, I think it&apos;ll
help us to attract better programmers which will more than make up for it. Like
working remotely, it wouldn&apos;t work for most companies, but it can work if you
make it part of your core strategy.&lt;/p&gt;
&lt;p&gt;Additionally, it&apos;ll prepare us for step three. After the company is established
and highly profitable, we can make the organization even better for people who
are trying to maximize their knowledge and relationships. Instead of forcing
employees to give us all their time, we can encourage them to make only as much
money as they need. Then they can have more time for their own projects.&lt;/p&gt;
&lt;p&gt;This would be the perfect environment for startups to grow organically. Y
Combinator is good if you&apos;re ready to dive in, but what if you don&apos;t have an
idea or a cofounder yet? You would come work at our company. When you&apos;re ready
for fast growth, we would give you seed funding. That&apos;s how we&apos;ll capture the
value created by giving our employees so much autonomy: we&apos;ll invest in the
startups that get created because of it. If they create startups that fit well
with our existing products, we could even buy them out early.&lt;/p&gt;
&lt;p&gt;In any case, our investments should be successful because the startup founders
come from our own internal network, so we&apos;ll know them. We&apos;ll have a better idea
of which startups are good investments, and we&apos;ll get to invest in them before
other venture capital firms do.&lt;/p&gt;
&lt;p&gt;Gradually the organization will shift from making money off our own products
towards making money from investing. We might keep products in house, or if the
investing is really going well, we could eject the products into their own
companies.&lt;/p&gt;
&lt;p&gt;Whatever happens, we would be the place to go if you&apos;re self-motivated and want
opportunities to learn as much as you can with other like-minded people. I think
we&apos;d fit in really well between Lambda School and Y Combinator. You go to Lambda
School to learn how to program. Then you go to a regular company for a couple
years to save up money and pay back Lambda School. Then you come to our company
in order to really level up your skills and develop your network. When you&apos;re
ready, you apply to Y Combinator with a solid founding team and an idea that
already has traction.&lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Especially since we have institutions that are designed to accomodate people
who have knowledge and relationships but not money: we call it venture capital.&lt;/p&gt;
&lt;p&gt;[2] I don&apos;t mean just the number of relationships, but also the depth of your
relationships.&lt;/p&gt;
&lt;p&gt;[3] This essay is about my overall goals and strategy, so I haven&apos;t gone into
the nitty-gritty of what I&apos;m actually doing—but right now I&apos;m developing a
framework that&apos;ll make it easier to create web applications on top of &lt;a href=&quot;https://www.datomic.com/&quot;&gt;Datomic
Cloud Ions&lt;/a&gt;, in the spirit of &lt;a href=&quot;https://tonsky.me/blog/the-web-after-tomorrow/&quot;&gt;The Web After
Tomorrow&lt;/a&gt;. And currently my most
promising startup idea is to make a music service like Spotify but with a
different business model and a better recommendation algorithm.&lt;/p&gt;
</content></entry><entry><title>Programmers and Musicians</title><id>https://jacobobryant.com/post/2019/practice/</id><link href="https://jacobobryant.com/post/2019/practice/" /><updated>2019-04-03T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://jacobobryant.com/post/2019/future/&quot;&gt;My last post&lt;/a&gt; was a mental dump related to creating a
work/education organization with a specific culture. This is a more
focused, clarified version of that post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Programmers don&apos;t get enough time to practice. We should be more like musicians.
I&apos;m a clarinetist, and I think we can make some useful analogies. Becoming a great
musician involves at least four areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performing&lt;/li&gt;
&lt;li&gt;Rehearsing&lt;/li&gt;
&lt;li&gt;Practicing&lt;/li&gt;
&lt;li&gt;A bit of theory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Rehearsing is practicing a specific piece meant for later public performance, whether
individually or as a group. By practicing, I mean practicing things like scales, articulation,
intonation, etc.)&lt;/p&gt;
&lt;p&gt;Great programmers need to spend time in four similar areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performing: Releasing&lt;/li&gt;
&lt;li&gt;Rehearsing: Writing code for work (or school projects)&lt;/li&gt;
&lt;li&gt;Practicing: Working on your own projects&lt;/li&gt;
&lt;li&gt;Theory: computer science&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Individually, we know the value of practicing (employers know that it signals &amp;quot;passion&amp;quot;—a
rant for another time). However, our institutions don&apos;t reflect that knowledge. Imagine
trying to get a degree in music performance if you only practiced scales ad-hoc—whenever
you had a lull in your other obligations. And yet that&apos;s what happens to computer science
majors. Instead of practicing, you spend too much time on rehearsing and theory. Anyone
involved with interviewing recent CS grads knows the result.&lt;/p&gt;
&lt;p&gt;It&apos;s a little better after graduation. If you get a nine-to-five, at least your evenings and
weekends are a bit more protected. Maybe you even have an enlightened employer that gives
you 20% time (&amp;quot;Good news, musicians—we&apos;re now going to let you practice scales every
Friday!&amp;quot;).&lt;/p&gt;
&lt;p&gt;Why is it like this? I think it&apos;s because if musicians stop practicing, you notice more
quickly. If I went to an orchestra rehearsal after a week of not practicing, my fingers
would feel sluggish and my lips would hurt. Practicing as a musician is possibly as much
about retaining your current skill as it is about improving. But in programming, your skills
don&apos;t regress so quickly: practicing is more about just improving your skills. So when we
don&apos;t practice, we don&apos;t feel an immediate, negative reward. We just miss out on the
better skills we could&apos;ve had.&lt;/p&gt;
&lt;p&gt;My argument is simple: programmers would have higher output over the long run if they could spend
more time on their own projects, learning autonomously.[1] Here&apos;s my plan to test this
hypothesis:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create this lifestyle for myself as a consultant. I prefer to work on one thing at a
time, so the best situation would probably be working on a contract for N weeks and
then spending the next M weeks working on a personal project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As I build my own consulting business, hire other programmers and create a culture
that supports this lifestyle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the organization scales, there will likely be some personal projects that could grow
organically into good products. We&apos;d gradually switch work from consulting over to
working on these products, since selling our own software can have higher gains than
renting out our time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&apos;m just getting started as a consultant myself. From my limited reading, it seems that
with some work you can expect to make much more than you would as an employee—that&apos;s good
because it&apos;ll make it easier to support myself without spending all my time working for
money. However, I&apos;ve also read that creating a profitable non-solo consulting business is
really hard. Now it&apos;s a distributed system instead of a single entity, and you have to
deal with the associated overhead.&lt;/p&gt;
&lt;p&gt;I&apos;m hoping I can overcome this challenge like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Short-term: I also hypothesize that there&apos;s a demographic of programmers who 1) are
highly competent, but 2) want to spend time on their own projects, and 3) aren&apos;t
interested in being a startup founder (or are interested but aren&apos;t ready). Building
an organization for these people could make it easier to be profitable since top
performers have higher margins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Long-term: If my original hypothesis is correct, our programmers will have
higher-than-normal output (and thus higher margins) due to extra time spent practicing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are more implications, but that&apos;s the plan. Wish me luck.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://howtorecover.me/programmisty-i-muzykanty&quot;&gt;Russian translation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] I also think that colleges teach the wrong kind of theory, but I&apos;ve written about that
&lt;a href=&quot;https://jacobobryant.com/post/2018/whatiscs/&quot;&gt;elsewhere&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>The Future of Work and Education</title><id>https://jacobobryant.com/post/2019/future/</id><link href="https://jacobobryant.com/post/2019/future/" /><updated>2019-03-19T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&lt;em&gt;Summary: we should create a college replacement where people focus on
exploratory learning instead of money, credentials or vocational training.
There would be lots of autonomy and mastery. As a side effect, it would produce
startups. It would be a great place for would-be startup founders who don&apos;t yet
have an idea and/or a cofounder.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The problem: Y Combinator is good if you&apos;re ready to be a startup founder, and Lambda
school is good if you&apos;re ready to be an employee, but what if you&apos;re neither? What do you
do if you&apos;re just out of high school and reasonably ambitious? Maybe you want to be a
startup founder, but you don&apos;t have an idea or a cofounder yet. Perhaps you could get a
job right away, but you want to spend time learning, exploring and making new
relationships first.&lt;/p&gt;
&lt;p&gt;Of course &amp;quot;college&amp;quot; is the obvious choice here, but college has lots of problems. For me,
the largest problems were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It forced me to spend a lot of time on things that didn&apos;t matter. At least the things
were hard, so it wasn&apos;t a complete waste of time. But it would&apos;ve been better to do
hard things I cared about instead of just hard things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It wasn&apos;t even that great for meeting other programmers. They say college is the best
place for meeting potential cofounders, but college mostly got in the way for me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;College tries to provide deep knowledge instead of just what&apos;s necessary to get a job,
but for programming, &lt;a href=&quot;https://jacobobryant.com/post/2018/whatiscs/&quot;&gt;it doesn&apos;t do a very good
job&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I managed to get through college cheaply, but rising costs are a big problem for many
students (and don&apos;t get me started about the textbook racket). The traditional university
system is buckling under its own weight.&lt;/p&gt;
&lt;p&gt;When I was deciding whether or not to go to grad school, I read a blog post by someone who
said that there are basically three potential reasons for getting higher education. I
don&apos;t remember what he said, but I think the reasons were credentials, vocational training
and exploratory learning. I think that college will be broken up into its component parts.
It looks like Lambda school&apos;s model is going to take over vocational training. Credentials
are becoming less important (at least for programmers) thanks to companies like Lambda
school and Triplebyte (and the increasing prevalence of startups, which tend to care less
about credentials than large companies). But I&apos;m not aware of a great replacement for
exploratory learning.&lt;/p&gt;
&lt;p&gt;I&apos;d like to create that replacement at some point. What would it look like? We can frame
the problem in terms of intrinsic motivation. I like Dan Pink&apos;s explanation which is that
intrinsic motivation has three components: autonomy, mastery and purpose. He says autonomy
is the ability to choose what you work on, how you work, where you work and who you work
with. Mastery means getting better at something (e.g. through deliberate practice) and
purpose means making the world a better place.&lt;/p&gt;
&lt;p&gt;I think an optimal career can be defined as one that maximizes these three intrinsic
motivators. But I have an additional hypothesis: Early on, autonomy should be given the
most priority followed closely by mastery. The weight should shift to purpose later. It&apos;s
somewhat like reinforcement machine learning: there&apos;s an exploration phase where you
figure out what to do and how to do it, and then there&apos;s an exploitation phase where you
actually do it.&lt;/p&gt;
&lt;p&gt;So this exploratory-learning college replacement should emphasize autonomy (but still
include mastery and purpose), and it should set you up to maximize all three over the long
run. To that end, it should be hard so that you can grow, and it should help you forge
relationships with good people so that you can learn from them and so that you can team up
with them.&lt;/p&gt;
&lt;p&gt;My biggest unsolved questions are 1) how would this organization best be brought into
existence, and 2) how can it be made economically sustainable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategy 1&lt;/strong&gt;: create a bootstrapped (potentially non-profit) consulting company. Instead of
&amp;quot;employees,&amp;quot; I&apos;m going to use the term &amp;quot;members.&amp;quot; (And while I&apos;m at it, I might as well
say &amp;quot;organization&amp;quot; instead of &amp;quot;company&amp;quot;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Members would be encouraged to work either part-time or full-time in spurts (e.g.
spend N months on a contract followed by 2N months not working).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A percentage of the contract payment is used to cover the overhead costs of the organization
(which ensures that the contracts keep coming in).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization would need to be large enough so that contracts are always available.
That would give members the freedom to take only 2N months not working instead of 2N
months plus an additional M months spent looking for another contract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization would facilitate a low cost of living for its members. The headquarters
would be in a cheap area (here in Utah? &lt;a href=&quot;http://paulgraham.com/pgh.html&quot;&gt;Pittsburgh?&lt;/a&gt;).
Members could choose to either work at the headquarters or work remotely (presumably
from somewhere else that&apos;s also cheap). The organization itself would need to be run
efficiently so that only a small slice is taken from members&apos; contracts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Members would be encouraged to work on personal projects. There would be a highly
visible/open way to communicate with other members about projects. In the early
stages, you would be able to throw out random ideas as you have them and find other
people who are interested in those ideas. As you work on the project, you could
continue to communicate about your progress and get feedback, advice and encouragement
from other members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For both contracts and personal projects, teams would be self-organizing. You can go
solo if you want or you can team up with people you know (the open communication for
personal projects will be a big help for this). For contracts you could opt
to let the organization assign you to a team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personal projects wouldn&apos;t be the only use of non-contract time. Members would be
encouraged to read lots of books, perhaps through an internal book
recommendation/review system. Or the organization could subsidize physical/audio/e- books.
(This alone would beat the pants off of typical &amp;quot;general education&amp;quot;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more structured/specialized learning, members could form small groups and work
through textbooks or online courses together (or do it solo). The organization could
curate good courses. These curated courses would be done with a student-mentor model.
Instead of a guru/teacher who covers a large class, you have a mentor who covers a
small group (perhaps five students). The mentor would be someone like a TA—they have a
little more experience than the students (at least in that course) but aren&apos;t
necessarily experts. The students drive learning and go at their own pace. The mentor
is there for support, guidance and feedback, but there are no grades or certificates of
completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This mentor model could also be applied to contracts: teams would include some
experienced members and some &amp;quot;apprentice&amp;quot; members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the previous points, there would be many opportunities to learn through
teaching (an experience that most people are starved of in my opinion).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This organization wouldn&apos;t be for just programmers. I don&apos;t really know how, but we&apos;d
find ways to include people from as many different fields as possible. Teams could be
cross-functional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization would include a financial aid system where members can donate money
which will be used to help people who don&apos;t have the skills to support themselves
completely yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization would be the perfect place to prepare to be a startup founder. You
could develop your skills, discover a good idea, meet potential cofounders and deepen
your relationships with those people by working with them. You wouldn&apos;t necessarily
start out planning to do a startup, but you would explore your way into a position
where you suddenly realize that your project is ready to become a startup.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There would be an internal seed-funding system for startup founders. Members could
band together to provide enough funding to allow the startup founders to work on the
project full-time long enough to get VC money. Because this interpersonal network would
be so strong, you could invest in people and projects that you&apos;re personally familiar
with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization itself could invest in startup founders and use the earnings to
sustain itself (and thus take a lower percentage of contracts). Because of the
interpersonal network and the high-quality preparation given to founders, the
organization would be able to invest successfully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The organization would also facilitate non-startup ventures. It could be a good place
for bootstrapped companies, research and open-source development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is pretty much implied by earlier points, but there would be no set working hours
and you could choose the languages and tools you use (this isn&apos;t a job). Since there&apos;s
so much focus on learning instead of just getting the job done, people would figure out
the best ways to do things instead of sticking with what&apos;s familiar and popular.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This wouldn&apos;t have to be for just recent high school grads. Hopefully it&apos;s successful
enough that people could have entire careers as members of this organization if they
want. That could be a good option for people who want to maximize their own intrinsic
motivation but don&apos;t care about making much money. It would be great if you could at
least support a small family without worrying about rent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We could go the other way too: include programs for high school and middle school
students. At the extreme, you could build out a cheap, private school system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big part of getting this going will be getting a critical mass of the right
kind of people to join. This is more of a social innovation than a technological
innovation. Most of the benefit will come from having a community of people who all
support each other in this style of living. For example, reading books. The real benefit
isn&apos;t that there&apos;s a particular reason that you can now start reading a lot, it&apos;s more
that you&apos;re part of a community that reads a lot. It reminds me of this quote from Grit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[T]here&apos;s a hard way to get grit and an easy way. The hard way is to do it by yourself.
The easy way is to use conformity—the basic human drive to fit in—because if you&apos;re
around a lot of people who are gritty, you&apos;re going to act grittier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Strategy 2&lt;/strong&gt;: Create a startup first and then build this organization as part of it.
You could build it into your recruiting system. Perhaps start an internship program, but
let interns spend some/most/all of their time working on their own projects. You could
gradually expand on the program from there until you include all the points from strategy 1.
More radically, instead of hiring programmers directly for your company, you could
create this auxiliary organization and then do your dev work by contracting out to them.&lt;/p&gt;
&lt;p&gt;This sounds hard, especially in a high-growth startup that&apos;s trying to build their own
product as quickly as possible. I&apos;m not sure how well the purposes of a startup would
align with this organization, so I currently think strategy 1 would be more effective. But
maybe it could work this way. Maybe the startup could more easily implement this after
it gets big and growth slows down.&lt;/p&gt;
&lt;p&gt;What other strategies are there? How can you create this organization in such a way that
it will have the highest possible chance of succeeding? What&apos;s the best way to make it
economically sustainable? What other characteristics should this organization have in
order to maximize its impact? Does this have to be just for ambitious people? How can you
include many different kinds of people? How can you help people use their autonomy wisely?
How can you make sure the organization succeeds even though some people will waste their
autonomy?&lt;/p&gt;
</content></entry><entry><title>Love, Ambition and Suffering</title><id>https://jacobobryant.com/post/2019/meaning/</id><link href="https://jacobobryant.com/post/2019/meaning/" /><updated>2019-03-17T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;In Man&apos;s Search for Meaning, Viktor Frankl argues that meaning in life can come from three
sources: from loving someone, from accomplishing some great work, or from suffering.[1] I
have a hypothesis that most people are predisposed towards one of the first two
sources and (ideally) end up getting plenty of all three.&lt;/p&gt;
&lt;p&gt;For example, I&apos;ve noticed that one of the primary benefits of hard work is the
relationships you build along the way. Inversely, you can indirectly have a large impact
on the world by touching the lives of those around you. (And suffering will happen no
matter what you do).&lt;/p&gt;
&lt;p&gt;It&apos;s ok to be either kind of person (or some other kind of person, since generalizations
like these don&apos;t fit everyone well). There is a misguided form of ambition that doesn&apos;t
yield good results, but that doesn&apos;t mean you shouldn&apos;t dream big if you want to.&lt;/p&gt;
&lt;p&gt;There are probably other implications that you could tease out. In general I think it&apos;s
helpful to understand what kind of person you are and accept those who are different.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] There&apos;s some controversy about Frankl, but regardless I think it&apos;s a useful way to
frame the problem. Paul Graham framed it basically this way &lt;a href=&quot;https://twitter.com/paulg/status/1073864964753055744&quot;&gt;in a
tweet&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Alignment</title><id>https://jacobobryant.com/post/2019/alignment/</id><link href="https://jacobobryant.com/post/2019/alignment/" /><updated>2019-02-06T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;Should you work hard? Depending on your definition of &amp;quot;hard,&amp;quot; it&apos;s a
&lt;a href=&quot;https://twitter.com/elonmusk/status/1067173497909141504&quot;&gt;controversial question&lt;/a&gt;. Let&apos;s assume a
baseline level of hardness is roughly 40 hours per week of mostly focused work.
In other words, this is your typical &amp;quot;good employee&amp;quot; at a 9-to-5: they do their
time and they do good work, then they go home and focus on other things. This
is very respectable.&lt;/p&gt;
&lt;p&gt;What about going above and beyond? There are two sides to this. Bronnie Ware
says that one of the top five &lt;a href=&quot;https://bronnieware.com/blog/regrets-of-the-dying/&quot;&gt;regrets of the
dying&lt;/a&gt; is &amp;quot;I wish I
hadn&apos;t worked so hard&amp;quot;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This came from every male patient that I nursed. They missed their children&apos;s
youth and their partner&apos;s companionship. Women also spoke of this regret. But
as most were from an older generation, many of the female patients had not been
breadwinners. All of the men I nursed deeply regretted spending so much of
their lives on the treadmill of a work existence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the other hand, we can probably all think of several highly successful people
who worked more than 40 hours per week. My favorite example is Henry Eyring, the
chemist. &lt;a href=&quot;https://www.goodreads.com/book/show/2300985.Mormon_Scientist&quot;&gt;His
biography&lt;/a&gt; is one
of the few books I&apos;ve read twice, and he&apos;s one of my personal role models. He
was ambitious, worked extremely hard and achieved a lot—but he did this without
compromising on anything more important. He was a good husband, father, teacher
and leader. He touched the lives of many.&lt;/p&gt;
&lt;p&gt;There are additional arguments for both sides of the debate. But what&apos;s the
resolution to this paradox? I think it&apos;s something that I&apos;ve started calling
&amp;quot;alignment.&amp;quot; Alignment is the situation in which there&apos;s a high correlation
between the effort you put into life and the good that comes out. In other
words, it&apos;s when your work is aligned with what&apos;s most important.&lt;/p&gt;
&lt;p&gt;I hypothesize that the real problem with many of Bonnie
Ware&apos;s patients wasn&apos;t that they worked too hard—the problem is that they
worked too hard on things that, at the end of the day, weren&apos;t as important to
them as they thought. Notice that the #1 regret was &amp;quot;I wish I&apos;d had the
courage to live a life true to myself, not the life others expected of me.&amp;quot;
Perhaps the regret of working too hard was really just a symptom of this deeper
regret.&lt;/p&gt;
&lt;p&gt;If you want to spend your life working really hard, it&apos;s critical to mould
yourself and your situation until working hard is actually worth it. Otherwise
you have two bad choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work hard and later regret that you neglected more important things&lt;/li&gt;
&lt;li&gt;Don&apos;t work hard and later regret that you didn&apos;t fulfill your dreams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really like &lt;a href=&quot;http://blog.samaltman.com/how-to-be-successful&quot;&gt;Sam Altman&apos;s
advice&lt;/a&gt; on &amp;quot;how to
achieve outlier success.&amp;quot; I think it describes well this idea of alignment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Almost everyone I&apos;ve ever met would be well-served by spending more time
thinking about what to focus on. It is much more important to work on the right
thing than it is to work many hours. Most people waste most of their time on
stuff that doesn&apos;t matter.&lt;/p&gt;
&lt;p&gt;Once you have figured out what to do, be unstoppable about getting your small
handful of priorities accomplished quickly. I have yet to meet a slow-moving
person who is very successful. ...&lt;/p&gt;
&lt;p&gt;You can get to about the 90th percentile in your field by working either smart
or hard, which is still a great accomplishment. But getting to the 99th
percentile requires both.... Working a lot comes with huge life trade-offs,
and it&apos;s perfectly rational to decide not to do it. But it has a lot of
advantages. ... And it&apos;s often really fun. One of the great joys in life is
finding your purpose, excelling at it, and discovering that your impact
matters to something larger than yourself.&lt;/p&gt;
&lt;p&gt;It&apos;s not entirely clear to me why working hard has become a Bad Thing in
certain parts of the US.... I think people who pretend you can be super
successful professionally without working most of the time (for some period of
your life) are doing a disservice.&lt;/p&gt;
&lt;p&gt;One more thought about working hard: do it at the beginning of your career. Hard
work compounds like interest, and the earlier you do it, the more time you have
for the benefits to pay off.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&apos;ve had several different experiences with alignment over the past six years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For a large, early chunk of my mission, I was completely out of alignment.
I didn&apos;t enjoy being a missionary at all—it was a living hell—and it seemed
like our efforts didn&apos;t make a difference anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I changed a lot partway through my mission. One of the things I most enjoyed
about the end of my mission was the satisfaction of working hard all day, every
day on something that mattered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although my experience at BYU was positive overall, there was lots of
pressure from the system to work very hard, even though a large chunk of my
time was spent on things that didn&apos;t contribute to my education (this
category includes a lot of homework, most lectures, and almost all exams).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being an employee was alright. I went in with the desire to make a real
contribution to Lucid and I like to think I achieved that goal. Although it
wasn&apos;t the work I wanted to spend the rest of my life on, I did learn a lot
and the money I saved up is a great benefit to me now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that I&apos;ve quit my job and have become a startup founder, it&apos;s
the first time since my mission where
I feel that I have perfect alignment. I work a
lot, but it doesn&apos;t feel like work. I don&apos;t look forward to the weekends
anymore; I love every day. Things will get more stressful as we progress, but
I&apos;m excited.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, having alignment means being a startup founder because I&apos;m ambitious and
there are specific things I want to build—I&apos;m not satisfied by working on
whatever the company that hired me happens to be building. But all that being
said, alignment is important for everyone, regardless of what your individual
goals and desires are. As with most &lt;a href=&quot;https://www.goodreads.com/book/show/18176747-the-hard-thing-about-hard-things&quot;&gt;hard
things&lt;/a&gt;,
there&apos;s no formula for alignment. You have to figure out what it means for you
and how to get it. But being aware of the concept is at least the first step.&lt;/p&gt;
&lt;p&gt;I write this all as a reminder to myself. I hope my life never falls out
of alignment.&lt;/p&gt;
</content></entry><entry><title>Grad school</title><id>https://jacobobryant.com/post/2018/gradschool/</id><link href="https://jacobobryant.com/post/2018/gradschool/" /><updated>2018-10-25T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;My primary career goal for a long time has been to be a successful startup
founder. At one time, I was planning to get a part-time job after
graduating (working only enough hours to pay for living expenses) so I could
devote most of my time to building a startup. For a few reasons I decided not to
try that, so I accepted a full-time offer from Lucid in order to save up money
and gain experience. So my plan has always been to work here temporarily and
then work on a startup full-time as soon as I&apos;m done.&lt;/p&gt;
&lt;p&gt;Over the past month or so as I&apos;ve spent more of my spare time working on
projects in Clojure, I realized also that there&apos;s a lot of stuff in the Clojure
ecosystem I&apos;d like to get the hang of. I started to modify my plan slightly
to leave some space between quitting Lucid and doing the startup so I could
spend time learning various Clojure libraries.&lt;/p&gt;
&lt;p&gt;But in fact, &lt;a href=&quot;https://jacobobryant.com/post/2018/productionandlearning/&quot;&gt;the more I&apos;ve thought about it&lt;/a&gt;, the
more I want to emphasize this period of just learning. I&apos;ve started
euphemistically referring to it as &amp;quot;going to grad school&amp;quot; because I want to have
a significant higher-learning experience. I don&apos;t want to go back to the
structure of formal education though, so an actual master&apos;s degree wouln&apos;t hit
the spot, and a PhD is out of the question because&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I found out in my undergrad that I don&apos;t like trying to fit my projects in
the category of &amp;quot;research&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I don&apos;t want to put off the startup for another 4+ years&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So instead I&apos;ll just stick with my do-it-yourself,
homeschool-style mini-master&apos;s degree from the graduate school of programming at
O&apos;Bryant University. It&apos;s not accredited, but I know the headmaster and I think
he&apos;s great.&lt;/p&gt;
&lt;p&gt;In preparation, I started listing subjects to learn more about and included
a few projects that I&apos;ve wanted to code up for a while. I realized that the
projects actually were great ways to put into practice all the things I wanted
to learn, so a natural structure for my curriculum emerged. Here are the
projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project 0:&lt;/strong&gt; Write an AI to play Clue&lt;/p&gt;
&lt;p&gt;Whenever I play Clue, I feel like there&apos;s so much information and I can only
latch on to part of it. A program could keep track of every little detail. The
main part of the program (i.e. given the information you have, which cards are
in the envelope?) would be a good opportunity to practice logic programming, but
there are other components too. Which room should you travel to? What questions
should you ask? I tried to build this in my Intro to AI class but the professor
wouldn&apos;t let me because our final project was supposed to involve robots.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project 1:&lt;/strong&gt; Write a website for writing board game AIs&lt;/p&gt;
&lt;p&gt;It turns out the Clue thing is just an instance of a more general problem I
have. I often get tired of board/card games because it feels tedious playing
them. It&apos;s like doing random arithmetic problems over and over again. However, I
often think about how interesting it would be to write AIs for these games (I&apos;ve
always loved automating boring tasks). For example, although I do actually enjoy
playing Pandemic, I think writing an AI for it would be 10x more fun.
It&apos;s like a classic graph theory problem but with all these constraints thrown
in.&lt;/p&gt;
&lt;p&gt;Wouldn&apos;t it be cool to have a website that facilitated writing AIs for board
games and using them to compete against other programmers? It&apos;d be like robot
soccer tournaments. For any game, someone could write a server component that
would define all the rules and provide an interface for clients. Then anyone
could code up an AI client (or a client meant for humans) and plug it in.&lt;/p&gt;
&lt;p&gt;This could also be a great tool for teaching programming, another one of my
interests. You could gradually introduce someone to programming by giving them
most of the components of an AI written with bits left out for them to fill in.
As the student progresses you could have them code more and more of the AI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project 2:&lt;/strong&gt; Rewrite &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.jacobobryant.moody.vanilla&quot;&gt;Smart Shuffle
Player&lt;/a&gt;
using React Native and Clojurescript&lt;/p&gt;
&lt;p&gt;Smart Shuffle Player is what I called an app I built during my undergrad. I took
an open-source Android music app and inserted my own recommendation algorithm to
make it select which song to play next. It&apos;s basically Frankenstein&apos;s monster.
It was good enough for an undergrad research project, and I&apos;ve even used it as
my main music app for over a year. But there are lots of improvements to be
made. It&apos;s not in a position where I would recommend it wholeheartedly.&lt;/p&gt;
&lt;p&gt;Refactoring the Java code to make it nice would be no bueno—I&apos;d rather rewrite
the thing in Clojure. Plus, there&apos;s already (relatively) good support for writing
cross-platform, native mobile apps with React Native and ClojureScript, so I
could make an iOS version too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The rest of the curriculum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These projects would give me great exposure to the three main areas I want to
develop expertise in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web application architecture (in Clojure)&lt;/li&gt;
&lt;li&gt;Mobile app development (in Clojure)&lt;/li&gt;
&lt;li&gt;AI/machine learning/statistics (in Clojure)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I work on these projects, I have some ideas for supplemental learning
activities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read lots of source code for Clojure web libraries, like Pedestal (HTTP
routing), Sente (websockets) and Immutant (web server).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work through Doing Bayesian Data Analysis (a text book I bought a while ago
but haven&apos;t touched).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finish SICP (the Bible of Lisp. I&apos;ve read most of it but haven&apos;t done any of
the exercises).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work on Hacker Rank problems (partly to get
practice doing fancy algorithmic things that usually don&apos;t come up but also
for fun. It&apos;s important to take time to enjoy a skill instead of only doing
deliberate practice).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&apos;ll also include time for some general ed. I have a never-ending queue of
&lt;a href=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/books&quot;&gt;books&lt;/a&gt; I&apos;d like to get through, and I love writing.&lt;/p&gt;
&lt;p&gt;As time goes on I&apos;ll likely modify the curriculum. But even as I&apos;ve thought
about what I have so far, I really think this&apos;ll turn into a great experience. I
don&apos;t even see it as simply &amp;quot;startup prep.&amp;quot; Even if I wasn&apos;t planning to be a
startup founder, this would be a great opportunity to take my skills to the
nextLevel++ and launch me into the rest of my career. I have a somewhat mellow
complexion, so I don&apos;t get excited easily. But I&apos;m excited about this.&lt;/p&gt;
</content></entry><entry><title>Production and Learning</title><id>https://jacobobryant.com/post/2018/productionandlearning/</id><link href="https://jacobobryant.com/post/2018/productionandlearning/" /><updated>2018-10-24T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;Recently I&apos;ve been thinking about two different mindsets: a
production mindset and a learning mindset. Whenever I&apos;m working, I have
predominantly one or the other. The production mindset is characterized by
efficiency and output. You try to accomplish as much as possible with the
least amount of resources. You make heavy use of the 80/20 rule, only doing
things that are essential. You get things done. The learning mindset is
characterized by curiosity and growth. You take time to explore different
possibilities. You&apos;re not worried about meeting a deadline. You don&apos;t care
about &amp;quot;wasted effort.&amp;quot;&lt;/p&gt;
&lt;p&gt;This distinction came to mind as I was building a prototype web application in
my spare time. I was trying to hook up Sente and Pedestal (two Clojure
libraries for web sockets and HTTP routing, respectively). I didn&apos;t find any
examples demonstrating this, but I followed the instructions on Sente&apos;s Github
page. Unfortunately I ended up with a bug that I didn&apos;t understand nor know how
to fix. I did more Googling, asked a friend for help and was considering
messaging Sente&apos;s author. However, I looked at Sente&apos;s source code a bit and
found out that it wasn&apos;t terribly long. Instead of groping around in the dark,
I could delve into the code to deepen my understanding of what was actually
going on.&lt;/p&gt;
&lt;p&gt;This also made sense because I wasn&apos;t in a rush. The whole point of building
this prototype was to help me learn more about building web applications, so
why not take the time to understand how a websocket library works under the
hood? It seemed like such a novel idea to me, and now I realize it&apos;s because
I&apos;d spent the past seven years in a production mindset.&lt;/p&gt;
&lt;p&gt;Seven years ago is when I started college, and until I graduated it was a
constant struggle to finish homework, complete projects and prepare for exams.
I was happy if I got enough sleep every night. So of course I had a production
mindset—I needed to finish my coursework efficiently just to keep a healthy
balance in my life. My time on the job since graduating has similarly had a
production mindset not because I&apos;m being pushed by deadlines all the time (I&apos;m
not) but because... it&apos;s a job. Our customers want features X, Y and Z, and
I&apos;m being paid to help get it done.&lt;/p&gt;
&lt;p&gt;However, there was a time when I had a learning mindset: high school. I was
home schooled up until starting college, and my parents gave me a lot of
flexibility. In high school I started diving into programming and Linux. I
learned on my own from my own motivations. When I had an idea for a new
program to write, I&apos;d pause my work in other subjects while I focused on
programming. Since I was being motivated by curiosity and enjoyment, I took my
time to learn new things. It was great. When the project wrapped up, I would
catch up in my other subjects. Then the cycle would repeat.&lt;/p&gt;
&lt;p&gt;I look back on my high school years with fondness. I learned so much. If I have
any regrets about my college education, it&apos;s that I spent practically the
entire time in a production mindset. It certainly helped to develop character
traits like diligence, but it wasn&apos;t the best for gaining knowledge.
All in all, I have this gut feeling that I could&apos;ve become much more with a
learning mindset.&lt;/p&gt;
&lt;p&gt;But that being said, what would I have done differently? Quit my part-time job?
I learned a lot from that, and I appreciated the financial independence it gave
me. Should I have taken fewer credits? That would&apos;ve disqualified me from
scholarships. Maybe I should&apos;ve allowed my GPA to fall in order to free up
time. In any case, it was a difficult situation, and the right solution is
probably systemic.&lt;/p&gt;
&lt;p&gt;This idea opens up a few more questions; for example, can you have an even mix
of learning and production mindsets? Or does it have to be primarily one or the
other? How can a learning mindset be facilitated at school and work? As an
individual, how can you create room in your life for a learning mindset?
Perhaps I&apos;ll think more about these questions in another essay, but for now,
I&apos;m itching to spend more time learning for the sake of learning. More on that
in my next essay.&lt;/p&gt;
</content></entry><entry><title>Understanding Clojure</title><id>https://jacobobryant.com/post/2018/understandingclojure/</id><link href="https://jacobobryant.com/post/2018/understandingclojure/" /><updated>2018-10-11T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;I remember once during a calculus class, I had to find the derivative of a
function. The function had some trig in it, and applying the rules of
differentiation turned hairy fast. The probability of me applying all the rules
by hand without making any algebraic mistakes was very small. I brought it up
in class since I didn&apos;t see how the problem could be reasonably solved.
It turns out that there was a trig identity I could have used to simplify the
function &lt;em&gt;before&lt;/em&gt; taking the derivative. In this case, solving the problem
wasn&apos;t that bad.&lt;/p&gt;
&lt;p&gt;Imagine an alternate route. What if we had thought, &amp;quot;This derivative is way too
complicated to do by hand—Let&apos;s write a computer algebra system that will
handle all this automatically so we don&apos;t have any mistakes!&amp;quot; That would&apos;ve been
the wrong approach. All that work we would&apos;ve done is just incidental
complexity. It doesn&apos;t have to be there.&lt;/p&gt;
&lt;p&gt;When solving a math problem, there are often two phases: setting up and/or
simplifying the problem and then actually solving it. In my class, the right way
to solve the problem required a focus on the first phase. Simplifying the
problem removed a lot of complexity from the solution. But the hypothetical
alternate case where we write a CAS focuses on the second phase: we take the
problem as-is and then come up with methods to manage the complexity of the
solution.&lt;/p&gt;
&lt;p&gt;When dealing with such complex, abstract systems, we must take the first
strategy of focusing on the first phase. Assertion: mainstream programming
involves a lot of incidental complexity because it doesn&apos;t focus enough on the
first phase. For example, 20 years ago Peter Norvig made &lt;a href=&quot;http://norvig.com/design-patterns/design-patterns.pdf&quot;&gt;these
claims&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Dynamic Languages have fewer language limitations&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Less need to get around class-restricted design&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Study of the Design Patterns book: 16 of 23 patterns have qualitatively
simpler implementation in Lisp or Dylan than in C++ for at least some uses of
each pattern&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big part of Clojure&apos;s value proposition is that it helps you simplify the
problem so that your solutions don&apos;t have to be so complicated. &lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;It&apos;s built with
simplicity in mind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an example, consider dependency injection. In response to the question &amp;quot;Does
clojure need dependency injection to make code more testable,&amp;quot; a Stack Overflow
user &lt;a href=&quot;https://stackoverflow.com/a/15696956/1258629&quot;&gt;responds&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Clojure you usually achieve the equivalent of dependency injection with
alternative methods. ... you definitely don&apos;t need anything like a &amp;quot;DI
framework&amp;quot;. IMHO, needing a framework for DI is really just compensating for a
lack of sufficient features in the language itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The complexity of a dependency injection framework disappears thanks to the way
the language is structured. A similar argument explains why Clojure programmers
aren&apos;t in to static typing. There&apos;s nothing wrong with the idea of static
analysis, but so far in practice, it adds complexity. It&apos;s not that Clojure
programmers think static typing is inherently bad—it&apos;s just that Clojure
simplifies your programs (e.g. by separating functions from information) so
that the benefits of static typing are no longer great enough to outweigh the
cost.&lt;/p&gt;
&lt;p&gt;These examples are necessarily controversial, so don&apos;t focus on them too much.
My point is that this philosophy of doing more problem-space simplification is at
the heart of Clojure. I happen to believe the value proposition, and that&apos;s why
I can&apos;t spend my career on mainstream technologies. I&apos;ve gotta be a Clojure
hacker.&lt;/p&gt;
</content></entry><entry><title>What is Computer Science All About?</title><id>https://jacobobryant.com/post/2018/whatiscs/</id><link href="https://jacobobryant.com/post/2018/whatiscs/" /><updated>2018-09-25T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;I once overheard a fellow CS student lament after a programming competition that
the winners were always ACME majors (Applied and Computational Math Emphasis).
What an embarrassment; bested at programming by a bunch of Math majors. What&apos;s
going on here?&lt;/p&gt;
&lt;p&gt;My answer is that the competitions aren&apos;t really about good programming—they&apos;re
about algorithms. I also think that algorithms are less core to programming than
most CS programs would lead you to believe.&lt;/p&gt;
&lt;p&gt;I suspect if you made a survey and asked &amp;quot;What is the core curriculum of
Computer Science,&amp;quot; many answers would focus on data structures and algorithms.
And those answers wouldn&apos;t be wrong—data structures and algorithms classes are
typical foundation classes in today&apos;s CS programs. But I don&apos;t think they are
the essence of CS.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://www.paulgraham.com/hp.html&quot;&gt;one of the epistles of Paul&lt;/a&gt;, we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&apos;ve never liked the term &amp;quot;computer science.&amp;quot; The main reason I don&apos;t like it
is that there&apos;s no such thing. Computer science is a grab bag of tenuously
related areas thrown together by an accident of history, like Yugoslavia. At
one end you have people who are really mathematicians, but call what they&apos;re
doing computer science so they can get DARPA grants. ... And then at the
other extreme you have the hackers, who are trying to write interesting
software, and for whom computers are just a medium of expression, as concrete
is for architects or paint for painters. It&apos;s as if mathematicians,
physicists, and architects all had to be in the same department.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later on in the same essay, Paul Graham re-emphasizes that what we call Computer
Science today is not really the theoretical version of hacking. So when I talk
about the essence of &amp;quot;CS,&amp;quot; I mean the essence of &amp;quot;what should be taught in
college to people who just want to be good programmers&amp;quot;. (In the interest of
brevity, I&apos;ll call it &amp;quot;CS&amp;quot;).&lt;/p&gt;
&lt;p&gt;And what is that essence? It&apos;s &lt;em&gt;abstraction&lt;/em&gt;. What is an effective abstraction?
How do you create effective abstractions? How can you spot bad ones? The answers
to these questions are often unrelated to the implementation details of a hash
map or the computational complexity of sorting algorithms.&lt;/p&gt;
&lt;p&gt;The main difference I see between good code and bad code is simplicity. Good
abstractions get you simplicity. Simple code is shorter, easier to comprehend
and easier to work with. Bad abstractions (or lack of abstractions) get you the
opposite.&lt;/p&gt;
&lt;p&gt;A classic Tony Hoare quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two ways of constructing a software design: One way is to make it so
simple that there are obviously no deficiencies, and the other way is to make it
so complicated that there are no obvious deficiencies. The first method is far
more difficult.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My mind has been particularly impressed upon by code I&apos;ve reviewed from
interview candidates at Lucid recently. Often, the candidate&apos;s grasp of the
language is perfectly sufficient to solve the problems, but the code they write
is too complex. If they had framed the problem better—i.e. if they had the
right abstractions—they would be able to write better code in less time.&lt;/p&gt;
&lt;p&gt;If we want to be better programmers, we need to develop our skills in working
with abstractions. That&apos;s the main point I&apos;d like to get across. Having said
that, how can such skills be developed? I have some ideas which I&apos;ll present
below, but I&apos;m including the disclaimer that I see them as only the beginning of
an important discussion, not the end.&lt;/p&gt;
&lt;p&gt;For starters, a focus on simplicity is key. Good abstractions are a means to an end,
and that end is simplicity. That&apos;s what CS students should think about first (and
aren&apos;t we all CS students when you think about it?). Striving for simple
solutions will bring an understanding of abstraction.&lt;/p&gt;
&lt;p&gt;An example of how to do that would be to take time to make your code elegant.
Often (especially when under time pressure, as college students usually are),
I&apos;ll focus on getting code that works first, then I&apos;ll go back and make the code
good. This is the phase where I spend time thinking about simplicity. Sometimes
I learn new tools which then give me the power to make my code simpler.&lt;/p&gt;
&lt;p&gt;For instance, while in college I took a machine learning class. We implemented
back propagation in the second lab. I first finished the requirements using only
the knowledge I had, so I stored all the data in regular Python lists. But after
I finished the lab&apos;s requirements, I went back and learned how to use Numpy
matrices instead. This made my code simpler and 10x faster.&lt;/p&gt;
&lt;p&gt;However, the only reason I had time to do that was because I wasn&apos;t taking a
full load of classes (it was my last semester) and I didn&apos;t have a job. In
any other semester, I wouldn&apos;t have had time. The current system in college
makes it difficult to spend time on that second, crucial phase of coding. I
think this is a major setback for CS students. It would be great if the system
not only didn&apos;t prevent you from writing good code but actually encouraged it
somehow. I&apos;m not sure how that would best be done (have TAs grade on code style?
blech), but it&apos;s something to think about.&lt;/p&gt;
&lt;p&gt;Reading others&apos; code is also a great way to learn good abstractions. There&apos;s
plenty of code online to learn from in the form of Github repos, Stack Overflow
answers, etc. If you&apos;re not too much of a recluse you could even find an
experienced programmer (whether online or offline) to review your code and give
suggestions. In the vein of systemic solutions, CS courses could be structured
to facilitate learning from peers. Imagine if after a project was done,
everyone&apos;s code (except for those who opt out) was then made available. The
students&apos; projects could be sorted by size, since brevity is a decent heuristic
for which projects will be the simplest. There&apos;s always gonna be that one
over-achieving nerd who blows the assignment out of the water, so why not use
them as a resource for other students?&lt;/p&gt;
&lt;p&gt;That would even have the side effect of helping CS students actually talk to
each other in a comfortable setting (over code), which is a noble cause by
itself.&lt;/p&gt;
&lt;p&gt;With simplicity always in mind as the end goal, it could then be useful
to focus explicitly on abstractions. What are different abstractions out there?
What are their pros and cons? My college education had some focus on your
standard OOP things, but I would&apos;ve loved to also have classes that gave
in-depth exposure to other abstractions. Peter Norvig gives &lt;a href=&quot;http://norvig.com/21-days.html&quot;&gt;this
advice&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn at least a half dozen programming languages. Include one language that
emphasizes class abstractions (like Java or C++), one that emphasizes functional
abstraction (like Lisp or ML or Haskell), one that supports syntactic
abstraction (like Lisp), one that supports declarative specifications (like
Prolog or C++ templates), and one that emphasizes parallelism (like Clojure or
Go).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;College covered the first one fine, but I&apos;ve had to learn the rest on my
own time.&lt;/p&gt;
&lt;p&gt;It&apos;d especially be great to compare and contrast different kinds of
abstractions, like object-oriented vs. functional programming, static vs.
dynamic typing, etc. Give students a chance to think for themselves and debate
with each other. As it is, I felt like my college education was just geared
towards whatever the mainstream thinking was. It&apos;d be better for CS programs to
expose students to different ways of thinking and prepare them to evaluate
abstractions based on merit (instead of based on popularity).&lt;/p&gt;
&lt;p&gt;I&apos;ve focused a lot on changes that could be made to formal education, partially
because I&apos;m interested in reforming education later on in my career. But in the
mean time, individuals can be proactive. However we end up focusing on
abstractions, I think doing so will not only make us better programmers, it&apos;ll
help us understand our own identities better. Maybe then it won&apos;t feel so bad to
lose coding competitions to math majors.&lt;/p&gt;
</content></entry><entry><title>A Brief History of Agile</title><id>https://jacobobryant.com/post/2018/agile/</id><link href="https://jacobobryant.com/post/2018/agile/" /><updated>2018-09-21T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&amp;quot;Agile&amp;quot; development was a peculiar sport played by &amp;quot;software engineers,&amp;quot; a type
of indentured servant who made their living by tapping buttons all day instead
of taking up a real career as a doctor, a lawyer or an actual engineer. Agile
was created as a form of entertainment for Scrum Masters, software engineers
who had been given special privileges in return for keeping the others in line.&lt;/p&gt;
&lt;p&gt;Like other sports of the time, Agile was divided into various phases of game
play. Due to the indoor nature of button-tapping and the relatively low amount
of energy required to do so, Agile was played year round. A 12-month season was
separated into 4 quarters, each composed of 6 &amp;quot;sprints.&amp;quot; Whoever scored the
most points won the sprint, so each engineer&apos;s goal was to maximize the points
they earned per day while minimizing the same ratio for their coworkers.&lt;/p&gt;
&lt;p&gt;Engineers could score points by completing grueling tasks. These tasks were
called &amp;quot;stories&amp;quot; to make them sound more fun. Each story was assigned a certain
number of points at the beginning of each sprint through a ritual called
&amp;quot;estimation.&amp;quot; Each engineer would vote on a number of points for the story, and
then based on the votes, the group would decide how many points each story
would ultimately be worth. Before deciding on a number of points, each engineer
would have to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How hard the story was (both for them and for their coworkers)&lt;/li&gt;
&lt;li&gt;Who the story would likely to be assigned to&lt;/li&gt;
&lt;li&gt;How many points they thought the other engineers would vote on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each engineer hoped to receive stories that were easy for them but still worth
a lot of points.&lt;/p&gt;
&lt;p&gt;This voting process was called &amp;quot;planning poker,&amp;quot; so named because of the highly
psychological nature of estimation and the large amount of bluffing involved.
After the Scrum Master gave a countdown, each engineer would hold up a number
of fingers equal to the number of points they thought the story should be
worth. After removing outliers, the story was worth the average of the votes.&lt;/p&gt;
&lt;p&gt;A basic strategy was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decide if you want the story to be worth many or few points.&lt;/li&gt;
&lt;li&gt;Gauge how many points the other engineers will vote on.&lt;/li&gt;
&lt;li&gt;Vote on a number of points that pulls the average in your desired direction
without turning your vote into an outlier.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being an outlier was very bad because it nullified your vote. In addition to
eliminating your influence on the final worth of the story, nulls were
considered unclean by many engineers. Nullified engineers were required to work
from home for three days.&lt;/p&gt;
&lt;p&gt;In order to further humiliate outlying voters, they had to give an impromptu
explanation for why they voted so ridiculously. These reasons were expected to
be related only to the difficulty of the story, providing outsiders with the
illusion that estimation was simply part of getting the job done. But for
insiders, the humiliation damaged their ability to influence other engineers in
future estimations.&lt;/p&gt;
&lt;p&gt;To heighten amusement for the Scrum Master, engineers were restricted to
choosing votes that fell in a certain set of numbers called the &amp;quot;Fibonacci
sequence,&amp;quot; so called because the estimations were really just fibs.&lt;/p&gt;
&lt;p&gt;There were many intricacies in planning poker strategy, most of which fall
outside the scope of this article. But there was at least one trick taken from
professional rock-paper-scissors tournaments: an engineer could pretend to vote
at the same time as the other engineers but really wait a split second longer;
thus they could see what the other votes were and respond accordingly. Only
those with more experience employed this tactic, as penalties for being caught
were severe.&lt;/p&gt;
&lt;p&gt;After estimation was finished, it was a race (hence the term &amp;quot;sprint&amp;quot;) to
finish as many stories as possible while subtly hindering coworkers. One common
tactic was to bring up &amp;quot;tests&amp;quot; right before a co-worker was about to finish a
story. If the other engineers agreed, the co-worker would be forced to spend a
day &amp;quot;testing&amp;quot; before marking the story as complete. During the test, engineers
were buffeted by a series of impossible-to-answer questions such as &amp;quot;When will
the current project be completed?&amp;quot;&lt;/p&gt;
&lt;p&gt;Like the gladiatorial games, Agile was high stakes. Engineers who won the most
sprints would be promoted to &amp;quot;Senior Engineer,&amp;quot; &amp;quot;Epic Engineer,&amp;quot; and finally
&amp;quot;Manager.&amp;quot; Promotions came with respectable pay increases but also tougher
competition. On the other end of the spectrum, a chart was used to keep track
of engineers who didn&apos;t finish all the stories they were assigned each sprint.
This was called a burndown chart because if the line on the chart reached the
upper-right corner, the engineer with the highest point deficit would be burned.&lt;/p&gt;
&lt;p&gt;Eventually, engineers started to revolt and Agile fell out of practice. It was
replaced by a new movement, the name of which was chosen to represent the end
of the Agile burndowns: &amp;quot;Waterfall.&amp;quot;&lt;/p&gt;
</content></entry><entry><title>Better Goals and Plans</title><id>https://jacobobryant.com/post/2018/goals/</id><link href="https://jacobobryant.com/post/2018/goals/" /><updated>2018-06-26T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;Why do we need goal setting and planning? In general, how can it be used effectively? The answer to
the former is that we need to &lt;strong&gt;know&lt;/strong&gt; that we&apos;re heading in the &lt;strong&gt;right direction&lt;/strong&gt; as &lt;strong&gt;fast as
possible&lt;/strong&gt;. This need has three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direction: working on the right things&lt;/li&gt;
&lt;li&gt;Magnitude: getting a lot of things done&lt;/li&gt;
&lt;li&gt;Validation: knowing that direction and magnitude are where they should be so that changes can be
made if not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goals are traditionally used as the solution for all three; however, they work best for direction.
We can make all our lives a lot better if we focus our goal setting on fulfilling the need for
direction while using other methods that are better suited for magnitude and validation.&lt;/p&gt;
&lt;p&gt;Specifically, magnitude is best achieved by creating a culture that fosters intrinsic motivation.
Then people will maximize their magnitude without overhead supervision. In addition, effective
planning ensures that people work together efficiently.&lt;/p&gt;
&lt;p&gt;Validation actually is a smaller need than people think, and it&apos;s best served by a combination of 1)
not worrying about it so much, and 2) having the trust to rely on qualitative discernment instead of
hard metrics.&lt;/p&gt;
&lt;p&gt;Note: This essay is written in the context of working on a software
development team; though it should apply in the general case also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Direction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To use goals effectively, first recognize that the reason you&apos;re using them is to help you
prioritize—not to provide motivation or accountability. Thus, measurable and time-bound goals
aren&apos;t necessarily that important. Those kinds of goals can be helpful in specific situations but
shouldn&apos;t be required in all situations. Once you stop using goals badly, you&apos;re half-way to using
them well.&lt;/p&gt;
&lt;p&gt;That is the most important thing. With a clear purpose in mind for goals, how to actually use them
will come naturally as you try different things and continually evaluate their helpfulness. For
myself, I currently use three tiers of goals: long-term (i.e. life-long), mid-term (on the range of
a few months to a year) and short-term (weekly) goals. Because I don&apos;t focus on measurability or
time-boundedness, you might think of my short-term &amp;quot;goals&amp;quot; more as &amp;quot;tasks.&amp;quot; For the most part,
short-term goals lead into mid-term goals, and mid-term goals lead into long-term goals.&lt;/p&gt;
&lt;p&gt;For example, here are my goals as of this week:&lt;/p&gt;
&lt;p&gt;Long-term:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solve music recommendation&lt;/li&gt;
&lt;li&gt;Make a great company&lt;/li&gt;
&lt;li&gt;Fix education&lt;/li&gt;
&lt;li&gt;Be a great musician&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mid-term:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a difference at Lucid&lt;/li&gt;
&lt;li&gt;Solve my own music listening needs (This involves working on a music app that I made)&lt;/li&gt;
&lt;li&gt;Learn Chinese&lt;/li&gt;
&lt;li&gt;Prepare for my wedding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Short-term:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tie up loose ends for print catalog (a project at work)&lt;/li&gt;
&lt;li&gt;Finish goal/plan write-up (I&apos;m working on this one right now)&lt;/li&gt;
&lt;li&gt;Do lucid chart 101 I guess&lt;/li&gt;
&lt;li&gt;Submit Chinese visa application&lt;/li&gt;
&lt;li&gt;Submit vote&lt;/li&gt;
&lt;li&gt;Submit gym reimbursement&lt;/li&gt;
&lt;li&gt;Find out about Chinese characters in lucid press&lt;/li&gt;
&lt;li&gt;Create registry on amazon&lt;/li&gt;
&lt;li&gt;Finish making wedding invitation&lt;/li&gt;
&lt;li&gt;Finish CSV of addresses for invitation&lt;/li&gt;
&lt;li&gt;Make Chinese version of invitation&lt;/li&gt;
&lt;li&gt;Practice Chinese song on guitar twice&lt;/li&gt;
&lt;li&gt;Go to the gym twice&lt;/li&gt;
&lt;li&gt;Change oil in car?&lt;/li&gt;
&lt;li&gt;Dive into making a new app (the music app)&lt;/li&gt;
&lt;li&gt;Message Alex and Ash about new music app plans&lt;/li&gt;
&lt;li&gt;Make actual food for dinner; have leftovers for lunch&lt;/li&gt;
&lt;li&gt;Upgrade Jenny&apos;s laptop&lt;/li&gt;
&lt;li&gt;Do food planning/shopping&lt;/li&gt;
&lt;li&gt;Update finance log&lt;/li&gt;
&lt;li&gt;Begin fasting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After making my short-term goals, I then schedule: I assign the tasks to specific days and think
about the details (e.g. the Chinese visa application has several parts I need to take care of). The
specifics of the framework are up for debate, but it&apos;s lightweight and it helps me prioritize
effectively. The goals are actually helpful and I refer back to them often.&lt;/p&gt;
&lt;p&gt;On a software development team, mid-term goals might focus on projects we&apos;re trying to complete
during the quarter. If the team practices scrum, short-term goals are just stories on the current
sprint.&lt;/p&gt;
&lt;p&gt;As a last note, remember that even the short-term goals still aren&apos;t time-bound by default, even
though they are set on a regular basis. The list of short-term goals is intended to be the complete
space of things we need to think about. As you adjust your plans from day to day, you just look at
the list and figure out which things should be done first. If you don&apos;t finish the list by the end
of the week, that&apos;s OK. On a Scrum team then, the stories you take on in sprint planning should be
everything that you hope to accomplish during the sprint, not a hard commitment on what will
actually get done. The need to make sure you&apos;re actually getting things done is handled by a
separate validation system.&lt;/p&gt;
&lt;p&gt;For further reading, consider &lt;em&gt;The 7 Habits of Highly Effective People&lt;/em&gt; (specifically,
the first three habits), &lt;em&gt;The Power of Full Engagement&lt;/em&gt; and &lt;em&gt;Essentialism&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Magnitude&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you know what to work on, how do you get it all done? There are two sides to this equation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maximize the amount of work done&lt;/li&gt;
&lt;li&gt;Minimize the amount of work needed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maximizing work done in turn has two parts: quantity (time spent working) and quality (the
effectiveness of that time). Quantity typically isn&apos;t an issue. Quality is largely affected by
motivation. The book &lt;em&gt;Primed to Perform&lt;/em&gt; gives an excellent presentation of the large amount of
research that has been done on this topic. As the authors say, &amp;quot;&lt;em&gt;Why&lt;/em&gt; we work affects &lt;em&gt;how well&lt;/em&gt; we
work.&amp;quot; The short version is that there are six common sources of motivation, three of them good,
three of them bad. You must minimize the bad motivations while maximizing the good.&lt;/p&gt;
&lt;p&gt;The good motivations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Play: the work is an end in itself; you enjoy doing it.&lt;/li&gt;
&lt;li&gt;Purpose: you value the impact the work has.&lt;/li&gt;
&lt;li&gt;Potential: the work prepares you for greater experiences later on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bad ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emotional pressure: you do the work because it affects how you or others feel about yourself.&lt;/li&gt;
&lt;li&gt;Economic pressure: you do the work to receive a reward or avoid a punishment.&lt;/li&gt;
&lt;li&gt;Inertia: you have no good reason to work; you do it simply because that&apos;s what you&apos;ve always
done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand how these motivations affect performance, you need to understand two different kinds
of performance. &lt;em&gt;Primed to Perform&lt;/em&gt; calls them tactical and adaptive performance. Tactical
performance is related to efficiency; it&apos;s how well you can execute a plan. Adaptive performance is
how well you can diverge from a plan in order to handle &amp;quot;VUCA&amp;quot; (volatility, uncertainty, complexity
and ambiguity). The more VUCA is involved in an area, the more adaptive performance is needed. All
the motivators can drive tactical performance, but the bad motivators hurt adaptive performance
while the good ones increase it. Example: giving someone a raise for a job well done (economic
pressure) might help them work faster, but it won&apos;t necessarily help them adapt to changing
circumstances.&lt;/p&gt;
&lt;p&gt;To maximize the amount of work done, we need to consciously think and talk about these motivators.
Periodically review the influence these motivators have on yourself and on your team or
organization, and figure out how to improve things.&lt;/p&gt;
&lt;p&gt;When working within a goal-setting-and-planning framework like OKRs or Scrum, be aware of how the
framework impacts these motivators. A danger of using goals for motivation is that it can undermine
the good motivations while strengthening emotional and economic pressure. You shouldn&apos;t feel bogged
down or restricted by the framework. It should be your servant, not your master.&lt;/p&gt;
&lt;p&gt;And you really should just read &lt;em&gt;Primed to Perform&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The second part of magnitude, minimizing the amount of work needed, is where planning comes in.
Part of this is simplicity in design so that don&apos;t set out to accomplish some hard, complex,
unnecessary solution. The other part is figuring out how to get N people to work efficiently
together. I have some thoughts on the latter with regard to software development, but I&apos;ll spare you
the details. The important thing is to recognize that this is a problem and you need to think hard
about how to do it best.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stephen Covey said it best in &lt;em&gt;The 7 Habits&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is much more ennobling to the human spirit to let people judge themselves than to judge them.
And in a high-trust culture, it&apos;s much more accurate. In many cases people know in their hearts how
things are going much better than the records show. Discernment is often far more accurate than
either observation or measurement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The most important thing to remember about validation is to not let it spoil your goal setting and
planning. Think about how terrible university education is. Learning is one of the most compelling
of all activities, shouldn&apos;t the opportunity to work full-time on just learning be a wonderful
thing? The problem is that formal education tries not only to teach you something but to verify and
measure your learning. General education is hit the hardest. How great it would be to spend all day
reading books that contain a distillation of the world&apos;s best thinking. Instead you have to read a
textbook filled with random facts and prepare for a multiple-choice test.&lt;/p&gt;
&lt;p&gt;So don&apos;t let that happen to your organization. If you happen to be working on something that&apos;s
measurable, then sure, measure your performance. Sales, losing weight, and your golf game are all
great candidates for measurable goals. But don&apos;t try to force a square peg into a round hole by
coming up with strange metrics for things that are better discerned.&lt;/p&gt;
&lt;p&gt;I handle validation for myself by giving a weekly color rating—green, yellow or red—to each of my
mid-term goals. I&apos;ll often give a preliminary rating once or twice during the week, but I&apos;ll give
the final rating at the end of each week. When I have non-green ratings, I then think about if
there&apos;s a problem with direction or magnitude (or neither). I might decide to give higher priority
to a goal with a red rating the following week; i.e. I modify direction. Or I might try to identify
a performance barrier that I can fix in order to increase my magnitude. Or, if my highest priority
goals are green and the reds are occurring elsewhere, I might accept it as not a problem. If I
consistently get reds on a low-priority goal, I might simply remove the goal.&lt;/p&gt;
&lt;p&gt;During validation, you should also think about the urgency of your goals. Most of the time, we want
to stay in quadrant II of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_management#The_Eisenhower_Method&quot;&gt;time-management
matrix&lt;/a&gt; described in &lt;em&gt;The 7
Habits&lt;/em&gt;. Re-prioritizing goals and eliminating performance barriers are both quadrant II activities.
However, quadrant I activities (like working overtime) are needed when urgent and important goals
are slipping. You need to decide if a goal that&apos;s slipping is becoming truly urgent and take action
if necessary. After the goal is complete, you should reflect on what you could have done to prevent
the goal from becoming urgent/what you can do in the future to prevent similar situations.&lt;/p&gt;
&lt;p&gt;And that&apos;s really all there is to it. You could easily adapt this to a team by having everyone vote
periodically on each mid-term goal and then talk about it. (You could even convert the colors to
numbers in order to satisfy people who like metrics). Or you could come up with another system. The
main thing is to remember the principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&apos;t poison your direction and magnitude systems by trying to have a heavy-weight measurable
validation system.&lt;/li&gt;
&lt;li&gt;Trust your people; rely on qualitative discernment. This will give you the liberty to avoid the
whole poison thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;From here to there&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A great way to start out could be setting a mid-term goal to have
great direction, magnitude and validation systems (and in your
planning meetings, you can rate each system from red to green!). In
summary, what questions might you ask yourself whilst evaluating your
direction, magnitude and validation systems? Perhaps these:&lt;/p&gt;
&lt;p&gt;Direction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do we spend our time on the things that are truly most important?&lt;/li&gt;
&lt;li&gt;Do we reflect on our goals regularly or do we forget about them?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Magnitude:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does everyone feel motivated?&lt;/li&gt;
&lt;li&gt;Do we have any performance barriers on an individual level? Does
everyone feel like they&apos;re working effectively? Do we spend enough
time in flow?&lt;/li&gt;
&lt;li&gt;Do we have any performance barriers on a team level? Do we plan
well and work efficiently together?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Validation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do we have an accurate understanding of our progress?&lt;/li&gt;
&lt;li&gt;Do we agree on what should be done when our progress is slipping?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Separating these needs out and talking about it periodically will help
a lot in the conversation of how we should be using goals and plans.&lt;/p&gt;
</content></entry><entry><title>Structure vs. Flexibility</title><id>https://jacobobryant.com/post/2018/structurevsflexibility/</id><link href="https://jacobobryant.com/post/2018/structurevsflexibility/" /><updated>2018-05-23T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;I&apos;ve been thinking a lot about the yin-yang relationship between
structure and flexibility. In my &lt;a href=&quot;https://jacobobryant.com/post/2017/education/&quot;&gt;education
essay&lt;/a&gt;, I talked about how one of
homeschooling&apos;s main strengths is flexibility while one of formal
education&apos;s main strengths is structure. The divide between structure
and flexibility is very deep. It can be seen in many places besides
just education.&lt;/p&gt;
&lt;p&gt;&amp;quot;The ABCs of how we learn,&amp;quot; a literature review of education research,
explains that there are two types of knowledge, which the authors call
efficient knowledge and innovative knowledge. Efficient knowledge
deals with how to refine existing tasks and solve recurring problems
more efficiently. Innovative knowledge deals with how to form new
processes and respond to novel problems.&lt;/p&gt;
&lt;p&gt;&amp;quot;Primed to Perform,&amp;quot; a book about high-performance cultures and their
underlying motivations, describes tactical performance and adaptive
performance. The authors define tactical performance as the ability to
follow a plan and adaptive performance as the ability to diverge from
a plan.&lt;/p&gt;
&lt;p&gt;In &amp;quot;The Innovator&apos;s Dilemma,&amp;quot; Clayton Christensen presents research
about two kinds of innovation: sustaining innovation and disruptive
innovation. As with the previous examples, these reflect structure and
flexibility. Sustaining innovation gives incremental improvements to
existing products while disruptive innovation creates new products
based on early-stage technology.&lt;/p&gt;
&lt;p&gt;A fundamental problem in machine learning is the
balance between exploitation and exploration. The classic formulation
of this problem is called the N-armed bandit problem. If you have N
slot-machines (aka &amp;quot;bandits&amp;quot;) with unknown payout distributions, what
strategy should you use to maximize your profit? You need to find a
balance between exploiting (playing on the slot machines that have
given the highest payouts in the past) and exploring (trying new slot
machines in the hope of finding some with higher payouts).&lt;/p&gt;
&lt;p&gt;As a final example, there&apos;s a large debate in programming language
design between static typing and dynamic typing. Statically-typed
languages provide more structure while dynamically-typed languages
provide more flexibility.&lt;/p&gt;
&lt;p&gt;In all cases, the best solution involves working in the existing,
known structure while retaining the flexibility to venture into new
areas. This needs to be done in a way that includes and improves upon
the strengths of both approaches. This is called a &amp;quot;win-win&amp;quot; solution
by Stephen Covey, and it&apos;s different from compromise. In compromise
you just find a half-way point that works well enough for both
parties, but in win-win, you come up with a creative idea that&apos;s
better than what either party had in mind to begin with.&lt;/p&gt;
&lt;p&gt;So we should think about how to reconcile structure and flexibility in
our endeavors. This is hard. In most cultures that I&apos;m familiar with
(and in my own life experiences), there seems to be a heavy bias
towards structure. In education, public school is much more dominant
that home school. &amp;quot;Primed to Perform&amp;quot; demonstrates quantitatively that
most organizations try to optimize for tactical performance at the
expense of adaptive performance. Statically-typed languages are more
popular in industry as far as I can tell.&lt;/p&gt;
&lt;p&gt;Why the bias? Is it just cultural, or is there some inherent cause? My
hypothesis is that it&apos;s inherent. If you emphasize structure and not
flexibility, you&apos;ll have solutions that work decently well, even
though they aren&apos;t as good as they could be. If you emphasize flexibility
over structure, you might have some cool ideas but you won&apos;t be able
to turn them into concrete working solutions. Structure alone beats
flexibility alone, so the bias towards structure is just evolutionary.&lt;/p&gt;
&lt;p&gt;(As an example, imagine incompetent parents trying to home school
their children vs. the standard practice of sending kids to public
school. This is where the home school horror stories come from.)&lt;/p&gt;
&lt;p&gt;We have plenty of structured solutions today, but we shouldn&apos;t stop
here. The key to moving forward is learning how to introduce
flexibility while keeping the benefits of structure. As implied above,
the best route I think is to follow the progression from 1) nothing
(no structure and no flexibility), to 2) structure only, and finally
to 3) structure plus flexibility.&lt;/p&gt;
&lt;p&gt;As we follow this progression, we can&apos;t let structure stifle
flexibility. Structure brings much improvement when moving from
nothing, so we come to view this structure as &amp;quot;validated.&amp;quot; But after
the structure is in place, flexible efforts to continue improvement
often don&apos;t fall within the structure. If the structure is followed
mindlessly, it will create a cage that restricts people from trying
out new ideas. Flexible ideas can be seen as frivolous, bad ideas
because they diverge from the already-validated structure.&lt;/p&gt;
&lt;p&gt;I felt this acutely as a missionary. We had very detailed methods for
goal-setting and planning. In our weekly planning sessions, we were
supposed to set a lot of quantitative goals and talk about prescribed
topics for how to plan around those numbers. The idea was to create an
effective system that brings predictable results. But for the majority
of my mission, it felt like the system was broken. In hindsight, I
wish I had tried to be much more creative and flexible during weekly
planning. I think we could have come up with great ideas for how to do
missionary work in a way that met the needs of the locals.&lt;/p&gt;
&lt;p&gt;So how do we avoid this pitfall? I think a few things are helpful.
First is to remember win-win. When you find two opposing ideas, the
truth usually lies in a combination of the two—not one or the other.
With static vs. dynamic typing, I believe the answer is in some
combination of the two ideas. (Clojure.spec is a good step in that
direction, though it&apos;s not all the way there yet). Remembering win-win
will make sure you seek for the real truth instead of getting stuck on
one side of a useless debate.&lt;/p&gt;
&lt;p&gt;Second is a healthy disrespect for conventional thinking. This will
help you cultivate potentially good ideas which otherwise would be
dismissed. One of Einstein&apos;s greatest strengths was that he was
perfectly comfortable challenging the accepted wisdom of the
scientific community. This allowed him to develop his theories of
relativity which broke science free from the model of Newtonian
mechanics that had governed physics for hundreds of years. Although it
would be impractical to never rely on society&apos;s accrued knowledge, we
should look for ideas that are ready to be challenged. No idea should
be considered free from the need of further validation.&lt;/p&gt;
&lt;p&gt;Third is a habit of experimentation. Any idea should be allowed as a
hypothesis, but then it needs to be tested. Existing structure
shouldn&apos;t prevent you from experimenting on new ideas, but you also
shouldn&apos;t accept new ideas before they&apos;ve been validated. My personal
goal-setting and planning system has undergone much experimentation
over the past three years. This is the process by which a lot of
potentially good ideas become a few actually good ideas.&lt;/p&gt;
&lt;p&gt;This is the key to combining structure and flexibility, and it&apos;s
basically just the scientific method. It&apos;s an effective pattern for
discovering truth in all areas, not just what we call science. There&apos;s
more work to be done incorporating it into other parts of our lives.&lt;/p&gt;
</content></entry><entry><title>How to Build the Next Tech Empire</title><id>https://jacobobryant.com/post/2018/empire/</id><link href="https://jacobobryant.com/post/2018/empire/" /><updated>2018-04-21T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;&lt;a href=&quot;https://jacobobryant.com/post/2018/dream/&quot;&gt;I&apos;ve written&lt;/a&gt; about the meaning of my life, which is to help others
spend their lives doing things that are worth all their time and attention.
This essay describes my current plans for doing that. I think that building my
own empire will be the most effective way to accomplish that at scale.&lt;/p&gt;
&lt;p&gt;First, we need to create a successful startup. This will be the
starting point of the empire. Although my current main startup idea is
a music-related, there are far bigger problems that we could start to
address as the startup scales.&lt;/p&gt;
&lt;p&gt;For one, the formal education system is highly inefficient for
programmers who want to be startup founders, at least judging by my
experience at BYU. The ratio of time and effort spent to learning
achieved is far too low. It&apos;s also too hard to meet potential
cofounders. See &lt;a href=&quot;https://jacobobryant.com/post/2018/byucs/&quot;&gt;this essay&lt;/a&gt; for more information. I&apos;ve also
written &lt;a href=&quot;https://jacobobryant.com/post/2017/education/&quot;&gt;more generally&lt;/a&gt; about problems with
education.&lt;/p&gt;
&lt;p&gt;Second, after graduating it&apos;s also been somewhat painful for me to
work full-time at a regular software company, even a good one like
Lucid. I have learned good stuff and I work with great people, but the
experience still feels watered down because the main focus is just
meeting random business needs of customers. I still have the problem
that I work there 9-5, but I come home and want to work on my other
projects. I want something instead that I can throw my whole soul
into.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;People&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First make the company the best place to work for people who want to
be startup founders. Focus on pushing the limits of technology, not
just satisfying customers and making money.[1] Make it a place where
programmers will learn tons of stuff. Also make it a good place to get
potential cofounders. Have lenient contract terms so people can work
there for a little while and then go off with other employees and make
new companies.&lt;/p&gt;
&lt;p&gt;As much as possible, try to hold on to these new companies. The company could
start turning partially into a sort-of startup incubator/investment thing. When
the new startups are related to the current company, consider acquiring them.
Diversify and grow the business like Google.&lt;/p&gt;
&lt;p&gt;Fill the funnel with good programmers by solving the earlier education problems.
See the aforementioned essay for possible solutions. Create a higher-learning
experience that is ridiculously hard but worth programmers&apos; energy. Make it
replace a typical computer science degree. Link it to the company so the
students will come work at the company after they finish (or they could
immediately create their own startup and maybe get acquired by the company).&lt;/p&gt;
&lt;p&gt;In both phases, make it something that programmers can put their whole soul into
during the time they&apos;re there. Inasmuch as they have their own ideas for
projects, this will probably involve enabling them to work on these projects.&lt;/p&gt;
&lt;p&gt;Start at the very beginning of the process. Make the introduction to
programming better for not-yet-programmers, and focus on
middle-school/high-school age people. Make bonds with the great
programmers long before other companies&apos; recruitment process even
begins.&lt;/p&gt;
&lt;p&gt;This funnel of insanely great programmers and startups will help the company
turn into a real empire. If we have the best programmers, it&apos;s only a matter of
time before we start to displace the current tech giants.&lt;/p&gt;
&lt;p&gt;Large companies have a huge weakness here: their job application processes are
long and arduous. If we can keep ours light, even as the company scales, we&apos;ll
have a major advantage in getting the best people first.
Also see &lt;a href=&quot;https://blog.samaltman.com/advice-for-ambitious-19-year-olds&quot;&gt;Sam Altman&apos;s
thoughts&lt;/a&gt; about
why working for big/high-paying companies is often a bad idea. (Search for
&amp;quot;Incidentally, don’t let salary be a factor.&amp;quot;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Business models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to relying on better programmers, we
can rely on another general strategy: better business models.
Google&apos;s business, like many in the industry, is based off advertisement. This
drives them to collect and exploit user information, often in opposition to what&apos;s actually
best for their users.&lt;/p&gt;
&lt;p&gt;So as we develop new technologies, we also should be innovative with
our business models. We&apos;ll try to figure out ways to not rely on advertisement,
but still make systems that are profitable and loved by users. (Or we could still do advertisement, but
find a way to remove the negative externalities).&lt;/p&gt;
&lt;p&gt;It would also be great to apply innovative business models to open source
development. These open-source projects are a critical part of the software
industry&apos;s infrastructure, but they have &lt;a href=&quot;https://www.fordfoundation.org/media/2976/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure.pdf&quot;&gt;major sustainability
problems&lt;/a&gt;
currently.&lt;/p&gt;
&lt;p&gt;These two strategies of better programmers/technology/innovation and better
business models will hopefully drive us to the top. Furthermore, it would
fulfill all my specific career-related life goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a successful startup&lt;/li&gt;
&lt;li&gt;Fix education&lt;/li&gt;
&lt;li&gt;Help make the tech industry great again (i.e. make it enjoyable to work in and
make it continue to push civilization forward in a sustainable way that
doesn&apos;t undermine things like freedom and privacy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] From the dedication of SICP: &amp;quot;I think that it’s extraordinarily important
that we in computer science keep fun in computing. When it started out, it was
an awful lot of fun. Of course, the paying customers got shafted every now and
then, and after a while we began to take their complaints seriously. We began to
feel as if we really were responsible for the successful, error-free perfect use
of these machines. I don’t think we are. I think we’re responsible for
stretching them, setting them off in new directions, and keeping fun in the
house. I hope the field of computer science never loses its sense of fun.&amp;quot;&lt;/p&gt;
</content></entry><entry><title>Living the Dream</title><id>https://jacobobryant.com/post/2018/dream/</id><link href="https://jacobobryant.com/post/2018/dream/" /><updated>2018-04-20T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;My (LDS) mission was a unique experience for me because we were
expected to devote all our time and attention to it. That was
extremely difficult and often unpleasant, especially at the beginning,
but it was achievable. By the end of my mission, I reached a point
where I was able to do it without reservation.&lt;/p&gt;
&lt;p&gt;College and jobs rarely are worth all your time and attention like my
mission was. In recognition of this, our culture has the standard
8-hour workday expectation. A block of time is scheduled for working
so that your employer hopefully gets a certain amount of work out of
you, and the rest of the time is free so you can do more worthwhile
things. (Unfortunately, college is less structured in that way. It
tends to suck up far too much of students&apos; time).&lt;/p&gt;
&lt;p&gt;Do you think Einstein stopped thinking about physics after 5 pm? I
doubt it. His work was worth all his time and attention.[1]&lt;/p&gt;
&lt;p&gt;This is my life goal with regard to my career: I want whatever I&apos;m
doing to be worth throwing my whole soul into (I&apos;ll call this a
&amp;quot;soul-worthy pursuit&amp;quot;). I want to be as devoted to my work as I was to
my mission. This is what &amp;quot;living the dream&amp;quot; means for me. I don&apos;t want
to be at a job until 5 and then come home to work on the side projects
that I actually care about. I haven&apos;t achieved this yet, but I&apos;ve been
longing for it.&lt;/p&gt;
&lt;p&gt;What makes something worth all your time and attention? The book
&amp;quot;Primed to Perform&amp;quot; talks about three &amp;quot;direct motivators:&amp;quot; play,
purpose and potential. Play roughly means that you enjoy doing the
task (though that&apos;s too simple of an explanation to do it justice);
this is achieved by taking advantage of your unique talents and
interests. Purpose means the task is beneficial to others. Potential
means that the task is preparing you to achieve greater play and
purpose in later experiences. The soul-worthy pursuit is the one that
maximizes these direct motivators.&lt;/p&gt;
&lt;p&gt;In &amp;quot;Man&apos;s Search for Meaning,&amp;quot; Victor Frankl discusses three sources
of meaning: 1) by doing a work or accomplishing a feat, 2) by loving
someone, 3) by suffering. Considering only the first source, this
soul-worthy pursuit is the meaning of your life.&lt;/p&gt;
&lt;p&gt;There are two challenges: first, you must discover your soul-worthy
pursuit. Second, you must pursue it. What is my soul-worthy pursuit?
First I&apos;ll list some observations, and then I&apos;ll state my current
answer to that question.&lt;/p&gt;
&lt;p&gt;I love programming. I love thinking creatively and logically. I love
thinking about radical ways to make systems better. I love music and
the deep emotions it brings to me. I&apos;ve noticed problems in life that
I want to fix. Music recommendation systems aren&apos;t as good as they
could be. I want to create a startup to fix that. As I&apos;ve worked
towards that goal, I&apos;ve seen problems that are much deeper. Preparing
for the startup by going to college and getting a temporary full-time
job have caused me to have as main responsibilities things that aren&apos;t
worth all my time and attention. This comes from a combination of
inefficiency (especially in college) and focusing on problems that I
don&apos;t really care about (especially at work).&lt;/p&gt;
&lt;p&gt;That being said, I&apos;m done with college already and I&apos;ll be done with
my job soon enough too. But I still care about these problems. I don&apos;t
want other people (for example, my future kids) to spend so
much time and energy on things that aren&apos;t worth it for them.&lt;/p&gt;
&lt;p&gt;I believe the meaning of my life is to help others find and fulfill
their soul-worthy pursuit.[2]&lt;/p&gt;
&lt;p&gt;The inefficiency problem can be solved just by building a better
system, about which I&apos;ve already written with regard to education. But
the need to work on problems you don&apos;t care about seems much more
deeply rooted. It comes from the fundamental problem that there&apos;s more
supply for things that are enjoyable to do. The high-paying tasks are
often the ones that people don&apos;t want to do. How can this be solved?&lt;/p&gt;
&lt;p&gt;The key is in our individual differences, specifically our talents and
interests. If everyone was the same, the problem would be unsolvable.
Some people would have to do the jobs that nobody likes, and those
people would get paid more. But inasmuch as people have differences,
we can take advantage of those differences to increase the amount of
play people can experience. In this imperfect world, this will only be
possible to a degree. There will always be things that need to be done
that no one wants to do. But the key is to maximize the amount of
energy people spend on soul-worthy pursuits. This is the meaning of my
life.&lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] I do mean this within reasonable bounds; people need time to
spend on other needs like relationships, sleep, food, fun, etc.&lt;/p&gt;
&lt;p&gt;[2] This is a variation of Victor Frankl&apos;s, which he said was
to help others find the meaning of their life.&lt;/p&gt;
</content></entry><entry><title>Relationships</title><id>https://jacobobryant.com/post/2018/relationships/</id><link href="https://jacobobryant.com/post/2018/relationships/" /><updated>2018-02-15T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I don&apos;t take personality tests as gospel, but this section of my personality
type description from &lt;a href=&quot;https://www.16personalities.com/intj-relationships-dating&quot;&gt;16personalities.com&lt;/a&gt; made me laugh:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In romance, people with the INTJ personality type approach things the way they
do with most situations: they compose a series of calculated actions with a
predicted and desirable end goal – a healthy long-term relationship. ... INTJs
... break the dating process down into a series of measurable milestones,
then proceed to execute the plan with clinical precision.&lt;/p&gt;
&lt;p&gt;In a purely rational world, this is a fool-proof methodology – but in reality,
it ignores significant details that INTJs are likely to dismiss prematurely,
such as human nature. ... Needless to say, finding a compatible partner is
the most significant challenge most INTJs will face in life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other news, I&apos;ve been developing a new theoretical model for evaluating
relationships. Even if relationships can&apos;t necessarily be reduced to logic,
it&apos;s fun to try.&lt;/p&gt;
&lt;p&gt;My new model is still in the hypothesis/figuring-it-out stage, but I have enough ideas so far that
it&apos;s worth writing about at least. I&apos;ve been prompted by two thoughts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;potential mates should be evaluated based on chemistry, not lists of desired attributes.&lt;/li&gt;
&lt;li&gt;humans have four main dimensions: physical, intellectual, emotional and spiritual.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first point was recently emphasized by a couple from my ward, and it sounds true to me. I got
the second idea from Stephen Covey (he writes about it in both &amp;quot;The 7 Habits&amp;quot; and &amp;quot;The 8th
Habit&amp;quot;) and from &amp;quot;The Power of Full Engagement.&amp;quot;&lt;/p&gt;
&lt;p&gt;My model is as follows. Consider two potential mates, Alice and Bob. To have a strong relationship,
they must both be individually healthy in all four dimensions, then they must be united in all four
dimensions. Compatibility means they have the potential to be united in all four dimensions, but
achieving that unity will still require time and effort.&lt;/p&gt;
&lt;p&gt;The individual-health-before-mutual-unity idea follows Covey&apos;s model where independence precedes
interdependence.&lt;/p&gt;
&lt;p&gt;I think what it means to be physically, intellectually, emotionally and spiritually healthy is clear
enough. But how can we gauge unity in those areas (in terms of a pre-marital relationship)? I&apos;ve
thought of a few simple questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;physical: how much are Alice and Bob attracted to each other?&lt;/li&gt;
&lt;li&gt;intellectual: how well do they communicate? Are their conversations engaging for both parties?&lt;/li&gt;
&lt;li&gt;emotional: how much do they enjoy being together? When apart, how much do they miss each other/look
forward to being together again?&lt;/li&gt;
&lt;li&gt;spiritual: how well matched are they in terms of maturity and life experience? How well do their
core values and basic philosophies about life mesh?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My goal is that using this model will help to make decisions about whether or not to pursue a
potential mate. I don&apos;t necessarily believe the model will help in knowing &lt;em&gt;how&lt;/em&gt; to pursue a
relationship, though. If Alice is a fellow INTJ and finds that she doesn&apos;t feel very emotionally
attached to Bob, she may be tempted to plan activities that will help strengthen emotional unity.
However, this probably falls in the realm of &amp;quot;overthinking it,&amp;quot; and I think it promotes
self-absorption—Alice is being overly concerned with her own thoughts and feelings when she should
focus more on Bob&apos;s needs. Probably the best strategy is to not worry about it so much and be
patient. But perhaps the model could be helpful in taking the relationship&apos;s pulse every now and
then.&lt;/p&gt;
</content></entry><entry><title>How to Improve CS Education at BYU</title><id>https://jacobobryant.com/post/2018/byucs/</id><link href="https://jacobobryant.com/post/2018/byucs/" /><updated>2018-01-06T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;In December 2017 I graduated from BYU with a CS degree. I had a good education, but
I&apos;ve thought a lot about how to make things better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Summary: students don&apos;t have enough time to work on personal projects, and
there isn&apos;t enough peer-to-peer interaction. We can solve both these problems
by allowing them to either 1) get more credit for personal projects or 2) work
on personal projects as a part-time job, and by facilitating
collaboration on these projects.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First pain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My education has benefited greatly from three separate areas: classes, jobs and
personal projects. Unfortunately, it was difficult to find time to work on my
own projects. These projects are beneficial for several reasons.&lt;/p&gt;
&lt;p&gt;First, you choose what to build, so you can learn about things that interest
you. That helps build enduring motivation. Furthermore, you aren&apos;t restricted to
what the curriculum offers. For example, the current curriculum emphasizes
object-oriented programming, but there&apos;s almost no mention of functional
programming. I learned functional programming by using Clojure in my personal
projects.&lt;/p&gt;
&lt;p&gt;Second, because personal projects aren&apos;t so deadline-driven, you can afford to
spend time learning in an exploratory style instead of just trying to complete
the requirements as quickly as possible (as opposed to class projects which
often result in ugly code). You can take time to learn the best, most elegant
way to do things.&lt;/p&gt;
&lt;p&gt;Finally, personal projects potentially have real users. You can practice
identifying users&apos; needs, coming up with a possible solution, getting feedback
and revising the solution. You can find out how hard getting users is but how
gratifying it is to build something that improves their lives. This is a
powerful experience.&lt;/p&gt;
&lt;p&gt;But between a full load of classes and a part-time job, there&apos;s not much free time
left over for personal projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second pain&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Networking with other students is also critical. As a would-be startup founder,
I need to build relationships with potential cofounders. But regardless of
specific life goals, everyone needs to know other capable students. This
results in better opportunities to work on important things together later on.
However, I hardly knew any of the other CS students. The core curriculum
doesn&apos;t foster much student interaction. There are extra-curricular activities
like clubs and hackathons, but I rarely had time for those things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The general solution to this problem is to help students carve out time for
personal projects and to facilitate collaboration on those projects (there&apos;s no
better way to know someone else than to work with them).&lt;/p&gt;
&lt;p&gt;For students to have time for personal projects, the projects need to replace
either some classes or a part-time job. (Replacing a social life would be another
option if any CS students had one). There are two possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Give students credit for personal projects. For example, a student could be
allowed to get up to 3 credits per semester for these projects. This option
obviously would have to be implemented by the CS department.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pay students to work on personal projects. Instead of having a normal
part-time job, they could be sponsored by a company to work on their project
outside of classes. This could be a valuable recruiting opportunity for
companies. Summer internships already provide industry experience for
students, so students wouldn&apos;t be missing out by not having a regular
part-time job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To facilitate collaboration, students need a way to freely share ideas about
projects and form teams. One possibility is a Slack workspace dedicated to
personal projects. Each project has its own channel which is used for progress
updates and other communication about the project. Students can browse current
projects, and they can join one or make their own.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Students can already get some credit for personal projects by taking various
upper-level classes (CS 497R and 498R, and possibly 494 and 495), but you can&apos;t
take more than two semesters of them. I took two semesters of 497R and it was a
great experience. A good strategy for the CS department could be pushing more
students to take classes like these and gradually allowing students to take them
for more semesters.&lt;/p&gt;
&lt;p&gt;I recommend that the department create a Slack workspace like the one mentioned
above and advertise it in their department emails. It would be a place where
students could form teams and then apply for 497R and 498R projects together.
If results are good, the department then can work on setting up a better system
for these projects so there isn&apos;t a large burden put on faculty mentors. Then
the department could start increasing the number of semesters that students can
do these projects for, and they could start pushing younger students to
participate.&lt;/p&gt;
&lt;p&gt;For companies, I recommend taking advantage of CS 494 and 495, the capstone
courses. But instead of giving students a project to work on, let them submit
applications to work on their own projects. Help students form teams and choose
the best projects for them to work on. This would help the company identify and
attract full-time job candidates, and the students that do join full-time will
be able to give better referrals. If things go well, the system could be scaled
up by paying students to do the same things as a part-time job.&lt;/p&gt;
</content></entry><entry><title>Big Ideas (rough draft)</title><id>https://jacobobryant.com/post/2017/startups/</id><link href="https://jacobobryant.com/post/2017/startups/" /><updated>2017-12-07T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;Problem/solution pairs are listed in the order in which I thought of
them as I wrote this post. This is meant to be a listing of all the
ideas I want to implement, but it doesn&apos;t contain full descriptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: For people who want to create startups, it&apos;s hard to meet and
network with potential cofounders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: A networking website where people can talk about
ideas for projects they want to do/are already working on. Websites
like founderdating.com focus explicitly on finding cofounders, but
this website would just focus on facilitating discussion about
interesting projects. Finding cofounders would just be a side effect.
We&apos;d especially try to facilitate discussion between people who are
geographically close together and who don&apos;t know each other, but it&apos;d
also be useful for people who already know each other to keep up to
date on each others ideas/projects. Market it especially towards
university students.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: The education system sucks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: See &lt;a href=&quot;https://jacobobryant.com/post/2017/education/&quot;&gt;my post on education&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Specifically, CS education could use a lot of improvement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: For BYU specifically: allow students to get
more credit for working on their own projects. Facilitate students
working together on these projects. Outcomes: 1) students network with
each other, 2) students learn to work on teams, 3) students get
a better learning experience instead of having to learn everything
through coursework. Coming soon: An in-depth post on my
recommendations to improve BYU&apos;s CS program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Also specifically, it&apos;s hard for people to learn programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: An online resource that provides an
overview/roadmap of the software field. It would describe different
things you can do with programming and what things you need to learn
to get there. It would contain links to other resources that you could
use to actually learn the material described in the roadmap. As
needed, we could create our own online courses that are tailored to
beginners. See &lt;a href=&quot;https://jacobobryant.com/prog/roadmap/&quot;&gt;roadmap&lt;/a&gt;.
Short term strategy: market to parents of homeschooled middle/high
school aged kids as a multi-year computer science curriculum. Mid-term
strategy: Extend into the university level computer science space.
Market the product as a better alternative to getting a bachelor&apos;s
degree in CS. Long-term strategy: Use this project as a foot in the
door to implementing the &lt;a href=&quot;https://jacobobryant.com/post/2017/education/&quot;&gt;education
scheme&lt;/a&gt;. Displace
university education in general, in addition to probably high school
and middle school.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Listening to music you like/finding new music/managing music
collections still takes too much time and effort.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: A music app with a better recommendation
algorithm. Only input is skip track or keep listening. The app learns
what songs to play based on your history. Also the app integrates
multiple streaming/cloud services with your local music collection.
All your music in one place, and it knows exactly which song to play
without you having to choose a station or anything.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: It&apos;s hard to create production quality music without selling
your soul to a record label. Corollary: music consumption is heavily
restricted by copyright.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: Open-source the music making process. Create some
sort of &amp;quot;Github for musicians.&amp;quot; Make it so musicians can succeed just
fine without record labels. Especially focus on amateur musicians.
Hopefully we can create a system where musicians can thrive but
digital music can also be free.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: It takes too much time/effort to be politically active.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution hypothesis&lt;/strong&gt;: A politician recommendation system. You tell
the system what issues are important to you and what your stances are.
The system helps you to use your vote wisely. It knows what
politicians you&apos;re eligible to vote for. It uses the politician&apos;s
voting record to show how well they represent your political
preferences. This creates accountability for the politicians.&lt;/p&gt;
</content></entry><entry><title>Education</title><id>https://jacobobryant.com/post/2017/education/</id><link href="https://jacobobryant.com/post/2017/education/" /><updated>2017-04-10T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;A wise person once said, &amp;quot;Never let school get in the way of your
education.&amp;quot; [1] I was home schooled up until I started
college, and now I&apos;ve almost finished my Bachelor&apos;s degree. The
contrast between the two experiences has been enlightening. Although I
tend to be more favorable towards home schooling, both environments
have their advantages.&lt;/p&gt;
&lt;h3&gt;Home school&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Freedom&lt;/strong&gt;. My dad introduced me to programming when I was 10 or 11,
and in 9th and 10th grade my learning accelerated a lot in that area.
It was easy for me to spend lots of time on computers and programming
because we chose the curriculum. Anything that was educational
could be a core subject. I got to pour lots of time into learning
about things I loved. I started to care a lot about my education, and
I became ambitious.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;. This goes hand-in-hand with freedom. I learned about
computers in spurts. When I thought of an idea for a program to write
or some other project to do, I would work on it many hours each day
for two or three weeks. During those times, I stopped working on other
subjects. After I completed the project, I then would catch up in
math, science, English, etc. My schedule adapted to fit my needs
instead of the other way around. [2]&lt;/p&gt;
&lt;p&gt;There was also flexibility on a larger scale. I took geometry in 9th
grade. It came easily to me, so I finished it quickly and did algebra
2 in the same year. The next year I was able to go right into
pre-calculus. This was completely natural because I didn&apos;t have to be
in sync with a class; I could go at my own speed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;. I learned programming from the internet (mainly
through Google). I learned math from watching short DVD lectures and
then working through problems on my own (eventually I started reading
the teacher&apos;s manual instead of watching the lectures because it was
faster). I watched video lectures from a man who loved history, and he
made it a great experience. There are many ways to disseminate
information, and home schooling made it easier to do it in the most
efficient way for each subject. In addition, learning alone is often
easier for me. I could stop and think about things that
don&apos;t make sense or speed through the parts I already got.&lt;/p&gt;
&lt;p&gt;This experience was largely undiluted by homework assignments or exams
which often consist of busy work and aren&apos;t beneficial to learning.
Formal education tries to teach you stuff, but it also tries to verify
that you&apos;ve learned that stuff. Or at the very least, it tries to make
sure you&apos;ve expended a certain amount of time and effort in activities
that are related to the subject material. The effort to provide
verification often hurts the teaching process, but I was mostly free
from that in home school. I had to take a standardized test from
California every year, but it was easy.&lt;/p&gt;
&lt;h3&gt;University&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Social interactions&lt;/strong&gt;. I never spent a ton of time interacting with
peers until I started my mission. I developed a lot of close
friendships, many of which are still active since many from
my mission came to BYU. I also had tons of fun. I never had that kind
of social experience while I was home schooled. Being at a university
with lots of friends has been great too.&lt;/p&gt;
&lt;p&gt;To be fair, my lack of a social life before my mission was probably
due mostly to me being heavily introverted and living in a rural area.
But being part of a formal education system does give you more
opportunities to be with friends.&lt;/p&gt;
&lt;p&gt;Actually, I think meaningful social interactions are the main inherent
advantage of a formal education system. Books and the internet just
can&apos;t replicate conversations with other people.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exposure&lt;/strong&gt;. A structured system with required courses makes sure you
get a broad education instead of becoming too specialized. I learned a
lot of good things from my university courses that I probably wouldn&apos;t
have chosen to learn about otherwise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt;.
As much as I hate homework and exams for reasons stated above, they
can be helpful to make sure you actually do stuff. There was
accountability while I was home schooled; it was just less structured.
I liked the self-motivated, independent nature of home schooling, but
I think it&apos;s also valuable to be able to function in a system with
harder constraints. Deadlines can certainly be helpful when you&apos;re
lacking motivation.&lt;/p&gt;
&lt;h3&gt;What to do&lt;/h3&gt;
&lt;p&gt;Here is my grand vision. It&apos;s still pretty general, so you&apos;ll have to
mentally fill in the blanks on your own for now. I&apos;ve purposefully
left some details not figured out yet because I&apos;m going for the big
picture.&lt;/p&gt;
&lt;p&gt;Imagine a high school or university where only half of your time is
spent in classes. You would be expected to spend the rest of the time
on educational projects that were largely up to your own devising.
These projects could be all sorts of things, and they could be large
(like learning to make a website from scratch) or small (like reading
a book and writing an essay about it). They would allow you to branch
out and explore topics that might interest you. They would also let
you dig deeper into topics that you already like.&lt;/p&gt;
&lt;p&gt;At a high level, the idea would be to take the euphoric home school
experience I&apos;ve described and simply encapsulate it within a formal
education system. The school could somehow provide opportunities for
students to connect with other students that are interested in similar
topics. Teachers would act more as mentors and less as lecturers. They
would also provide accountability because the individual projects
would need to be approved and given a final grade by a faculty
mentor. [3]&lt;/p&gt;
&lt;p&gt;This connecting with peers and mentors is worth emphasizing. I&apos;m not
talking about simply doing group projects where you divide up the task
evenly and get it done as quickly as possible. I&apos;m thinking of a less
formal type of interaction that stimulates and motivates/inspires
those involved. If you&apos;ve read the 7 Habits of Highly Effective
People, the thing I&apos;m describing is called synergy. It&apos;s hard to
define (it&apos;s been a while since I&apos;ve read that book...), but I think
most people have experienced it at one point or another. It&apos;s the
feeling you might have when staying up late, talking to a room mate
about an exciting idea you just had.&lt;/p&gt;
&lt;p&gt;This is the big thing home school lacks. University could also do a
lot better at it—being buried in course work all the time isn&apos;t very
conducive to those kinds of experiences.&lt;/p&gt;
&lt;p&gt;This hybrid system would have the advantages of both formal education
and home schooling in addition to extremely meaningful social
interactions that are currently lacking in both systems. It would give
students a more diverse experience: they would learn to function with
hard constraints, but they would also learn how to excel when it&apos;s all
up to you. They&apos;d have flexibility because course work would take up
only part of their time instead of all of it.&lt;/p&gt;
&lt;p&gt;But most importantly, this system would help students gain a deep
appreciation for learning. That would give them the drive to
accomplish great things no matter what system they find themselves in
down the road.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] This is the format I always use when quoting myself.&lt;/p&gt;
&lt;p&gt;[2] In fact, I&apos;m currently putting off school assignments so I
can finish this essay. This is only possible because I&apos;m at the end of
the semester and I&apos;ve already completed all my major projects. I
usually don&apos;t have this liberty.&lt;/p&gt;
&lt;p&gt;[3] There is precedent for these kinds of projects, at least
in university. I&apos;ve been able to get six credits for working on a
research project of my own devising, and it&apos;s mentored by one of the
computer science faculty. But that&apos;s only 5% of all the classes I have
to take. The new system would make these experiences a major part of
the core curriculum.&lt;/p&gt;
</content></entry><entry><title>I Heart Dropbox</title><id>https://jacobobryant.com/post/2017/dropbox/</id><link href="https://jacobobryant.com/post/2017/dropbox/" /><updated>2017-04-06T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;The shift to running application software on the server side
has obviously simplified development and deployment a lot. Storing the
data server-side is a natural thing to do also. But the problem with
this setup is that the user has less control. The data is in the hands
of the application provider.&lt;/p&gt;
&lt;p&gt;I&apos;m working on a &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.jacobobryant.moody.vanilla&quot;&gt;music player
app&lt;/a&gt;
for Android as part of a research project. However, the app can only
access music stored in the device&apos;s central media database. A lot of
users have their music stored away in Google Music, Amazon Music, etc.
My app doesn&apos;t work for them.&lt;/p&gt;
&lt;p&gt;What if everyone used Dropbox to handle data syncing and web
applications didn&apos;t bother about data storage? I don&apos;t see any reason
why web applications like Google Docs couldn&apos;t operate on local files.
There may be security concerns since the applications would need to
interact more with your file system, but that shouldn&apos;t be a show
stopper. There wouldn&apos;t be a loss of convenience since Dropbox would
sync the data for you, but the user would have more control since
their data wouldn&apos;t be tied to any particular software. They wouldn&apos;t
even have to depend on Dropbox if a good competitor came along.&lt;/p&gt;
&lt;p&gt;Dropbox does need some improvements, especially for mobile devices.
Currently (on Android, at least) the official app doesn&apos;t actually
sync the files to your phone&apos;s file system. The files are only
available from within the Dropbox app. &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ttxapps.dropsync&amp;amp;hl=en&quot;&gt;There is an app&lt;/a&gt;
to fix that, and it works wonderfully. I can take a picture with my
phone and it immediately gets synced to the file system on my
workstation. However, it&apos;d be better if we didn&apos;t have to rely on a
third party for this.&lt;/p&gt;
&lt;p&gt;But as issues like that get ironed out, I think it could work
great to factor out data syncing into a single service like Dropbox.
All your data would be consolidated on your file system instead of
being spread out across a bunch of separate applications, and
developers (like me) wouldn&apos;t have to deal with implementing data
syncing.&lt;/p&gt;
</content></entry><entry><title>Whosoever Will Lose His Life</title><id>https://jacobobryant.com/post/2017/service/</id><link href="https://jacobobryant.com/post/2017/service/" /><updated>2017-01-22T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;&lt;em&gt;Based on a talk given in a YSA sacrament meeting&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What can I tell you about service that you haven&apos;t already heard?
That&apos;s the question I&apos;ve tried to answer as I&apos;ve studied for this
talk. I&apos;ve identified at least two different angles we can view
service from. The first is what I call &amp;quot;along the way&amp;quot; service.&lt;/p&gt;
&lt;p&gt;I believe we all have opportunities to do good for others every day.
These opportunities are often small things, and it can be easy to miss
them if we aren&apos;t looking. But when we think of service, these
opportunities are what often come to mind.&lt;/p&gt;
&lt;p&gt;I can think of several times when I have received service along the
way from others. One of the times in my life when I felt the most love
from another person happened while I was a missionary in Singapore. We
had church from 1:00 to 4:00, and we often didn&apos;t get around to having
lunch before hand. It was probably because we were just disorganized,
but instead I&apos;ll use the excuse that we probably missed lunch because
we were just working so hard all the time. In either case, we would
suffer until the end of church at which point we could go home and eat
an early dinner.&lt;/p&gt;
&lt;p&gt;On one particular Sunday, one of the members approached us after
sacrament meeting. She had made sandwiches for all the missionaries.
That was pretty substantial too, because at the time there were seven
missionaries in that ward. I was astounded by that sandwich. I don&apos;t
think she knew we skipped lunch, but obviously the Spirit knew. It&apos;s
hard to describe how grateful I was to that sister for that sandwich.
After Sunday school and into the beginning of Elder&apos;s quorum, I tried
to unwrap and eat it without making too much noise. It was a great
sandwich—it even had lettuce and tomatoes and stuff like that.&lt;/p&gt;
&lt;p&gt;There have been many other times when people have served me. One
companion I had made smoothies for the two of us every morning. Last
semester, I had a roommate named Kaycen who often cooked for us and
other people like his home teachees. I was exceedingly astonished
because he had the ability to make a whole pan of cinnamon rolls and
give them all away without leaving a single one for himself. I asked
him how he could do something like that. He said that seeing the
happiness in other people when he gave them the food made it worth it
to him. I thought that was profound.&lt;/p&gt;
&lt;p&gt;By the way, I do realize that all my examples involve food, and no, I
don&apos;t know why. I&apos;ve heard about these five love language things. I
don&apos;t remember what they are, but food must be one of them, and maybe
my love language is just food. Or perhaps more plausibly, good food is
a need that I often neglect myself. Before my mission, I sort of lived
on cereal and toast because I was too lazy to prepare real food for
myself. The need to eat was always pitted against my dislike of
preparing food, so I would just not eat. Eventually the need to eat
would increase enough that I would finally give in and find whatever
was quickest to make. Hence, toast and cereal. In the MTC, I gained 15
pounds just because I started to eat regular meals again.&lt;/p&gt;
&lt;p&gt;So now that you understand that about me, you can see why I really
appreciate other people making good food for me. It fulfills a need
that is often neglected. When your charitable actions meet the needs
of those whom you serve, that is when you will have the greatest
impact.&lt;/p&gt;
&lt;p&gt;Jesus, of course, offers the perfect example of this service. He &amp;quot;went
about doing good.&amp;quot; But although his life was filled with various acts
of service, there was one primary act that He came to earth to
accomplish: the Atonement. This was the supreme act of service that
only He could do. All the other good He did was an appendage to that
great act.&lt;/p&gt;
&lt;p&gt;Like Christ, our lives can and should be filled with everyday acts of
kindness. But I believe there can be more to it then that. I believe
that each of us has an important mission to fulfill in this life. If
we focus on that mission, it will become more clear how our entire
lives can be dedicated to others.&lt;/p&gt;
&lt;p&gt;I recently finished reading a book called &amp;quot;The Wise Men: Six Friends
and the World They Made.&amp;quot; It&apos;s about six people who were responsible
for much of America&apos;s foreign policy after WWII and beyond. I had
never heard their names before reading the book, but after I finished,
I felt touched by the lives they had led. To me, this was not a book
about 20th century American foreign policy. It was a book about
individuals who had worn out their lives in service to their fellow
citizens. They certainly had character flaws, but together they
accomplished things that no one else would have.&lt;/p&gt;
&lt;p&gt;Another book I highly recommend is &amp;quot;Mormon Scientist,&amp;quot; the biography
of Henry J. Eyring, father of Henry B. Eyring. He found something that
he loved—science—and he dedicated his life to it. Although I&apos;ve
forgotten many of the details in that book, I haven&apos;t forgotten the
impressions that were made on my mind by this man&apos;s example. He was so
dedicated to his profession, but it was all rooted in a deep concern
for those around him. There were people who had only met him for a few
minutes, but the love they could feel emanating from him in that short
amount of time had a profound impact on their lives. He also was a
staunch advocate of the compatibility between science and religion.
His ideas on this subject are a great service to many, including
myself. Few other people have the ability to render that kind of
service.&lt;/p&gt;
&lt;p&gt;I love reading books like this because they give me so much
inspiration to do similar things with my own life. It&apos;s easy to get
caught up in the daily grind, focusing on the next assignment that&apos;s
due. But these books make me excited, which by the way, is something
that doesn&apos;t happen very often. They make me think that I really could
change the world, too.&lt;/p&gt;
&lt;p&gt;That being said, we don&apos;t have to accomplish great things in the eyes
of the world for our lives to be successful. As a matter of
coincidence, the things I want to do with my life do have the side
effect of making me rich, famous and powerful, but that&apos;s not the
point. All those things are only appendages to the greater goal I have
of an eternal marriage and raising my future children in
righteousness. (Speaking of which, I am single. Just throwing that out
there).&lt;/p&gt;
&lt;p&gt;You may have heard the idea that this period of our lives is a
&amp;quot;selfish&amp;quot; time. A lot of our time is spent focused on ourselves as we
pursue our education and careers. Maybe that idea is prevalent because
we don&apos;t have our own families yet. In any case, I do agree that we
should seek to fill our lives with acts of along-the-way service, but
I don&apos;t think the purpose of that is to counterbalance all the time we
&amp;quot;selfishly&amp;quot; spend doing homework. Instead, I think we should frame our
lives in terms of service to others. We can make the end goal of all
our current labor to bless the lives of other people, especially our
future families. If that becomes the main focus of daily labors, it
will also become easier to see the chances we have to lift others
along the way.&lt;/p&gt;
&lt;p&gt;I think President Monson is a great example of this kind of life. He&apos;s
been in full-time service for the church for eons, but we also hear of
how he takes the long way home, ministering to the one as he goes.
This kind of lifestyle demonstrates what service is all about.
Sometimes when I think of service, the first thing that comes to my
mind is service projects. And then I think about standing around not
knowing what to do because there are 50 people and it&apos;s really hard to
organize 50 people. But service can be so much more than that. A
description of service that I like is &amp;quot;love in action.&amp;quot; That sheds
light on just how important service really is. Service is the method
by which we exercise charity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For whosoever will save his life shall lose it; and whosoever will
lose his life for my sake shall find it. For what is a man profited,
if he shall gain the whole world, and lose his own soul?&amp;quot; (Matthew
16:25-26).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Choosing to
dedicate our lives to the service of others will leave us with a
reward far greater than we can imagine. Our own trials will become
less important, and we will receive strength from God to overcome them
with joy. (You might say that all your wildest dreams will come true).&lt;/p&gt;
&lt;p&gt;I thought it might be fun to explain the practical side of how I&apos;m
trying to do this myself. If you&apos;ve haven&apos;t read the 7 habits of
highly effective people, I would get a copy and read it. Besides the
scriptures, it&apos;s probably the only book that I genuinely think
everyone should read. I read it right after I got home from my
mission, and it gave me a deeper understanding of all the planning and
goal setting we did. Fun fact: weekly and daily planning wasn&apos;t
invented by Preach My Gospel (that blew my mind when I found it out).&lt;/p&gt;
&lt;p&gt;Anyway, as per the advice of that book, I have a personal vision.
Every week I review my vision and I use it to articulate the things I
want to do in the upcoming week. A few weeks ago I made a major
revision to my personal vision. I thought about the main things I want
to accomplish with my career, and I thought about how those things
serve others. I came up with a list of five things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;increase access to good music&lt;/li&gt;
&lt;li&gt;support our freely available software infrastructure&lt;/li&gt;
&lt;li&gt;help others to find a love of computers and programming&lt;/li&gt;
&lt;li&gt;advocate privacy and security&lt;/li&gt;
&lt;li&gt;support companies that have integrity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those things might be revised as I go along, but right now they help
me to see how all the time I spend doing &amp;quot;non-spiritual&amp;quot; stuff is
really about helping others. More importantly, it will help me to make
life decisions. Although I do like the idea of having wealth, fame and
power, I don&apos;t want to sacrifice what really matters in their pursuit.
As the scripture in Jacob 2 goes,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before ye seek for riches, seek ye for the kingdom of God. And
after ye have obtained a hope in Christ ye shall obtain riches, if
ye seek them; and ye will seek them for the intent to do good—to
clothe the naked, and to feed the hungry, and to liberate the
captive, and administer relief to the sick and the afflicted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&apos;d like to close with one experience that I have had. During my
senior year of high school, I was trying to learn the New Testament
scripture master verses. I wanted an app on my phone that would show
the verse and then incrementally blank out some of the words so you
could memorize it gradually. This was before the church made their
official scripture mastery app, and at the time, there weren&apos;t any
good ones available, at least not for Android. I am a computer science
major, and I have loved writing software for a long time. So, I
decided to make my own scripture mastery app. It was a lot of fun and
it helped me to learn the verses. I made it freely available on the
Android app store. It got over a thousand downloads, so that
was cool. It looks good on my resume.&lt;/p&gt;
&lt;p&gt;Then one day, I got an email from someone named Tony. He was from
Austin, Texas and he was thanking me for making this app. He believed
it was doing an enormous amount of good in helping people to learn the
scriptures, and he said I would be amazed one day when I finally get
to see all the lives upon which I had had a positive influence. Since
then, I&apos;ve had a lot of success related to my career and education,
but so far, none of it brings me as much joy as when I get those
opportunities to use my talents to do good for others.&lt;/p&gt;
&lt;p&gt;As we make Christ the center of our lives, our lives can become
dedicated to service just as His was. We will be blessed with
opportunities to use our talents to help our brothers and sisters.
Opportunities for small acts of kindness along the way will come
naturally. And with these opportunities will come the joy and peace
that only true disciples of Christ enjoy. In the name of Jesus Christ,
amen.&lt;/p&gt;
</content></entry><entry><title>Review: The Wise Men</title><id>https://jacobobryant.com/post/2017/wise-men/</id><link href="https://jacobobryant.com/post/2017/wise-men/" /><updated>2017-01-13T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I recently read &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Wise_Men_(book)&quot;&gt;The Wise Men: Six Friends and the World They
Made&lt;/a&gt;. It&apos;s a book about a
handful of people in the WWII era who worked together to shape US foreign
policy. It&apos;s a long, detailed book, but I enjoyed it. It gives a view from the
eyes of real people who made history. In addition to being informative, this
book showed that a few people really can change the world. The ending was
particularly powerful. I was inspired by the life stories of these six people.
Each of them served their country diligently until the end. I felt gratitude
towards them. It caused me to more deeply ponder what I want to accomplish with
my own life. The book made me realize how greatly we need good people who
dedicate their lives to the service of others.&lt;/p&gt;
</content></entry><entry><title>Nearer, Dear Savior, To Thee</title><id>https://jacobobryant.com/post/2016/nearer/</id><link href="https://jacobobryant.com/post/2016/nearer/" /><updated>2016-03-14T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;I recently performed the hymn &amp;quot;Nearer, Dear Savior, To Thee&amp;quot; in church. I
adapted it from &lt;a href=&quot;http://www.musicbyandrew.ca/nearerdearsavior.html&quot;&gt;a
great arrangement&lt;/a&gt; by Andrew Hawryluk. I condensed the choir parts into a
clarinet solo, adding some ornamentation to the third verse. The piano part is
the same. In addition to the PDF, I&apos;ve included the lilypond source code so
others can modify it further if desired.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/UZGZVB8yUJs&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;To anyone thinking about performing this, I would recommend taking out a phrase
or two somewhere in the middle to give you a chance to catch your breath
(perhaps rest in measures 67-70 and let the piano take over). The run in
measure 82 was intended as a quick glissando, but I stretched it out to make it
easier to play. The score I made is sparse on dynamics and articulation, so
think about how you want to play it. The video will show you how I chose to do
it. Lastly, the original score is already sharp-heavy, and the transposition to
Bb only adds to the fun. So hopefully you know your scales :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2016/nearer/clarinet.pdf&quot;&gt;pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2016/nearer/clarinet.ly&quot;&gt;lilypond source code&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>Money Management</title><id>https://jacobobryant.com/post/2016/money/</id><link href="https://jacobobryant.com/post/2016/money/" /><updated>2016-02-22T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I made an awesome new budget thing last week. I hesitate to call it a budget
because that word has connotations of strict categories for all expenditures,
careful logging, etc. I find those things aren&apos;t helpful to me. Those might be
needed in a situation where you have to coordinate between different people
(e.g. a family, a business, the church), but I&apos;ve found those types of system
to be unhelpful for me personally.&lt;/p&gt;
&lt;p&gt;In my plan, I first estimate how much my needed, recurring expenses are (e.g.
rent, food, clarinet lessons) and then lump them all together. I figured out
that I need about 70% of my paycheck to cover all of them. So that&apos;s one big
category. Then I divvy up the rest of my paycheck based on percentages. 10% for
tithing, 10% for withheld taxes (which I eventually get back, it turns out) and
5% each for savings and &amp;quot;things I want but don&apos;t necessarily need&amp;quot; (like an
electric guitar).&lt;/p&gt;
&lt;p&gt;That&apos;s pretty basic stuff.The interesting parts of my budget thing follow. I
think the most important part of a money management system is some sort of
reward mechanism. You need some sort of feedback when you save money. If you
don&apos;t keep track of anything, it&apos;s harder to be motivated to spend less. If I
don&apos;t buy a delicious meal at Burgers Supreme, the only effect I see is &amp;quot;I
don&apos;t get to eat a delicious meal from Burgers Supreme.&amp;quot; How depressing.&lt;/p&gt;
&lt;p&gt;Another important thing is flexibility. I don&apos;t want to get thrown off just
because I ended up spending $7.46 more on groceries than I thought I was going
to (which is why I don&apos;t like strict categories).&lt;/p&gt;
&lt;p&gt;Here&apos;s how my system handles these two things. Based on my recurring expenses,
I figured out how much money I should always have on hand to make sure I don&apos;t
run out. I chose an amount about equal to one rent payment plus two weeks worth
of other expenses (mainly food) since I get paid every two weeks. This amount
was about $400.&lt;/p&gt;
&lt;p&gt;After I get a paycheck and take the percentage-based expenses out (tithing,
savings, taxes, &amp;quot;things I want&amp;quot;), I should have $400. If my paycheck occurs
right before the new month (and thus the new rent bill), I know I&apos;ll be able to
pay rent and my other expenses until I get my next paycheck. Thus, the $400
amount becomes my measuring stick. If I save money, I&apos;ll have a surplus amount.
Thus I can see how my thriftiness is rewarded. I would then divide the surplus
equally between savings and &amp;quot;things I want&amp;quot;. If there&apos;s a deficit, I&apos;ll make
sure to be extra thrifty the next two weeks so I can get back to $400. If I
consistently have a surplus or a deficit, then I would adjust the allocation
between recurring expenses and savings/&amp;quot;things I want&amp;quot; accordingly. Thus, the
system is flexible. I don&apos;t have to scrutinize over anything. It&apos;s a simple,
easy system to follow. Pure genius.&lt;/p&gt;
&lt;p&gt;So it might take a while for 5% of my paycheck to build up enough so I can buy
an electric guitar, but at least I&apos;ll be financially stable.&lt;/p&gt;
</content></entry><entry><title>Child Labor</title><id>https://jacobobryant.com/post/2015/child-labor/</id><link href="https://jacobobryant.com/post/2015/child-labor/" /><updated>2015-12-30T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I didn&apos;t have my first job until last September. I was 20 years old, recently
back from my mission. I had somewhat half-heartedly tried to get a part-time
job while I was still in high school, but I never landed any interviews. My
income throughout childhood was thus limited to family related things such as
doing extra chores for money. I wanted to get a job in high school because I
wanted to help pay a little bit for my mission, and I simply thought it would
be the nonlazy thing to do. In hindsight, it&apos;s probably best I never got a
job.&lt;/p&gt;
&lt;p&gt;It took just about all my time to keep up with school. That&apos;s because I was a
Running Start student. Running Start is a program in Washington state that
allows high school juniors and seniors to enroll in a community college instead
of (or in conjunction with) regular high school and have the state pay for
tuition. I did Running Start full-time for those two years, so by the time I
finished high school, I had completed two full years of college. In light of
that, I wasn&apos;t even financially that far behind of a hypothetical student who
got a job instead of doing Running Start. &lt;a href=&quot;http://www.edcc.edu/tuition/&quot;&gt;Tuition at Edmonds Community College&lt;/a&gt;
(the college I went to) is currently $1,282 per quarter, assuming you&apos;re taking
a full load of 15 credits. Working 15 hours per week for the length of a
college quarter at Washington state&apos;s minimum wage gets you about $1,563. The
hypothetical student comes out a little ahead, except he&apos;ll have to start out
college from square one whereas I&apos;ve already finished two years.&lt;/p&gt;
&lt;p&gt;This got me thinking about how I would want to handle teaching my future kids
to work when I&apos;m a parent. I want my kids to work for all their money. I&apos;ll
provide them with everything they need, of course, but I&apos;m not going to give
them an allowance. The reason is less because I want to teach them not be lazy
but rather because I want them to learn how to manage money. The way I think
about money is different now that I have a job and real income. I&apos;d like my
kids to learn early on to value the money they spend and thus become thrifty
people.&lt;/p&gt;
&lt;p&gt;The problem is how. When they get into high school, they can try to get
part-time jobs. But 1) we&apos;ve already seen this isn&apos;t necessarily very efficient
(at least if you live in Washington), and 2) I&apos;d like them to learn about money
management at an earlier age. So what work can a 10 year old (or younger) do?
Extra chores around the house come to mind, and maybe that&apos;ll work for some.
But I think there&apos;s a better way.&lt;/p&gt;
&lt;p&gt;In the same way that I came out ahead by going to a community college instead
of getting a job, I think the most productive thing a younger child can do is
school work. When they get to the point where they can land a job doing
something related to their career instead of menial labor, then is a good time
to get a normal job. It&apos;s worked out well for me. I have a job working with
software, and I&apos;m a computer science major. Not only does my job give me some
money, it&apos;s also valuable educationally. It&apos;s helping to prepare me for my
career.&lt;/p&gt;
&lt;p&gt;But until my kids reach that point, what&apos;s best for them? Learning is something
they can do at any age, and it has the best value in the long-term. As a base,
they would have to, without pay, do all of the normally required schoolwork
(obviously) in addition to chores that we divide up among family members. But
past that, I might be willing to pay them to, say, work ahead in math. Or read
a book and write an essay about it. Or learn about something completely new
(like computer programming!).&lt;/p&gt;
&lt;p&gt;This would have several benefits. The greatest benefit is that they would
hopefully develop a love of learning. I think it&apos;s somewhat typical for kids to
think of school as &amp;quot;not fun.&amp;quot; I myself remember thinking that I didn&apos;t like
math. I don&apos;t know why since it was so easy. Ideally, my kids would learn to
break out of this tradition. They would discover and pursue the things that
they enjoy. I&apos;m fortunate to have been introduced to programming at an early
age by my dad. Whatever it is my kids love to do, I want them to figure out
what it is and then do it.&lt;/p&gt;
&lt;p&gt;This love of learning would help them to accomplish as much as they can, not
just the bare minimum. It would have been easy for me to get ahead in math at
an early age. I didn&apos;t have difficulty with it until I took precalculus. In
fact in 9th grade, I did do extra math. I finished geometry quickly and decided
to move on to algebra 2. But by that time, I had gained a deeper appreciation
of education. As a younger child, why would I care about learning
multiplication and division when all I was &amp;quot;supposed&amp;quot; to do that year was
addition and subtraction? If I had the personal desire to, I think I could have
progressed much more quickly during my earlier years. If I can help them have
the motivation, perhaps my kids will all be child prodigies (I used to regret
not being one myself).&lt;/p&gt;
&lt;p&gt;I should mention briefly that I&apos;m writing this from the perspective of a
homeschooler. I fully intend to homeschool my children, possibly supplementing
their education with classes from local public schools on a case-by-case basis
to best meet their needs. The inflexibility of a full public school education
would make this whole earn-while-you-learn scheme more difficult.&lt;/p&gt;
&lt;p&gt;In light of all that, learning to manage money is practically a side effect. I
think it would be significant, though. I would need to carefully devise a
compensation system. If it&apos;s too easy for them to make money, they&apos;ll find a
comfortable routine, make a decent amount of cash and miss out on the long-term
educational benefits. If it&apos;s too hard, they just won&apos;t do it. I think I&apos;ll
avoid paying by the hour. That would be asking for trouble (&amp;quot;I just spent 100
hours reading this book, where&apos;s my money?&amp;quot;). Compensation will be based on
completion of various projects. The key I believe is to get them to do it for
more than just the money (a mindset that will be important as they pursue their
careers). I don&apos;t want them to be sitting with their stop watches thinking
about all the money they&apos;re getting. I want them to get lost in what they&apos;re
doing.&lt;/p&gt;
&lt;p&gt;Compensation would probably be negotiated per project. I&apos;ll be able to
continually evaluate the compensation system to make sure it&apos;s effective. I&apos;ll
probably offer compensation mainly for doing extra in core subjects that they
are already required to do (math, writing, science, etc) and for &amp;quot;starter&amp;quot;
projects in extracurricular subjects (music, computers, art, etc). If they find
an extracurricular subject that they really enjoy after doing a few projects in
it, they shouldn&apos;t need further monetary compensation to pursue it I don&apos;t
think. Paying them to do starter projects will motivate them to explore a lot
of different fields. When the project is completed, I would evaluate it with
both my wife and the child to assign it a grade. The pre-project negotiations
would include a grade-based pay scale. The child could be allowed to continue
working on the project before cashing in to get a higher grade.&lt;/p&gt;
&lt;p&gt;One of my missionary companions told me about a couple he had heard of who gave
each of their kids $30 every week to teach them &amp;quot;the value of money.&amp;quot; That&apos;s
obviously quite ridiculous. When you don&apos;t have to do very much to get money,
you think of it in terms of how long you have to wait for it (&amp;quot;If I wait for
three weeks, I&apos;ll have enough allowance to buy X&amp;quot;). Even if you&apos;re trying to be
responsible, spending money just isn&apos;t the same if you didn&apos;t work to earn it.
Only then do you know how much effort went in to getting that money, and that&apos;s
what the real value of money is.&lt;/p&gt;
&lt;p&gt;If the compensation system is working, my kids should feel like they really are
working for their money. Even young children will have an opportunity to do
meaningful work and get paid. They&apos;ll learn right from the start to be stingy
and responsible with their earnings. And because they&apos;ll be so educated,
they&apos;ll eventually have careers which give them lots of earnings with which to
be stingy and responsible.&lt;/p&gt;
</content></entry><entry><title>Clarinet Ergonomics</title><id>https://jacobobryant.com/post/2015/clarinet/</id><link href="https://jacobobryant.com/post/2015/clarinet/" /><updated>2015-12-27T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;I&apos;ve played the clarinet since 6th grade; about nine years as of writing this.
Through much of that time, I&apos;ve received a lot of trouble from my right pinky
finger. D/Eb trills and the like were my nemeses. I would practice for a few
hours each day before my mission, and a great deal of that time was spent
working on nothing but my right pinky. I never really conquered it. Below is a
video of me playing the first movement of the Mozart concerto at a solo &amp;amp;
ensemble festival in 2012. My sluggish pinky got the better of me in measure
110 (2:50 in the video—start it at 2:43).&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;
&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; src=&quot;https://www.youtube.com/embed/zSVj2937K2c&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;I continued to struggle with the finger until the following September, the
beginning of my senior year of high school. One day while I was practicing, I
was having even more trouble with the finger than usual. I tried to do a right
pinky trill and I simply could not do it, even at ridiculously slow speeds
(something like eighth notes at 1/4 = 60 bpm). After doing that and similar
exercises for about an hour, I realized &lt;a href=&quot;http://www.news.hypercrit.net/2012/11/13/einstein-on-misattribution-i-probably-didnt-say-that/&quot;&gt;something
must be wrong&lt;/a&gt;. I had noticed that as I would lift my pinky off a key, it
would involuntarily contract. This seemed to be the reason I was no longer able
to use my right pinky at all.&lt;/p&gt;
&lt;p&gt;I did some internet searching and found that my condition was called &lt;a href=&quot;https://en.wikipedia.org/wiki/Focal_dystonia&quot;&gt;focal dystonia&lt;/a&gt; (also
known as musician&apos;s dystonia). This diagnosis was later confirmed by a doctor.
Focal dystonia is a neurological movement disorder whose typical effect is to
end the musician&apos;s career (at least on that particular instrument), and that&apos;s
basically what it did to me. We tried the standard treatment (botox injections)
but to no avail. Fortunately I&apos;m a computer science major; clarinet is just a
hobby (albeit an important one). I had to discontinue private lessons and drop
out of the Everett Youth Symphony. It was especially a shame since the Symphony
had given me a scholarship the year previous that would cover the membership
costs for the entire year, not to mention I own two &lt;a href=&quot;http://www.pspriggs.com/&quot;&gt;really nice clarinets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Medium length story short, I went on my mission right after graduating high
school, and when I came back, the dystonia was gone. I could play again! Before
my mission I had noticed that the dystonia was also affecting my typing (and I
typed quite a lot as a CS major). I bent over backwards to avoid using my right
pinky, going so far as to create a mirrored version of the Dvorak keyboard
layout (which I was already using) that would give more emphasis to the left
hand. When I left on my mission, I even stopped typing. We only used computers
for an hour and a half per week to email our families. Perhaps giving my finger
a rest from both clarinet and typing for two years was enough for my brain to
reset itself.&lt;/p&gt;
&lt;p&gt;Hence, for the past five months I&apos;ve been practicing for several hours per
week. Although my finger is much better without the dystonia, it&apos;s still
sluggish like before. I&apos;ve been very careful and patient with my finger
exercises as I&apos;ve attempted to train it. I believe what caused my dystonia
before was doing extremely repetitive exercises with poor technique in an
attempt to brute-force my finger into compliance. I&apos;ve made sure this time
around to take things slower and make sure I&apos;m really getting the technique
down correctly. However, my progress has still felt like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2015/clarinet/clarinet_graph.jpg&quot; alt=&quot;clarinet graph&quot;&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I think I finally figured out why my finger has been such a pain
in the neck. Look at the the position of the left thumb in the following
picture, and then contrast it with the standard right thumb position:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2015/clarinet/clarinet_back.jpg&quot; alt=&quot;clarinet back&quot;&gt;&lt;/p&gt;
&lt;p&gt;The position of the thumb affects the rest of the hand. The left hand fingers
are more or less perpendicular to the clarinet while the right hand fingers
have to be more slanted:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2015/clarinet/clarinet_front.jpg&quot; alt=&quot;clarinet front&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since my left pinky is completely fine, I thought maybe this was harming my
right pinky performance. I messed around with the thumb rest, turning it upside
down and whatnot, but then I decided to just take the whole thing off. I&apos;ve
been practicing for two or three days now without a thumb rest, supporting the
clarinet with my knees. At first I anchored the thumb on the clarinet above
where the thumb rest used to be. This put it in a position similar to the left
thumb. Today I simply suspended the right thumb in the air and avoided touching
the clarinet with it at all. I like that the most.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/jacobobryant/site/public/post/2015/clarinet/clarinet_mid.jpg&quot; alt=&quot;clarinet front&quot;&gt;&lt;/p&gt;
&lt;p&gt;So far the results have been promising. I&apos;ve been slowly retraining my right
fingers with the new position, and progress has been great. Importantly,
progress has felt permament. I think I may finally be able to breach the
aforementioned suckiness threshold. If this really is the cause of all my pinky
sorrows, this is really a huge breakthrough for me. I&apos;ll update this page with
my progress after a longer amount of time has passed.&lt;/p&gt;
&lt;p&gt;I&apos;ll probably look into alternative ways to support my clarinet so I can play
while standing up. I already practice with a neck strap, but it doesn&apos;t suspend
the clarinet all by itself—it just takes most of the weight off, still
requiring the right thumb to support a bit of the clarinet. I&apos;ll figure
something out. I just hope this episode of my clarinet playing is really coming
to an end.&lt;/p&gt;
</content></entry><entry><title>One Eternal Round</title><id>https://jacobobryant.com/post/2015/one-eternal-round/</id><link href="https://jacobobryant.com/post/2015/one-eternal-round/" /><updated>2015-12-05T00:00:00.000-07:00</updated><content type="html">&lt;p&gt;The fourth article of faith states, “We believe that the first principles and
ordinances of the Gospel are: first, Faith in the Lord Jesus Christ; second,
Repentance; third, Baptism by immersion for the remission of sins; fourth,
Laying on of hands for the gift of the Holy Ghost.” These four elements, with
the addition of “fifth, enduring to the end,” make up what Nephi refers to as
the doctrine of Christ (2 Nephi 31:2). Most of us are aware of the cyclical
nature of this doctrine. Nephi explains in unmistakable terms that
all is not done after we are baptized and receive the Holy Ghost (2 Nephi
31:19). In 2 Nephi 31:20, he instructs us of our post-baptismal duties: &lt;/p&gt;&lt;p style=&quot;padding-left: 30px;&quot;&gt;Wherefore, ye must press forward with a
steadfastness in Christ, having a perfect brightness of hope, and a love of God
and of all men. Wherefore, if ye shall press forward, feasting upon the word of
Christ, and endure to the end, behold, thus saith the Father: Ye shall have
eternal life.&lt;/p&gt; Many of us understand that another explanation of what it
means to “endure to the end” is to repeat again and again the first four
principles and ordinances of the gospel, substituting baptism with partaking of
the sacrament. But what is the citation for this idea? Certainly we have plenty
of evidence in the words of latter-day prophets, but I would like to suggest
one scriptural source. That source is Ether 12:27-28.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Verse 27 contains the gospel in a nutshell: &lt;/p&gt;&lt;p style=&quot;padding-left: 30px;&quot;&gt;And
if men come unto me I will show unto them their weakness. I give unto men
weakness that they may be humble; and my grace is sufficient for all men that
humble themselves before me; for if they humble themselves before me, and have
faith in me, then will I make weak things become strong unto them.&lt;/p&gt; Just as
Christ overcame the two ultimate weaknesses of spiritual death and physical
death, we can overcome sin if we tap into the Lord’s redemptive power through
faith on His name.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As President Gordon B. Hinckley taught, faith is like a muscle. I believe this
analogy is stronger than we may realize. In order to exercise a muscle and
increase its strength thereby, some prerequisites must be fulfilled. We need
some sort of resistance for the muscle to work against. Ether 12:27 lists the
prerequisites for exercising faith. First, we must come unto Christ. Then He
will show unto us our weakness. Second, we must choose to humble ourselves.
Only then are we in position to exercise our faith against the resistance of
our weakness.&lt;/p&gt;
&lt;p&gt;What does it mean to come unto Christ? Verse 28 says, “Behold, ... I will show
unto [the gentiles] that faith, hope and charity bringeth unto me….” Now let me
remind you of the phrasing in 2 Nephi 31:20. “Wherefore, ye must press forward
with a steadfastness in Christ, having a perfect brightness of hope, and a love
of God and of all men.” I believe that “steadfastness in Christ” is a synonym
for faith. Indeed, this definition sheds light on the true meaning of faith.&lt;/p&gt;
&lt;p&gt;It now becomes clear that enduring to the end, by Nephi’s definition, is
pressing forward with faith, hope and charity as we feast upon the words of
Christ unto the end of our mortal lives. This very act, as Ether 12:28
explains, will bring us closer to Christ. Thus we will be repositioned to
exercise our faith against even greater weakness. The cycle will continue until
we obtain eternal life.&lt;/p&gt;
&lt;p&gt;In D&amp;amp;C 3:2, we read, &lt;/p&gt;&lt;p style=&quot;padding-left: 30px;&quot;&gt;For God doth not walk
in crooked paths, neither doth he turn to the right hand nor to the left,
neither doth he vary from that which he hath said, therefore his paths are
straight, and his course is one eternal round.&lt;/p&gt; As we press forward on the
strait and narrow path, we will become more like God. Our deviations from the
doctrine of Christ will decrease until our course, too, becomes “one eternal
round.”&lt;p&gt;&lt;/p&gt;
&lt;p&gt;It is my hope that increased understanding of this process will help us to
recognize it in our lives. We can then live with gratitude for all the
experiences given to us by our loving Father in Heaven, which will enable us to
live as Nephi’s people, “after the manner of happiness” (2 Nephi 5:27).&lt;/p&gt;
</content></entry><entry><title>Sucky Software</title><id>https://jacobobryant.com/post/2015/sucky-software/</id><link href="https://jacobobryant.com/post/2015/sucky-software/" /><updated>2015-08-23T00:00:00.000-06:00</updated><content type="html">&lt;p&gt;A big problem with Android is that a lot of the default apps suck. I often have
to find replacements. Apple&apos;s default apps are usually wonderful. Sometimes I
still decided to find replacements that had more features, but the apps on iOS
didn&apos;t carry the same feeling of suckiness. Why?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feature priority&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sucky apps usually have one or two missing features that, to me, are
critical. It seems obvious that the app would need to have them, and the
features usually wouldn&apos;t be that hard to implement.&lt;/p&gt;
&lt;p&gt;Consider the set of all features a particular app could have. Let&apos;s say the set
is sorted by priority of implementation—which features should be implemented
first. Priority is given by importance (a compound of how many people would use
the feature and how much utility they would derive from it) divided by the
amount of resources (e.g. time) required to implement the feature. A less
important feature could still have a higher priority than a more important
feature if the former is trivial to implement while the latter is more complex.&lt;/p&gt;
&lt;p&gt;The feeling of suckiness comes in part from when it feels like features have
been implemented out of order, based on priority. Here&apos;s an example. I use my
phone to play music. There are two particular features I would like a music app
to have: 1) the option to select a specific directory that holds music, and 2)
hierarchical folder navigation (as opposed to flat folder navigation). I don&apos;t
know of any apps that have both these features. Feature 1 especially seems like
a no-brainer, yet few apps have it. The app I use right now, Shuttle Music
Player, doesn&apos;t have that feature. As a result, the folder with &lt;a href=&quot;https://www.lds.org/general-conference/&quot;&gt;general conference&lt;/a&gt;
recordings was being included in my music library. It was pretty annoying
scrolling through dozens of &amp;quot;artists,&amp;quot; all with names that begin with &amp;quot;Elder.&amp;quot;
It seems to me that many people would have non-music audio recordings on their
phones. Why would an app not allow me to select where my actual music library
is located so the app doesn&apos;t have to add all audio files on the entire SD
card?&lt;/p&gt;
&lt;p&gt;But that&apos;s not all—Shuttle does a lot of fancy album artwork downloading, so
practically any song I have in the library (except for those by Elder Ucthdorf)
has associated album artwork. This is a nifty feature I guess, but it&apos;s not a
critical one. After all, it&apos;s a music player, not an art gallery.&lt;/p&gt;
&lt;p&gt;Again, the suck is there not just because the music player doesn&apos;t have the
feature I want but because it also has other features that seem to have a lower
priority. Using an app that doesn&apos;t have a feature I want is like getting on a
bus and finding out it doesn&apos;t go as far as I wanted to go—irritating but
understandable. Using an app that doesn&apos;t have the feature I want but
&lt;em&gt;does&lt;/em&gt; have other lower priority features is like getting on a bus that
drives right past my destination but doesn&apos;t stop to let me off. The first
experience is disappointing, but the second is truly sucky.&lt;/p&gt;
&lt;p&gt;So why did the developers give higher priority to album artwork downloading
than to music library location specification? Why do developers implement
features out of order?&lt;/p&gt;
&lt;p&gt;I&apos;m still trying to figure that one out. There are two possibilities. I could
be miscalculating the priority of a particular feature. Perhaps most people
don&apos;t actually care about the feature as much as I assume, or in some cases,
maybe the feature would be harder to implement than I think. The other
possibility is that the developers are unaware of the feature or its priority.
Maybe they haven&apos;t even thought of that feature, or they don&apos;t realize how
important it is. The only other possibility is that the developers are in fact
aware of the feature and its priority but still choose not to implement it.
Unless Apple has hired a team of developers to embed Android with apps that
seem good but are just sucky enough to leave a bad taste in users&apos; mouths, this
seems unlikely.&lt;/p&gt;
&lt;p&gt;I think one reason Apple&apos;s apps tend to not suck is because they put a lot of
effort into understanding their users and what they need. They tend to have a
good grip of all the features at the top of the priority list. But there&apos;s
another aspect of app design that Apple is really good at. I call it &amp;quot;ergonomic
usage.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two parts to any app: the raw functionality and the user interface.
We&apos;ve covered functionality already. A good interface could be defined as one
that allows the user to take advantage of the app&apos;s functionality with as
little effort as possible. Again, it&apos;ll be easiest to explain with an example.&lt;/p&gt;
&lt;p&gt;I&apos;ll compare two music player apps, Poweramp and shuttle. Poweramp is a widely
used music player app for Android, and it constitutes what should be a good
example of a well-designed app. I&apos;ll compare the following tasks on both
players: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;Start playing all the songs of a particular artist with
shuffle on.&lt;/li&gt; &lt;li&gt;Navigate to a different artist.&lt;/li&gt; &lt;li&gt;Navigate to an
album of a different artist.&lt;/li&gt; &lt;li&gt;Create a playlist with songs from all
three previous locations.&lt;/li&gt; &lt;/ol&gt; &lt;strong&gt;Poweramp&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I open the app. It loads a now-playing screen. There&apos;s no &amp;quot;artist&amp;quot; button.
There&apos;s an icon with a treble clef superimposed over a folder. That looks
promising. It leads me to a list of all the folders on my SD card with audio
files (makes sense). Still no artist button. There&apos;s a thing at the bottom that
says &amp;quot;Library,&amp;quot; so I&apos;ll try that. OK, now I have a menu where I can select all
songs, albums, artists, etc. I click on &amp;quot;artists&amp;quot; and then scroll down to Rise
Against. I then get a screen with all the albums. Fortunately there&apos;s an &amp;quot;All
Artist Songs&amp;quot; button, so I click that and finally I&apos;m at my destination. I
select the song &amp;quot;This is Letting Go,&amp;quot; and then I press the shuffle icon. Task 1
completed with six clicks.&lt;/p&gt;
&lt;p&gt;Task 2 is the same, only it takes one less click because when I click on that
first folder icon, it immediately loads the Library screen instead of the
Folders screen (why isn&apos;t folders just another option next to artists and
albums?). Navigating to an album is similar. We&apos;re up to 15 total clicks so
far.&lt;/p&gt;
&lt;p&gt;I&apos;m currently listening to the album Fallen by Evanescense. Fortunately I
already found out by accident that if I touch the name of the currently playing
song, it will bring me back to the song list of the album. I add three songs to
the playlist, which takes three clicks per song (there&apos;s no way to add multiple
songs at the same time). I navigate back to the artists view. I add all songs
from 3 Doors Down and then I add all the songs from Appeal to Reason, one of
Rise Against&apos;s albums.&lt;/p&gt;
&lt;p&gt;Total clicks: 35&lt;/p&gt;
&lt;p&gt;I ran into a few pitfalls while doing this. After finishing the first song in
Fallen while I was playing that album, instead of going to another song in the
same album, it switched to a song by a completely different artist. WTF (what
the flip)? The same thing happened later when I listened to the playlist. I
know this can be fixed in the settings—I&apos;ve done it before—but it&apos;s not
straightforward at all. This is a &lt;strong&gt;serious&lt;/strong&gt; flaw. I don&apos;t think
I need to state how obvious it is that when playing an album or a playlist,
most people will expect the app to &lt;em&gt;only play songs in that album or
playlist &lt;/em&gt;(hint: it&apos;s pretty obvious). The number of clicks it takes to
perform all our tasks is insignificant in regards to this headache. There were
a few other little quirks that came up, but this was the worst.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shuttle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I open the app and it brings me right to the artists page. On the top of the
screen I can see buttons for albums and songs. I already feel more at home. I
scroll down and click on Rise Against. It loads a screen that has the albums
but also has the entire song list underneath, saving me a click. Also, there&apos;s
a nifty button to immediately shuffle through all the songs, so I don&apos;t even
have to choose a starting song if I don&apos;t want to. Mission accomplished in two
clicks. Navigating to the second artist takes me one additional click because I
have to go back to the artist view. Navigating from there to Fallen takes four
clicks. Creating the exact same playlist as I did in Poweramp takes 16 clicks.&lt;/p&gt;
&lt;p&gt;Total clicks: 25&lt;/p&gt;
&lt;p&gt;In addition to being about 29% more efficient with regard to number of clicks
alone, Shuttle&apos;s interface just felt so nice. Everything worked as I expected
it to, and it was all laid out in a helpful way. I can&apos;t think of any way the
interface could have saved me more effort as I used the features—a good
interface by definition. Can you see why I use Shuttle? Apart from the music
folder location thing, it really is a wonderful app.&lt;/p&gt;
&lt;p&gt;I don&apos;t think I&apos;ve bashed Poweramp quite enough, so let me direct you to the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.maxmpz.audioplayer&amp;amp;hl=en&quot;&gt;Google
Play listing&lt;/a&gt;. First of all, this app is actually just a two-week free
trial. The full version costs $3.99. As of right now the trial version has
about 900,000 downloads. The developer, Max MP, is listed as a &amp;quot;top developer.&amp;quot;
Now let&apos;s take a look at &lt;a href=&quot;https://play.google.com/store/apps/details?id=another.music.player&amp;amp;hl=en&quot;&gt;Shuttle&lt;/a&gt;.
There is a full version for $1.75, but the free version isn&apos;t a trial. 50,000
downloads. SimpleCity, the developer, looks like an average Joe.&lt;/p&gt;
&lt;p&gt;The descriptions of each app are telling: &lt;/p&gt;&lt;blockquote&gt;Shuttle Music Player is
an intuitive, lightweight and powerful music player for Android.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Poweramp is a powerful music player for Android.&lt;/p&gt;&lt;/blockquote&gt; Intuitive isn&apos;t a
buzz word. It&apos;s a great description of Shuttle. Notice that the Poweramp
description only mentions power (and that it&apos;s for Android. Same for Shuttle. I
thought it was obvious since I&apos;m looking at the Google Play store). Poweramp
does have a lot of features, but it&apos;s hard for me to care when my head is
throbbing from the aneurysm caused by their abomination of a user interface
(alright, maybe it&apos;s not that bad, but &amp;quot;abomination&amp;quot; is one of my favorite
words).&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_S._Raymond&quot;&gt;Eric Raymond&lt;/a&gt;
points out in a &lt;a href=&quot;http://www.catb.org/esr/writings/cups-horror.html&quot;&gt;horror story&lt;/a&gt; about
a terribly designed user interface, a &amp;quot;slick-looking UI&amp;quot; is not necessarily a
&amp;quot;well-designed UI.&amp;quot;&lt;/p&gt;
&lt;p&gt;When I was serving as a missionary in Malaysia and Singapore, I would be
transferred to a different area usually about every three to six months. I
typically had to catch a flight to the new area, so all my belongings had to be
packed into a couple of luggage cases. When I arrived at my new apartment, I
would take everything out of my luggage and arrange it so I could get to all of
my things with the least amount of effort. Clothes go in the dresser, books go
on my desk, etc. It&apos;s pretty obvious. Good design usually doesn&apos;t stand out
because it&apos;s not supposed to. The interface design should connect you with the
features as closely as possible and stay out of the way.&lt;/p&gt;
&lt;p&gt;I heard of another missionary who was transferred to a new area six weeks
before he was scheduled to go back home to the US. He didn&apos;t want to unpack all
his things just to put them all back soon after, so he lived out of his luggage
cases for those six weeks. This is like many poorly designed interfaces. All
the functionality is there, but it&apos;s not laid out in a way that facilitates
ergonomic usage. Yet many of these interfaces come with customizable themes.
&amp;quot;You can choose a luggage case in black (default), blue, orange, pink, red,
green, cyan or chartreuse!&amp;quot; Isn&apos;t that comforting?&lt;/p&gt;
&lt;p&gt;Now, some of these bad interface decisions might be small, but small, repeated
amounts of effort add up. You want an ergonomic design that minimizes effort.&lt;/p&gt;
&lt;p&gt;May we all remember these principles and push for a higher standard of quality
in the software we use. I believe that both Android and desktop Linux would
benefit greatly.  I plan to develop several Android apps with these
philosophies in mind, one of which will be a music player. I think I&apos;ll call it
&amp;quot;SuckFree Music Player.&amp;quot; Ideally, the app will be good enough to be considered
as a &amp;quot;default&amp;quot; app for custom ROMs, or one day even Android itself. If that day
ever comes, I only hope I don&apos;t have to compromise on a more politically
correct name.&lt;/p&gt;
</content></entry></feed>